// Code generated by Prisma (prisma@1.34.0). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  chartNode: (where?: ChartNodeWhereInput) => Promise<boolean>;
  report: (where?: ReportWhereInput) => Promise<boolean>;
  slide: (where?: SlideWhereInput) => Promise<boolean>;
  textNode: (where?: TextNodeWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  chartNode: (where: ChartNodeWhereUniqueInput) => ChartNodeNullablePromise;
  chartNodes: (args?: {
    where?: ChartNodeWhereInput;
    orderBy?: ChartNodeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ChartNode>;
  chartNodesConnection: (args?: {
    where?: ChartNodeWhereInput;
    orderBy?: ChartNodeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ChartNodeConnectionPromise;
  report: (where: ReportWhereUniqueInput) => ReportNullablePromise;
  reports: (args?: {
    where?: ReportWhereInput;
    orderBy?: ReportOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Report>;
  reportsConnection: (args?: {
    where?: ReportWhereInput;
    orderBy?: ReportOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ReportConnectionPromise;
  slide: (where: SlideWhereUniqueInput) => SlideNullablePromise;
  slides: (args?: {
    where?: SlideWhereInput;
    orderBy?: SlideOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Slide>;
  slidesConnection: (args?: {
    where?: SlideWhereInput;
    orderBy?: SlideOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => SlideConnectionPromise;
  textNode: (where: TextNodeWhereUniqueInput) => TextNodeNullablePromise;
  textNodes: (args?: {
    where?: TextNodeWhereInput;
    orderBy?: TextNodeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<TextNode>;
  textNodesConnection: (args?: {
    where?: TextNodeWhereInput;
    orderBy?: TextNodeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => TextNodeConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createChartNode: (data: ChartNodeCreateInput) => ChartNodePromise;
  updateChartNode: (args: {
    data: ChartNodeUpdateInput;
    where: ChartNodeWhereUniqueInput;
  }) => ChartNodePromise;
  updateManyChartNodes: (args: {
    data: ChartNodeUpdateManyMutationInput;
    where?: ChartNodeWhereInput;
  }) => BatchPayloadPromise;
  upsertChartNode: (args: {
    where: ChartNodeWhereUniqueInput;
    create: ChartNodeCreateInput;
    update: ChartNodeUpdateInput;
  }) => ChartNodePromise;
  deleteChartNode: (where: ChartNodeWhereUniqueInput) => ChartNodePromise;
  deleteManyChartNodes: (where?: ChartNodeWhereInput) => BatchPayloadPromise;
  createReport: (data: ReportCreateInput) => ReportPromise;
  updateReport: (args: {
    data: ReportUpdateInput;
    where: ReportWhereUniqueInput;
  }) => ReportPromise;
  updateManyReports: (args: {
    data: ReportUpdateManyMutationInput;
    where?: ReportWhereInput;
  }) => BatchPayloadPromise;
  upsertReport: (args: {
    where: ReportWhereUniqueInput;
    create: ReportCreateInput;
    update: ReportUpdateInput;
  }) => ReportPromise;
  deleteReport: (where: ReportWhereUniqueInput) => ReportPromise;
  deleteManyReports: (where?: ReportWhereInput) => BatchPayloadPromise;
  createSlide: (data: SlideCreateInput) => SlidePromise;
  updateSlide: (args: {
    data: SlideUpdateInput;
    where: SlideWhereUniqueInput;
  }) => SlidePromise;
  upsertSlide: (args: {
    where: SlideWhereUniqueInput;
    create: SlideCreateInput;
    update: SlideUpdateInput;
  }) => SlidePromise;
  deleteSlide: (where: SlideWhereUniqueInput) => SlidePromise;
  deleteManySlides: (where?: SlideWhereInput) => BatchPayloadPromise;
  createTextNode: (data: TextNodeCreateInput) => TextNodePromise;
  updateTextNode: (args: {
    data: TextNodeUpdateInput;
    where: TextNodeWhereUniqueInput;
  }) => TextNodePromise;
  updateManyTextNodes: (args: {
    data: TextNodeUpdateManyMutationInput;
    where?: TextNodeWhereInput;
  }) => BatchPayloadPromise;
  upsertTextNode: (args: {
    where: TextNodeWhereUniqueInput;
    create: TextNodeCreateInput;
    update: TextNodeUpdateInput;
  }) => TextNodePromise;
  deleteTextNode: (where: TextNodeWhereUniqueInput) => TextNodePromise;
  deleteManyTextNodes: (where?: TextNodeWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  chartNode: (
    where?: ChartNodeSubscriptionWhereInput
  ) => ChartNodeSubscriptionPayloadSubscription;
  report: (
    where?: ReportSubscriptionWhereInput
  ) => ReportSubscriptionPayloadSubscription;
  slide: (
    where?: SlideSubscriptionWhereInput
  ) => SlideSubscriptionPayloadSubscription;
  textNode: (
    where?: TextNodeSubscriptionWhereInput
  ) => TextNodeSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type TextAlign = "Left" | "Right" | "Center";

export type SlideOrderByInput = "id_ASC" | "id_DESC";

export type TextNodeOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "fontSize_ASC"
  | "fontSize_DESC"
  | "color_ASC"
  | "color_DESC"
  | "textAlign_ASC"
  | "textAlign_DESC"
  | "x_ASC"
  | "x_DESC"
  | "y_ASC"
  | "y_DESC"
  | "width_ASC"
  | "width_DESC"
  | "height_ASC"
  | "height_DESC"
  | "value_ASC"
  | "value_DESC";

export type ChartNodeOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "x_ASC"
  | "x_DESC"
  | "y_ASC"
  | "y_DESC"
  | "width_ASC"
  | "width_DESC"
  | "height_ASC"
  | "height_DESC"
  | "query_ASC"
  | "query_DESC";

export type ReportOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "owner_ASC"
  | "owner_DESC"
  | "width_ASC"
  | "width_DESC"
  | "height_ASC"
  | "height_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type ChartNodeWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface SlideWhereInput {
  report?: Maybe<ReportWhereInput>;
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  textNodes_every?: Maybe<TextNodeWhereInput>;
  textNodes_some?: Maybe<TextNodeWhereInput>;
  textNodes_none?: Maybe<TextNodeWhereInput>;
  chartNodes_every?: Maybe<ChartNodeWhereInput>;
  chartNodes_some?: Maybe<ChartNodeWhereInput>;
  chartNodes_none?: Maybe<ChartNodeWhereInput>;
  AND?: Maybe<SlideWhereInput[] | SlideWhereInput>;
  OR?: Maybe<SlideWhereInput[] | SlideWhereInput>;
  NOT?: Maybe<SlideWhereInput[] | SlideWhereInput>;
}

export interface ReportWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  owner?: Maybe<ID_Input>;
  owner_not?: Maybe<ID_Input>;
  owner_in?: Maybe<ID_Input[] | ID_Input>;
  owner_not_in?: Maybe<ID_Input[] | ID_Input>;
  owner_lt?: Maybe<ID_Input>;
  owner_lte?: Maybe<ID_Input>;
  owner_gt?: Maybe<ID_Input>;
  owner_gte?: Maybe<ID_Input>;
  owner_contains?: Maybe<ID_Input>;
  owner_not_contains?: Maybe<ID_Input>;
  owner_starts_with?: Maybe<ID_Input>;
  owner_not_starts_with?: Maybe<ID_Input>;
  owner_ends_with?: Maybe<ID_Input>;
  owner_not_ends_with?: Maybe<ID_Input>;
  width?: Maybe<Int>;
  width_not?: Maybe<Int>;
  width_in?: Maybe<Int[] | Int>;
  width_not_in?: Maybe<Int[] | Int>;
  width_lt?: Maybe<Int>;
  width_lte?: Maybe<Int>;
  width_gt?: Maybe<Int>;
  width_gte?: Maybe<Int>;
  height?: Maybe<Int>;
  height_not?: Maybe<Int>;
  height_in?: Maybe<Int[] | Int>;
  height_not_in?: Maybe<Int[] | Int>;
  height_lt?: Maybe<Int>;
  height_lte?: Maybe<Int>;
  height_gt?: Maybe<Int>;
  height_gte?: Maybe<Int>;
  slides_every?: Maybe<SlideWhereInput>;
  slides_some?: Maybe<SlideWhereInput>;
  slides_none?: Maybe<SlideWhereInput>;
  AND?: Maybe<ReportWhereInput[] | ReportWhereInput>;
  OR?: Maybe<ReportWhereInput[] | ReportWhereInput>;
  NOT?: Maybe<ReportWhereInput[] | ReportWhereInput>;
}

export interface TextNodeWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  slide?: Maybe<SlideWhereInput>;
  fontSize?: Maybe<Int>;
  fontSize_not?: Maybe<Int>;
  fontSize_in?: Maybe<Int[] | Int>;
  fontSize_not_in?: Maybe<Int[] | Int>;
  fontSize_lt?: Maybe<Int>;
  fontSize_lte?: Maybe<Int>;
  fontSize_gt?: Maybe<Int>;
  fontSize_gte?: Maybe<Int>;
  color?: Maybe<String>;
  color_not?: Maybe<String>;
  color_in?: Maybe<String[] | String>;
  color_not_in?: Maybe<String[] | String>;
  color_lt?: Maybe<String>;
  color_lte?: Maybe<String>;
  color_gt?: Maybe<String>;
  color_gte?: Maybe<String>;
  color_contains?: Maybe<String>;
  color_not_contains?: Maybe<String>;
  color_starts_with?: Maybe<String>;
  color_not_starts_with?: Maybe<String>;
  color_ends_with?: Maybe<String>;
  color_not_ends_with?: Maybe<String>;
  textAlign?: Maybe<TextAlign>;
  textAlign_not?: Maybe<TextAlign>;
  textAlign_in?: Maybe<TextAlign[] | TextAlign>;
  textAlign_not_in?: Maybe<TextAlign[] | TextAlign>;
  x?: Maybe<Int>;
  x_not?: Maybe<Int>;
  x_in?: Maybe<Int[] | Int>;
  x_not_in?: Maybe<Int[] | Int>;
  x_lt?: Maybe<Int>;
  x_lte?: Maybe<Int>;
  x_gt?: Maybe<Int>;
  x_gte?: Maybe<Int>;
  y?: Maybe<Int>;
  y_not?: Maybe<Int>;
  y_in?: Maybe<Int[] | Int>;
  y_not_in?: Maybe<Int[] | Int>;
  y_lt?: Maybe<Int>;
  y_lte?: Maybe<Int>;
  y_gt?: Maybe<Int>;
  y_gte?: Maybe<Int>;
  width?: Maybe<Int>;
  width_not?: Maybe<Int>;
  width_in?: Maybe<Int[] | Int>;
  width_not_in?: Maybe<Int[] | Int>;
  width_lt?: Maybe<Int>;
  width_lte?: Maybe<Int>;
  width_gt?: Maybe<Int>;
  width_gte?: Maybe<Int>;
  height?: Maybe<Int>;
  height_not?: Maybe<Int>;
  height_in?: Maybe<Int[] | Int>;
  height_not_in?: Maybe<Int[] | Int>;
  height_lt?: Maybe<Int>;
  height_lte?: Maybe<Int>;
  height_gt?: Maybe<Int>;
  height_gte?: Maybe<Int>;
  value?: Maybe<String>;
  value_not?: Maybe<String>;
  value_in?: Maybe<String[] | String>;
  value_not_in?: Maybe<String[] | String>;
  value_lt?: Maybe<String>;
  value_lte?: Maybe<String>;
  value_gt?: Maybe<String>;
  value_gte?: Maybe<String>;
  value_contains?: Maybe<String>;
  value_not_contains?: Maybe<String>;
  value_starts_with?: Maybe<String>;
  value_not_starts_with?: Maybe<String>;
  value_ends_with?: Maybe<String>;
  value_not_ends_with?: Maybe<String>;
  AND?: Maybe<TextNodeWhereInput[] | TextNodeWhereInput>;
  OR?: Maybe<TextNodeWhereInput[] | TextNodeWhereInput>;
  NOT?: Maybe<TextNodeWhereInput[] | TextNodeWhereInput>;
}

export interface ChartNodeWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  slide?: Maybe<SlideWhereInput>;
  x?: Maybe<Int>;
  x_not?: Maybe<Int>;
  x_in?: Maybe<Int[] | Int>;
  x_not_in?: Maybe<Int[] | Int>;
  x_lt?: Maybe<Int>;
  x_lte?: Maybe<Int>;
  x_gt?: Maybe<Int>;
  x_gte?: Maybe<Int>;
  y?: Maybe<Int>;
  y_not?: Maybe<Int>;
  y_in?: Maybe<Int[] | Int>;
  y_not_in?: Maybe<Int[] | Int>;
  y_lt?: Maybe<Int>;
  y_lte?: Maybe<Int>;
  y_gt?: Maybe<Int>;
  y_gte?: Maybe<Int>;
  width?: Maybe<Int>;
  width_not?: Maybe<Int>;
  width_in?: Maybe<Int[] | Int>;
  width_not_in?: Maybe<Int[] | Int>;
  width_lt?: Maybe<Int>;
  width_lte?: Maybe<Int>;
  width_gt?: Maybe<Int>;
  width_gte?: Maybe<Int>;
  height?: Maybe<Int>;
  height_not?: Maybe<Int>;
  height_in?: Maybe<Int[] | Int>;
  height_not_in?: Maybe<Int[] | Int>;
  height_lt?: Maybe<Int>;
  height_lte?: Maybe<Int>;
  height_gt?: Maybe<Int>;
  height_gte?: Maybe<Int>;
  query?: Maybe<String>;
  query_not?: Maybe<String>;
  query_in?: Maybe<String[] | String>;
  query_not_in?: Maybe<String[] | String>;
  query_lt?: Maybe<String>;
  query_lte?: Maybe<String>;
  query_gt?: Maybe<String>;
  query_gte?: Maybe<String>;
  query_contains?: Maybe<String>;
  query_not_contains?: Maybe<String>;
  query_starts_with?: Maybe<String>;
  query_not_starts_with?: Maybe<String>;
  query_ends_with?: Maybe<String>;
  query_not_ends_with?: Maybe<String>;
  AND?: Maybe<ChartNodeWhereInput[] | ChartNodeWhereInput>;
  OR?: Maybe<ChartNodeWhereInput[] | ChartNodeWhereInput>;
  NOT?: Maybe<ChartNodeWhereInput[] | ChartNodeWhereInput>;
}

export type ReportWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type SlideWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type TextNodeWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ChartNodeCreateInput {
  id?: Maybe<ID_Input>;
  slide: SlideCreateOneWithoutChartNodesInput;
  x: Int;
  y: Int;
  width: Int;
  height: Int;
  query: String;
}

export interface SlideCreateOneWithoutChartNodesInput {
  create?: Maybe<SlideCreateWithoutChartNodesInput>;
  connect?: Maybe<SlideWhereUniqueInput>;
}

export interface SlideCreateWithoutChartNodesInput {
  report: ReportCreateOneWithoutSlidesInput;
  id?: Maybe<ID_Input>;
  textNodes?: Maybe<TextNodeCreateManyWithoutSlideInput>;
}

export interface ReportCreateOneWithoutSlidesInput {
  create?: Maybe<ReportCreateWithoutSlidesInput>;
  connect?: Maybe<ReportWhereUniqueInput>;
}

export interface ReportCreateWithoutSlidesInput {
  id?: Maybe<ID_Input>;
  title: String;
  owner: ID_Input;
  width: Int;
  height: Int;
}

export interface TextNodeCreateManyWithoutSlideInput {
  create?: Maybe<
    TextNodeCreateWithoutSlideInput[] | TextNodeCreateWithoutSlideInput
  >;
  connect?: Maybe<TextNodeWhereUniqueInput[] | TextNodeWhereUniqueInput>;
}

export interface TextNodeCreateWithoutSlideInput {
  id?: Maybe<ID_Input>;
  fontSize: Int;
  color: String;
  textAlign: TextAlign;
  x: Int;
  y: Int;
  width: Int;
  height: Int;
  value: String;
}

export interface ChartNodeUpdateInput {
  slide?: Maybe<SlideUpdateOneRequiredWithoutChartNodesInput>;
  x?: Maybe<Int>;
  y?: Maybe<Int>;
  width?: Maybe<Int>;
  height?: Maybe<Int>;
  query?: Maybe<String>;
}

export interface SlideUpdateOneRequiredWithoutChartNodesInput {
  create?: Maybe<SlideCreateWithoutChartNodesInput>;
  update?: Maybe<SlideUpdateWithoutChartNodesDataInput>;
  upsert?: Maybe<SlideUpsertWithoutChartNodesInput>;
  connect?: Maybe<SlideWhereUniqueInput>;
}

export interface SlideUpdateWithoutChartNodesDataInput {
  report?: Maybe<ReportUpdateOneRequiredWithoutSlidesInput>;
  textNodes?: Maybe<TextNodeUpdateManyWithoutSlideInput>;
}

export interface ReportUpdateOneRequiredWithoutSlidesInput {
  create?: Maybe<ReportCreateWithoutSlidesInput>;
  update?: Maybe<ReportUpdateWithoutSlidesDataInput>;
  upsert?: Maybe<ReportUpsertWithoutSlidesInput>;
  connect?: Maybe<ReportWhereUniqueInput>;
}

export interface ReportUpdateWithoutSlidesDataInput {
  title?: Maybe<String>;
  owner?: Maybe<ID_Input>;
  width?: Maybe<Int>;
  height?: Maybe<Int>;
}

export interface ReportUpsertWithoutSlidesInput {
  update: ReportUpdateWithoutSlidesDataInput;
  create: ReportCreateWithoutSlidesInput;
}

export interface TextNodeUpdateManyWithoutSlideInput {
  create?: Maybe<
    TextNodeCreateWithoutSlideInput[] | TextNodeCreateWithoutSlideInput
  >;
  delete?: Maybe<TextNodeWhereUniqueInput[] | TextNodeWhereUniqueInput>;
  connect?: Maybe<TextNodeWhereUniqueInput[] | TextNodeWhereUniqueInput>;
  set?: Maybe<TextNodeWhereUniqueInput[] | TextNodeWhereUniqueInput>;
  disconnect?: Maybe<TextNodeWhereUniqueInput[] | TextNodeWhereUniqueInput>;
  update?: Maybe<
    | TextNodeUpdateWithWhereUniqueWithoutSlideInput[]
    | TextNodeUpdateWithWhereUniqueWithoutSlideInput
  >;
  upsert?: Maybe<
    | TextNodeUpsertWithWhereUniqueWithoutSlideInput[]
    | TextNodeUpsertWithWhereUniqueWithoutSlideInput
  >;
  deleteMany?: Maybe<TextNodeScalarWhereInput[] | TextNodeScalarWhereInput>;
  updateMany?: Maybe<
    | TextNodeUpdateManyWithWhereNestedInput[]
    | TextNodeUpdateManyWithWhereNestedInput
  >;
}

export interface TextNodeUpdateWithWhereUniqueWithoutSlideInput {
  where: TextNodeWhereUniqueInput;
  data: TextNodeUpdateWithoutSlideDataInput;
}

export interface TextNodeUpdateWithoutSlideDataInput {
  fontSize?: Maybe<Int>;
  color?: Maybe<String>;
  textAlign?: Maybe<TextAlign>;
  x?: Maybe<Int>;
  y?: Maybe<Int>;
  width?: Maybe<Int>;
  height?: Maybe<Int>;
  value?: Maybe<String>;
}

export interface TextNodeUpsertWithWhereUniqueWithoutSlideInput {
  where: TextNodeWhereUniqueInput;
  update: TextNodeUpdateWithoutSlideDataInput;
  create: TextNodeCreateWithoutSlideInput;
}

export interface TextNodeScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  fontSize?: Maybe<Int>;
  fontSize_not?: Maybe<Int>;
  fontSize_in?: Maybe<Int[] | Int>;
  fontSize_not_in?: Maybe<Int[] | Int>;
  fontSize_lt?: Maybe<Int>;
  fontSize_lte?: Maybe<Int>;
  fontSize_gt?: Maybe<Int>;
  fontSize_gte?: Maybe<Int>;
  color?: Maybe<String>;
  color_not?: Maybe<String>;
  color_in?: Maybe<String[] | String>;
  color_not_in?: Maybe<String[] | String>;
  color_lt?: Maybe<String>;
  color_lte?: Maybe<String>;
  color_gt?: Maybe<String>;
  color_gte?: Maybe<String>;
  color_contains?: Maybe<String>;
  color_not_contains?: Maybe<String>;
  color_starts_with?: Maybe<String>;
  color_not_starts_with?: Maybe<String>;
  color_ends_with?: Maybe<String>;
  color_not_ends_with?: Maybe<String>;
  textAlign?: Maybe<TextAlign>;
  textAlign_not?: Maybe<TextAlign>;
  textAlign_in?: Maybe<TextAlign[] | TextAlign>;
  textAlign_not_in?: Maybe<TextAlign[] | TextAlign>;
  x?: Maybe<Int>;
  x_not?: Maybe<Int>;
  x_in?: Maybe<Int[] | Int>;
  x_not_in?: Maybe<Int[] | Int>;
  x_lt?: Maybe<Int>;
  x_lte?: Maybe<Int>;
  x_gt?: Maybe<Int>;
  x_gte?: Maybe<Int>;
  y?: Maybe<Int>;
  y_not?: Maybe<Int>;
  y_in?: Maybe<Int[] | Int>;
  y_not_in?: Maybe<Int[] | Int>;
  y_lt?: Maybe<Int>;
  y_lte?: Maybe<Int>;
  y_gt?: Maybe<Int>;
  y_gte?: Maybe<Int>;
  width?: Maybe<Int>;
  width_not?: Maybe<Int>;
  width_in?: Maybe<Int[] | Int>;
  width_not_in?: Maybe<Int[] | Int>;
  width_lt?: Maybe<Int>;
  width_lte?: Maybe<Int>;
  width_gt?: Maybe<Int>;
  width_gte?: Maybe<Int>;
  height?: Maybe<Int>;
  height_not?: Maybe<Int>;
  height_in?: Maybe<Int[] | Int>;
  height_not_in?: Maybe<Int[] | Int>;
  height_lt?: Maybe<Int>;
  height_lte?: Maybe<Int>;
  height_gt?: Maybe<Int>;
  height_gte?: Maybe<Int>;
  value?: Maybe<String>;
  value_not?: Maybe<String>;
  value_in?: Maybe<String[] | String>;
  value_not_in?: Maybe<String[] | String>;
  value_lt?: Maybe<String>;
  value_lte?: Maybe<String>;
  value_gt?: Maybe<String>;
  value_gte?: Maybe<String>;
  value_contains?: Maybe<String>;
  value_not_contains?: Maybe<String>;
  value_starts_with?: Maybe<String>;
  value_not_starts_with?: Maybe<String>;
  value_ends_with?: Maybe<String>;
  value_not_ends_with?: Maybe<String>;
  AND?: Maybe<TextNodeScalarWhereInput[] | TextNodeScalarWhereInput>;
  OR?: Maybe<TextNodeScalarWhereInput[] | TextNodeScalarWhereInput>;
  NOT?: Maybe<TextNodeScalarWhereInput[] | TextNodeScalarWhereInput>;
}

export interface TextNodeUpdateManyWithWhereNestedInput {
  where: TextNodeScalarWhereInput;
  data: TextNodeUpdateManyDataInput;
}

export interface TextNodeUpdateManyDataInput {
  fontSize?: Maybe<Int>;
  color?: Maybe<String>;
  textAlign?: Maybe<TextAlign>;
  x?: Maybe<Int>;
  y?: Maybe<Int>;
  width?: Maybe<Int>;
  height?: Maybe<Int>;
  value?: Maybe<String>;
}

export interface SlideUpsertWithoutChartNodesInput {
  update: SlideUpdateWithoutChartNodesDataInput;
  create: SlideCreateWithoutChartNodesInput;
}

export interface ChartNodeUpdateManyMutationInput {
  x?: Maybe<Int>;
  y?: Maybe<Int>;
  width?: Maybe<Int>;
  height?: Maybe<Int>;
  query?: Maybe<String>;
}

export interface ReportCreateInput {
  id?: Maybe<ID_Input>;
  title: String;
  owner: ID_Input;
  width: Int;
  height: Int;
  slides?: Maybe<SlideCreateManyWithoutReportInput>;
}

export interface SlideCreateManyWithoutReportInput {
  create?: Maybe<
    SlideCreateWithoutReportInput[] | SlideCreateWithoutReportInput
  >;
  connect?: Maybe<SlideWhereUniqueInput[] | SlideWhereUniqueInput>;
}

export interface SlideCreateWithoutReportInput {
  id?: Maybe<ID_Input>;
  textNodes?: Maybe<TextNodeCreateManyWithoutSlideInput>;
  chartNodes?: Maybe<ChartNodeCreateManyWithoutSlideInput>;
}

export interface ChartNodeCreateManyWithoutSlideInput {
  create?: Maybe<
    ChartNodeCreateWithoutSlideInput[] | ChartNodeCreateWithoutSlideInput
  >;
  connect?: Maybe<ChartNodeWhereUniqueInput[] | ChartNodeWhereUniqueInput>;
}

export interface ChartNodeCreateWithoutSlideInput {
  id?: Maybe<ID_Input>;
  x: Int;
  y: Int;
  width: Int;
  height: Int;
  query: String;
}

export interface ReportUpdateInput {
  title?: Maybe<String>;
  owner?: Maybe<ID_Input>;
  width?: Maybe<Int>;
  height?: Maybe<Int>;
  slides?: Maybe<SlideUpdateManyWithoutReportInput>;
}

export interface SlideUpdateManyWithoutReportInput {
  create?: Maybe<
    SlideCreateWithoutReportInput[] | SlideCreateWithoutReportInput
  >;
  delete?: Maybe<SlideWhereUniqueInput[] | SlideWhereUniqueInput>;
  connect?: Maybe<SlideWhereUniqueInput[] | SlideWhereUniqueInput>;
  set?: Maybe<SlideWhereUniqueInput[] | SlideWhereUniqueInput>;
  disconnect?: Maybe<SlideWhereUniqueInput[] | SlideWhereUniqueInput>;
  update?: Maybe<
    | SlideUpdateWithWhereUniqueWithoutReportInput[]
    | SlideUpdateWithWhereUniqueWithoutReportInput
  >;
  upsert?: Maybe<
    | SlideUpsertWithWhereUniqueWithoutReportInput[]
    | SlideUpsertWithWhereUniqueWithoutReportInput
  >;
  deleteMany?: Maybe<SlideScalarWhereInput[] | SlideScalarWhereInput>;
}

export interface SlideUpdateWithWhereUniqueWithoutReportInput {
  where: SlideWhereUniqueInput;
  data: SlideUpdateWithoutReportDataInput;
}

export interface SlideUpdateWithoutReportDataInput {
  textNodes?: Maybe<TextNodeUpdateManyWithoutSlideInput>;
  chartNodes?: Maybe<ChartNodeUpdateManyWithoutSlideInput>;
}

export interface ChartNodeUpdateManyWithoutSlideInput {
  create?: Maybe<
    ChartNodeCreateWithoutSlideInput[] | ChartNodeCreateWithoutSlideInput
  >;
  delete?: Maybe<ChartNodeWhereUniqueInput[] | ChartNodeWhereUniqueInput>;
  connect?: Maybe<ChartNodeWhereUniqueInput[] | ChartNodeWhereUniqueInput>;
  set?: Maybe<ChartNodeWhereUniqueInput[] | ChartNodeWhereUniqueInput>;
  disconnect?: Maybe<ChartNodeWhereUniqueInput[] | ChartNodeWhereUniqueInput>;
  update?: Maybe<
    | ChartNodeUpdateWithWhereUniqueWithoutSlideInput[]
    | ChartNodeUpdateWithWhereUniqueWithoutSlideInput
  >;
  upsert?: Maybe<
    | ChartNodeUpsertWithWhereUniqueWithoutSlideInput[]
    | ChartNodeUpsertWithWhereUniqueWithoutSlideInput
  >;
  deleteMany?: Maybe<ChartNodeScalarWhereInput[] | ChartNodeScalarWhereInput>;
  updateMany?: Maybe<
    | ChartNodeUpdateManyWithWhereNestedInput[]
    | ChartNodeUpdateManyWithWhereNestedInput
  >;
}

export interface ChartNodeUpdateWithWhereUniqueWithoutSlideInput {
  where: ChartNodeWhereUniqueInput;
  data: ChartNodeUpdateWithoutSlideDataInput;
}

export interface ChartNodeUpdateWithoutSlideDataInput {
  x?: Maybe<Int>;
  y?: Maybe<Int>;
  width?: Maybe<Int>;
  height?: Maybe<Int>;
  query?: Maybe<String>;
}

export interface ChartNodeUpsertWithWhereUniqueWithoutSlideInput {
  where: ChartNodeWhereUniqueInput;
  update: ChartNodeUpdateWithoutSlideDataInput;
  create: ChartNodeCreateWithoutSlideInput;
}

export interface ChartNodeScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  x?: Maybe<Int>;
  x_not?: Maybe<Int>;
  x_in?: Maybe<Int[] | Int>;
  x_not_in?: Maybe<Int[] | Int>;
  x_lt?: Maybe<Int>;
  x_lte?: Maybe<Int>;
  x_gt?: Maybe<Int>;
  x_gte?: Maybe<Int>;
  y?: Maybe<Int>;
  y_not?: Maybe<Int>;
  y_in?: Maybe<Int[] | Int>;
  y_not_in?: Maybe<Int[] | Int>;
  y_lt?: Maybe<Int>;
  y_lte?: Maybe<Int>;
  y_gt?: Maybe<Int>;
  y_gte?: Maybe<Int>;
  width?: Maybe<Int>;
  width_not?: Maybe<Int>;
  width_in?: Maybe<Int[] | Int>;
  width_not_in?: Maybe<Int[] | Int>;
  width_lt?: Maybe<Int>;
  width_lte?: Maybe<Int>;
  width_gt?: Maybe<Int>;
  width_gte?: Maybe<Int>;
  height?: Maybe<Int>;
  height_not?: Maybe<Int>;
  height_in?: Maybe<Int[] | Int>;
  height_not_in?: Maybe<Int[] | Int>;
  height_lt?: Maybe<Int>;
  height_lte?: Maybe<Int>;
  height_gt?: Maybe<Int>;
  height_gte?: Maybe<Int>;
  query?: Maybe<String>;
  query_not?: Maybe<String>;
  query_in?: Maybe<String[] | String>;
  query_not_in?: Maybe<String[] | String>;
  query_lt?: Maybe<String>;
  query_lte?: Maybe<String>;
  query_gt?: Maybe<String>;
  query_gte?: Maybe<String>;
  query_contains?: Maybe<String>;
  query_not_contains?: Maybe<String>;
  query_starts_with?: Maybe<String>;
  query_not_starts_with?: Maybe<String>;
  query_ends_with?: Maybe<String>;
  query_not_ends_with?: Maybe<String>;
  AND?: Maybe<ChartNodeScalarWhereInput[] | ChartNodeScalarWhereInput>;
  OR?: Maybe<ChartNodeScalarWhereInput[] | ChartNodeScalarWhereInput>;
  NOT?: Maybe<ChartNodeScalarWhereInput[] | ChartNodeScalarWhereInput>;
}

export interface ChartNodeUpdateManyWithWhereNestedInput {
  where: ChartNodeScalarWhereInput;
  data: ChartNodeUpdateManyDataInput;
}

export interface ChartNodeUpdateManyDataInput {
  x?: Maybe<Int>;
  y?: Maybe<Int>;
  width?: Maybe<Int>;
  height?: Maybe<Int>;
  query?: Maybe<String>;
}

export interface SlideUpsertWithWhereUniqueWithoutReportInput {
  where: SlideWhereUniqueInput;
  update: SlideUpdateWithoutReportDataInput;
  create: SlideCreateWithoutReportInput;
}

export interface SlideScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  AND?: Maybe<SlideScalarWhereInput[] | SlideScalarWhereInput>;
  OR?: Maybe<SlideScalarWhereInput[] | SlideScalarWhereInput>;
  NOT?: Maybe<SlideScalarWhereInput[] | SlideScalarWhereInput>;
}

export interface ReportUpdateManyMutationInput {
  title?: Maybe<String>;
  owner?: Maybe<ID_Input>;
  width?: Maybe<Int>;
  height?: Maybe<Int>;
}

export interface SlideCreateInput {
  report: ReportCreateOneWithoutSlidesInput;
  id?: Maybe<ID_Input>;
  textNodes?: Maybe<TextNodeCreateManyWithoutSlideInput>;
  chartNodes?: Maybe<ChartNodeCreateManyWithoutSlideInput>;
}

export interface SlideUpdateInput {
  report?: Maybe<ReportUpdateOneRequiredWithoutSlidesInput>;
  textNodes?: Maybe<TextNodeUpdateManyWithoutSlideInput>;
  chartNodes?: Maybe<ChartNodeUpdateManyWithoutSlideInput>;
}

export interface TextNodeCreateInput {
  id?: Maybe<ID_Input>;
  slide: SlideCreateOneWithoutTextNodesInput;
  fontSize: Int;
  color: String;
  textAlign: TextAlign;
  x: Int;
  y: Int;
  width: Int;
  height: Int;
  value: String;
}

export interface SlideCreateOneWithoutTextNodesInput {
  create?: Maybe<SlideCreateWithoutTextNodesInput>;
  connect?: Maybe<SlideWhereUniqueInput>;
}

export interface SlideCreateWithoutTextNodesInput {
  report: ReportCreateOneWithoutSlidesInput;
  id?: Maybe<ID_Input>;
  chartNodes?: Maybe<ChartNodeCreateManyWithoutSlideInput>;
}

export interface TextNodeUpdateInput {
  slide?: Maybe<SlideUpdateOneRequiredWithoutTextNodesInput>;
  fontSize?: Maybe<Int>;
  color?: Maybe<String>;
  textAlign?: Maybe<TextAlign>;
  x?: Maybe<Int>;
  y?: Maybe<Int>;
  width?: Maybe<Int>;
  height?: Maybe<Int>;
  value?: Maybe<String>;
}

export interface SlideUpdateOneRequiredWithoutTextNodesInput {
  create?: Maybe<SlideCreateWithoutTextNodesInput>;
  update?: Maybe<SlideUpdateWithoutTextNodesDataInput>;
  upsert?: Maybe<SlideUpsertWithoutTextNodesInput>;
  connect?: Maybe<SlideWhereUniqueInput>;
}

export interface SlideUpdateWithoutTextNodesDataInput {
  report?: Maybe<ReportUpdateOneRequiredWithoutSlidesInput>;
  chartNodes?: Maybe<ChartNodeUpdateManyWithoutSlideInput>;
}

export interface SlideUpsertWithoutTextNodesInput {
  update: SlideUpdateWithoutTextNodesDataInput;
  create: SlideCreateWithoutTextNodesInput;
}

export interface TextNodeUpdateManyMutationInput {
  fontSize?: Maybe<Int>;
  color?: Maybe<String>;
  textAlign?: Maybe<TextAlign>;
  x?: Maybe<Int>;
  y?: Maybe<Int>;
  width?: Maybe<Int>;
  height?: Maybe<Int>;
  value?: Maybe<String>;
}

export interface ChartNodeSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ChartNodeWhereInput>;
  AND?: Maybe<
    ChartNodeSubscriptionWhereInput[] | ChartNodeSubscriptionWhereInput
  >;
  OR?: Maybe<
    ChartNodeSubscriptionWhereInput[] | ChartNodeSubscriptionWhereInput
  >;
  NOT?: Maybe<
    ChartNodeSubscriptionWhereInput[] | ChartNodeSubscriptionWhereInput
  >;
}

export interface ReportSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ReportWhereInput>;
  AND?: Maybe<ReportSubscriptionWhereInput[] | ReportSubscriptionWhereInput>;
  OR?: Maybe<ReportSubscriptionWhereInput[] | ReportSubscriptionWhereInput>;
  NOT?: Maybe<ReportSubscriptionWhereInput[] | ReportSubscriptionWhereInput>;
}

export interface SlideSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<SlideWhereInput>;
  AND?: Maybe<SlideSubscriptionWhereInput[] | SlideSubscriptionWhereInput>;
  OR?: Maybe<SlideSubscriptionWhereInput[] | SlideSubscriptionWhereInput>;
  NOT?: Maybe<SlideSubscriptionWhereInput[] | SlideSubscriptionWhereInput>;
}

export interface TextNodeSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<TextNodeWhereInput>;
  AND?: Maybe<
    TextNodeSubscriptionWhereInput[] | TextNodeSubscriptionWhereInput
  >;
  OR?: Maybe<TextNodeSubscriptionWhereInput[] | TextNodeSubscriptionWhereInput>;
  NOT?: Maybe<
    TextNodeSubscriptionWhereInput[] | TextNodeSubscriptionWhereInput
  >;
}

export interface NodeNode {
  id: ID_Output;
}

export interface ChartNode {
  id: ID_Output;
  x: Int;
  y: Int;
  width: Int;
  height: Int;
  query: String;
}

export interface ChartNodePromise extends Promise<ChartNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  slide: <T = SlidePromise>() => T;
  x: () => Promise<Int>;
  y: () => Promise<Int>;
  width: () => Promise<Int>;
  height: () => Promise<Int>;
  query: () => Promise<String>;
}

export interface ChartNodeSubscription
  extends Promise<AsyncIterator<ChartNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  slide: <T = SlideSubscription>() => T;
  x: () => Promise<AsyncIterator<Int>>;
  y: () => Promise<AsyncIterator<Int>>;
  width: () => Promise<AsyncIterator<Int>>;
  height: () => Promise<AsyncIterator<Int>>;
  query: () => Promise<AsyncIterator<String>>;
}

export interface ChartNodeNullablePromise
  extends Promise<ChartNode | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  slide: <T = SlidePromise>() => T;
  x: () => Promise<Int>;
  y: () => Promise<Int>;
  width: () => Promise<Int>;
  height: () => Promise<Int>;
  query: () => Promise<String>;
}

export interface Slide {
  id: ID_Output;
}

export interface SlidePromise extends Promise<Slide>, Fragmentable {
  report: <T = ReportPromise>() => T;
  id: () => Promise<ID_Output>;
  textNodes: <T = FragmentableArray<TextNode>>(args?: {
    where?: TextNodeWhereInput;
    orderBy?: TextNodeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  chartNodes: <T = FragmentableArray<ChartNode>>(args?: {
    where?: ChartNodeWhereInput;
    orderBy?: ChartNodeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface SlideSubscription
  extends Promise<AsyncIterator<Slide>>,
    Fragmentable {
  report: <T = ReportSubscription>() => T;
  id: () => Promise<AsyncIterator<ID_Output>>;
  textNodes: <T = Promise<AsyncIterator<TextNodeSubscription>>>(args?: {
    where?: TextNodeWhereInput;
    orderBy?: TextNodeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  chartNodes: <T = Promise<AsyncIterator<ChartNodeSubscription>>>(args?: {
    where?: ChartNodeWhereInput;
    orderBy?: ChartNodeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface SlideNullablePromise
  extends Promise<Slide | null>,
    Fragmentable {
  report: <T = ReportPromise>() => T;
  id: () => Promise<ID_Output>;
  textNodes: <T = FragmentableArray<TextNode>>(args?: {
    where?: TextNodeWhereInput;
    orderBy?: TextNodeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  chartNodes: <T = FragmentableArray<ChartNode>>(args?: {
    where?: ChartNodeWhereInput;
    orderBy?: ChartNodeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface Report {
  id: ID_Output;
  title: String;
  owner: ID_Output;
  width: Int;
  height: Int;
}

export interface ReportPromise extends Promise<Report>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  owner: () => Promise<ID_Output>;
  width: () => Promise<Int>;
  height: () => Promise<Int>;
  slides: <T = FragmentableArray<Slide>>(args?: {
    where?: SlideWhereInput;
    orderBy?: SlideOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ReportSubscription
  extends Promise<AsyncIterator<Report>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  owner: () => Promise<AsyncIterator<ID_Output>>;
  width: () => Promise<AsyncIterator<Int>>;
  height: () => Promise<AsyncIterator<Int>>;
  slides: <T = Promise<AsyncIterator<SlideSubscription>>>(args?: {
    where?: SlideWhereInput;
    orderBy?: SlideOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ReportNullablePromise
  extends Promise<Report | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  owner: () => Promise<ID_Output>;
  width: () => Promise<Int>;
  height: () => Promise<Int>;
  slides: <T = FragmentableArray<Slide>>(args?: {
    where?: SlideWhereInput;
    orderBy?: SlideOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface TextNode {
  id: ID_Output;
  fontSize: Int;
  color: String;
  textAlign: TextAlign;
  x: Int;
  y: Int;
  width: Int;
  height: Int;
  value: String;
}

export interface TextNodePromise extends Promise<TextNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  slide: <T = SlidePromise>() => T;
  fontSize: () => Promise<Int>;
  color: () => Promise<String>;
  textAlign: () => Promise<TextAlign>;
  x: () => Promise<Int>;
  y: () => Promise<Int>;
  width: () => Promise<Int>;
  height: () => Promise<Int>;
  value: () => Promise<String>;
}

export interface TextNodeSubscription
  extends Promise<AsyncIterator<TextNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  slide: <T = SlideSubscription>() => T;
  fontSize: () => Promise<AsyncIterator<Int>>;
  color: () => Promise<AsyncIterator<String>>;
  textAlign: () => Promise<AsyncIterator<TextAlign>>;
  x: () => Promise<AsyncIterator<Int>>;
  y: () => Promise<AsyncIterator<Int>>;
  width: () => Promise<AsyncIterator<Int>>;
  height: () => Promise<AsyncIterator<Int>>;
  value: () => Promise<AsyncIterator<String>>;
}

export interface TextNodeNullablePromise
  extends Promise<TextNode | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  slide: <T = SlidePromise>() => T;
  fontSize: () => Promise<Int>;
  color: () => Promise<String>;
  textAlign: () => Promise<TextAlign>;
  x: () => Promise<Int>;
  y: () => Promise<Int>;
  width: () => Promise<Int>;
  height: () => Promise<Int>;
  value: () => Promise<String>;
}

export interface ChartNodeConnection {
  pageInfo: PageInfo;
  edges: ChartNodeEdge[];
}

export interface ChartNodeConnectionPromise
  extends Promise<ChartNodeConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ChartNodeEdge>>() => T;
  aggregate: <T = AggregateChartNodePromise>() => T;
}

export interface ChartNodeConnectionSubscription
  extends Promise<AsyncIterator<ChartNodeConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ChartNodeEdgeSubscription>>>() => T;
  aggregate: <T = AggregateChartNodeSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface ChartNodeEdge {
  node: ChartNode;
  cursor: String;
}

export interface ChartNodeEdgePromise
  extends Promise<ChartNodeEdge>,
    Fragmentable {
  node: <T = ChartNodePromise>() => T;
  cursor: () => Promise<String>;
}

export interface ChartNodeEdgeSubscription
  extends Promise<AsyncIterator<ChartNodeEdge>>,
    Fragmentable {
  node: <T = ChartNodeSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateChartNode {
  count: Int;
}

export interface AggregateChartNodePromise
  extends Promise<AggregateChartNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChartNodeSubscription
  extends Promise<AsyncIterator<AggregateChartNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ReportConnection {
  pageInfo: PageInfo;
  edges: ReportEdge[];
}

export interface ReportConnectionPromise
  extends Promise<ReportConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ReportEdge>>() => T;
  aggregate: <T = AggregateReportPromise>() => T;
}

export interface ReportConnectionSubscription
  extends Promise<AsyncIterator<ReportConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ReportEdgeSubscription>>>() => T;
  aggregate: <T = AggregateReportSubscription>() => T;
}

export interface ReportEdge {
  node: Report;
  cursor: String;
}

export interface ReportEdgePromise extends Promise<ReportEdge>, Fragmentable {
  node: <T = ReportPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ReportEdgeSubscription
  extends Promise<AsyncIterator<ReportEdge>>,
    Fragmentable {
  node: <T = ReportSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateReport {
  count: Int;
}

export interface AggregateReportPromise
  extends Promise<AggregateReport>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateReportSubscription
  extends Promise<AsyncIterator<AggregateReport>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface SlideConnection {
  pageInfo: PageInfo;
  edges: SlideEdge[];
}

export interface SlideConnectionPromise
  extends Promise<SlideConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SlideEdge>>() => T;
  aggregate: <T = AggregateSlidePromise>() => T;
}

export interface SlideConnectionSubscription
  extends Promise<AsyncIterator<SlideConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SlideEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSlideSubscription>() => T;
}

export interface SlideEdge {
  node: Slide;
  cursor: String;
}

export interface SlideEdgePromise extends Promise<SlideEdge>, Fragmentable {
  node: <T = SlidePromise>() => T;
  cursor: () => Promise<String>;
}

export interface SlideEdgeSubscription
  extends Promise<AsyncIterator<SlideEdge>>,
    Fragmentable {
  node: <T = SlideSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateSlide {
  count: Int;
}

export interface AggregateSlidePromise
  extends Promise<AggregateSlide>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSlideSubscription
  extends Promise<AsyncIterator<AggregateSlide>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface TextNodeConnection {
  pageInfo: PageInfo;
  edges: TextNodeEdge[];
}

export interface TextNodeConnectionPromise
  extends Promise<TextNodeConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<TextNodeEdge>>() => T;
  aggregate: <T = AggregateTextNodePromise>() => T;
}

export interface TextNodeConnectionSubscription
  extends Promise<AsyncIterator<TextNodeConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<TextNodeEdgeSubscription>>>() => T;
  aggregate: <T = AggregateTextNodeSubscription>() => T;
}

export interface TextNodeEdge {
  node: TextNode;
  cursor: String;
}

export interface TextNodeEdgePromise
  extends Promise<TextNodeEdge>,
    Fragmentable {
  node: <T = TextNodePromise>() => T;
  cursor: () => Promise<String>;
}

export interface TextNodeEdgeSubscription
  extends Promise<AsyncIterator<TextNodeEdge>>,
    Fragmentable {
  node: <T = TextNodeSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateTextNode {
  count: Int;
}

export interface AggregateTextNodePromise
  extends Promise<AggregateTextNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTextNodeSubscription
  extends Promise<AsyncIterator<AggregateTextNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface ChartNodeSubscriptionPayload {
  mutation: MutationType;
  node: ChartNode;
  updatedFields: String[];
  previousValues: ChartNodePreviousValues;
}

export interface ChartNodeSubscriptionPayloadPromise
  extends Promise<ChartNodeSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ChartNodePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ChartNodePreviousValuesPromise>() => T;
}

export interface ChartNodeSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ChartNodeSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ChartNodeSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ChartNodePreviousValuesSubscription>() => T;
}

export interface ChartNodePreviousValues {
  id: ID_Output;
  x: Int;
  y: Int;
  width: Int;
  height: Int;
  query: String;
}

export interface ChartNodePreviousValuesPromise
  extends Promise<ChartNodePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  x: () => Promise<Int>;
  y: () => Promise<Int>;
  width: () => Promise<Int>;
  height: () => Promise<Int>;
  query: () => Promise<String>;
}

export interface ChartNodePreviousValuesSubscription
  extends Promise<AsyncIterator<ChartNodePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  x: () => Promise<AsyncIterator<Int>>;
  y: () => Promise<AsyncIterator<Int>>;
  width: () => Promise<AsyncIterator<Int>>;
  height: () => Promise<AsyncIterator<Int>>;
  query: () => Promise<AsyncIterator<String>>;
}

export interface ReportSubscriptionPayload {
  mutation: MutationType;
  node: Report;
  updatedFields: String[];
  previousValues: ReportPreviousValues;
}

export interface ReportSubscriptionPayloadPromise
  extends Promise<ReportSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ReportPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ReportPreviousValuesPromise>() => T;
}

export interface ReportSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ReportSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ReportSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ReportPreviousValuesSubscription>() => T;
}

export interface ReportPreviousValues {
  id: ID_Output;
  title: String;
  owner: ID_Output;
  width: Int;
  height: Int;
}

export interface ReportPreviousValuesPromise
  extends Promise<ReportPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  owner: () => Promise<ID_Output>;
  width: () => Promise<Int>;
  height: () => Promise<Int>;
}

export interface ReportPreviousValuesSubscription
  extends Promise<AsyncIterator<ReportPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  owner: () => Promise<AsyncIterator<ID_Output>>;
  width: () => Promise<AsyncIterator<Int>>;
  height: () => Promise<AsyncIterator<Int>>;
}

export interface SlideSubscriptionPayload {
  mutation: MutationType;
  node: Slide;
  updatedFields: String[];
  previousValues: SlidePreviousValues;
}

export interface SlideSubscriptionPayloadPromise
  extends Promise<SlideSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SlidePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SlidePreviousValuesPromise>() => T;
}

export interface SlideSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SlideSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SlideSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SlidePreviousValuesSubscription>() => T;
}

export interface SlidePreviousValues {
  id: ID_Output;
}

export interface SlidePreviousValuesPromise
  extends Promise<SlidePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
}

export interface SlidePreviousValuesSubscription
  extends Promise<AsyncIterator<SlidePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
}

export interface TextNodeSubscriptionPayload {
  mutation: MutationType;
  node: TextNode;
  updatedFields: String[];
  previousValues: TextNodePreviousValues;
}

export interface TextNodeSubscriptionPayloadPromise
  extends Promise<TextNodeSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = TextNodePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TextNodePreviousValuesPromise>() => T;
}

export interface TextNodeSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TextNodeSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TextNodeSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TextNodePreviousValuesSubscription>() => T;
}

export interface TextNodePreviousValues {
  id: ID_Output;
  fontSize: Int;
  color: String;
  textAlign: TextAlign;
  x: Int;
  y: Int;
  width: Int;
  height: Int;
  value: String;
}

export interface TextNodePreviousValuesPromise
  extends Promise<TextNodePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  fontSize: () => Promise<Int>;
  color: () => Promise<String>;
  textAlign: () => Promise<TextAlign>;
  x: () => Promise<Int>;
  y: () => Promise<Int>;
  width: () => Promise<Int>;
  height: () => Promise<Int>;
  value: () => Promise<String>;
}

export interface TextNodePreviousValuesSubscription
  extends Promise<AsyncIterator<TextNodePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  fontSize: () => Promise<AsyncIterator<Int>>;
  color: () => Promise<AsyncIterator<String>>;
  textAlign: () => Promise<AsyncIterator<TextAlign>>;
  x: () => Promise<AsyncIterator<Int>>;
  y: () => Promise<AsyncIterator<Int>>;
  width: () => Promise<AsyncIterator<Int>>;
  height: () => Promise<AsyncIterator<Int>>;
  value: () => Promise<AsyncIterator<String>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Report",
    embedded: false
  },
  {
    name: "Slide",
    embedded: false
  },
  {
    name: "TextNode",
    embedded: false
  },
  {
    name: "ChartNode",
    embedded: false
  },
  {
    name: "TextAlign",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `http://localhost:4466`
});
export const prisma = new Prisma();
