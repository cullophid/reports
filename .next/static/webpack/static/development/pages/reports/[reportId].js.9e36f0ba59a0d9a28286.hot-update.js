webpackHotUpdate("static/development/pages/reports/[reportId].js",{

/***/ "./client/Report/Report.tsx":
/*!**********************************!*\
  !*** ./client/Report/Report.tsx ***!
  \**********************************/
/*! exports provided: ReportPage */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ReportPage", function() { return ReportPage; });
/* harmony import */ var _babel_runtime_corejs2_helpers_esm_taggedTemplateLiteral__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral */ "./node_modules/@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral.js");
/* harmony import */ var _babel_runtime_corejs2_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime-corejs2/helpers/esm/extends */ "./node_modules/@babel/runtime-corejs2/helpers/esm/extends.js");
/* harmony import */ var _babel_runtime_corejs2_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime-corejs2/helpers/esm/toConsumableArray */ "./node_modules/@babel/runtime-corejs2/helpers/esm/toConsumableArray.js");
/* harmony import */ var _babel_runtime_corejs2_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime-corejs2/helpers/esm/slicedToArray */ "./node_modules/@babel/runtime-corejs2/helpers/esm/slicedToArray.js");
/* harmony import */ var _babel_runtime_corejs2_core_js_set__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @babel/runtime-corejs2/core-js/set */ "./node_modules/@babel/runtime-corejs2/core-js/set.js");
/* harmony import */ var _babel_runtime_corejs2_core_js_set__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_corejs2_core_js_set__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _babel_runtime_corejs2_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @babel/runtime-corejs2/helpers/esm/objectSpread */ "./node_modules/@babel/runtime-corejs2/helpers/esm/objectSpread.js");
/* harmony import */ var _babel_runtime_corejs2_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @babel/runtime-corejs2/helpers/esm/objectWithoutProperties */ "./node_modules/@babel/runtime-corejs2/helpers/esm/objectWithoutProperties.js");
/* harmony import */ var _emotion_styled_base__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @emotion/styled-base */ "./node_modules/@emotion/styled-base/dist/styled-base.browser.esm.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var _emotion_core__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @emotion/core */ "./node_modules/@emotion/core/dist/core.browser.esm.js");
/* harmony import */ var _codegen_graphql__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../codegen/graphql */ "./client/codegen/graphql.ts");
/* harmony import */ var _components_ErrorBox__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../components/ErrorBox */ "./client/components/ErrorBox.tsx");
/* harmony import */ var _components_Crumbs__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../components/Crumbs */ "./client/components/Crumbs.tsx");
/* harmony import */ var _components_Header__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../components/Header */ "./client/components/Header.tsx");
/* harmony import */ var _components_Icon__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../components/Icon */ "./client/components/Icon.tsx");
/* harmony import */ var _components_Button__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../components/Button */ "./client/components/Button.tsx");
/* harmony import */ var _hooks_drag__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../hooks/drag */ "./client/hooks/drag.ts");
/* harmony import */ var _theme__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../theme */ "./client/theme.ts");
/* harmony import */ var cuid__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! cuid */ "./node_modules/cuid/index.js");
/* harmony import */ var cuid__WEBPACK_IMPORTED_MODULE_18___default = /*#__PURE__*/__webpack_require__.n(cuid__WEBPACK_IMPORTED_MODULE_18__);








var _jsxFileName = "/Users/andreasmoller/code/reports/client/Report/Report.tsx";

var __jsx = react__WEBPACK_IMPORTED_MODULE_8___default.a.createElement;


function _templateObject() {
  var data = Object(_babel_runtime_corejs2_helpers_esm_taggedTemplateLiteral__WEBPACK_IMPORTED_MODULE_0__["default"])(["\n  from {\n    opacity:0;\n  }\n  to {\n    opacity:1;\n  }\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}













var removeTypename = function removeTypename(report) {
  var __typename = report.__typename,
      slides = report.slides,
      reportData = Object(_babel_runtime_corejs2_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_6__["default"])(report, ["__typename", "slides"]);

  return Object(_babel_runtime_corejs2_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_5__["default"])({}, reportData, {
    slides: slides.map(function (_ref2) {
      var __typename = _ref2.__typename,
          charts = _ref2.charts,
          slideData = Object(_babel_runtime_corejs2_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_6__["default"])(_ref2, ["__typename", "charts"]);

      return Object(_babel_runtime_corejs2_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_5__["default"])({}, slideData, {
        charts: charts.map(function (_ref3) {
          var __typename = _ref3.__typename,
              chartData = Object(_babel_runtime_corejs2_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_6__["default"])(_ref3, ["__typename"]);

          return chartData;
        })
      });
    })
  });
};

var getModifiers = function getModifiers(e) {
  return new _babel_runtime_corejs2_core_js_set__WEBPACK_IMPORTED_MODULE_4___default.a([e.nativeEvent.metaKey && "meta", e.nativeEvent.ctrlKey && "ctrl", e.nativeEvent.altKey && "alt", e.nativeEvent.shiftKey && "shift"].filter(Boolean));
};

var ReportPage = function ReportPage(props) {
  var _useState = Object(react__WEBPACK_IMPORTED_MODULE_8__["useState"])(1),
      scale = _useState[0],
      setScale = _useState[1];

  var _useState2 = Object(react__WEBPACK_IMPORTED_MODULE_8__["useState"])("select"),
      tool = _useState2[0],
      setTool = _useState2[1];

  var _useState3 = Object(react__WEBPACK_IMPORTED_MODULE_8__["useState"])([]),
      selection = _useState3[0],
      setSelection = _useState3[1];

  var _useState4 = Object(react__WEBPACK_IMPORTED_MODULE_8__["useState"])([]),
      undoHistory = _useState4[0],
      setUndoHistory = _useState4[1];

  var reportQuery = Object(_codegen_graphql__WEBPACK_IMPORTED_MODULE_10__["useReportGetQuery"])({
    variables: {
      id: props.id
    },
    onCompleted: function onCompleted(_ref4) {
      var report = _ref4.report;
      setScale(window.innerWidth * 0.8 / report.width);
    }
  });

  var _useReportUpdateMutat = Object(_codegen_graphql__WEBPACK_IMPORTED_MODULE_10__["useReportUpdateMutation"])(),
      _useReportUpdateMutat2 = Object(_babel_runtime_corejs2_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_3__["default"])(_useReportUpdateMutat, 2),
      _updateReport = _useReportUpdateMutat2[0],
      updateReportQuery = _useReportUpdateMutat2[1];

  var updateReport = function updateReport(report) {
    var isUndo = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

    if (!isUndo) {
      setUndoHistory([].concat(Object(_babel_runtime_corejs2_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_2__["default"])(undoHistory), [report]));
    }

    reportQuery.client.writeQuery({
      query: _codegen_graphql__WEBPACK_IMPORTED_MODULE_10__["ReportGetDocument"],
      variables: {
        id: report.id
      },
      data: {
        report: report
      }
    });
    return _updateReport({
      variables: {
        report: removeTypename(report)
      }
    });
  };

  var report = reportQuery.data && reportQuery.data.report;
  Object(react__WEBPACK_IMPORTED_MODULE_8__["useEffect"])(function () {
    var handler = function handler() {
      if (report) {
        setScale(window.innerWidth * 0.8 / report.width);
      }
    };

    window.addEventListener("resize", handler);
    return function () {
      return window.removeEventListener("resize", handler);
    };
  }, [report]);
  var selectedSlide = report && (report.slides.find(function (s) {
    return s.id === props.slide;
  }) || report.slides[0]);

  var getDragBox = function getDragBox(pos, origin) {
    return {
      x: Math.min(pos.x, origin.x) / scale,
      y: Math.min(pos.y, origin.y) / scale,
      width: Math.abs(pos.x - origin.x) / scale,
      height: Math.abs(pos.y - origin.y) / scale
    };
  };

  var _useMouseDrag = Object(_hooks_drag__WEBPACK_IMPORTED_MODULE_16__["useMouseDrag"])({
    onDragEnd: function onDragEnd(pos, origin) {
      var box = getDragBox(pos, origin);

      switch (tool) {
        case "insert_chart":
          {
            var newChart = {
              id: cuid__WEBPACK_IMPORTED_MODULE_18___default()(),
              x: Math.round(box.x),
              y: Math.round(box.y),
              width: Math.round(box.width),
              height: Math.round(box.height),
              __typename: "Chart"
            };

            var newReport = Object(_babel_runtime_corejs2_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_5__["default"])({}, report, {
              slides: report.slides.map(function (slide) {
                if (slide.id === selectedSlide.id) {
                  return Object(_babel_runtime_corejs2_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_5__["default"])({}, slide, {
                    charts: [].concat(Object(_babel_runtime_corejs2_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_2__["default"])(slide.charts), [newChart])
                  });
                } else {
                  return slide;
                }
              })
            });

            updateReport(newReport);
            setTool("select");
            setSelection([newChart]);
          }
      }
    }
  }),
      dragHandlers = _useMouseDrag.dragHandlers,
      dragPos = _useMouseDrag.dragPos,
      dragOrigin = _useMouseDrag.dragOrigin,
      isDragging = _useMouseDrag.isDragging,
      parentRef = _useMouseDrag.parentRef;

  console.log({
    undoHistory: undoHistory
  });
  return Object(_emotion_core__WEBPACK_IMPORTED_MODULE_9__["jsx"])(Layout, {
    tabIndex: -1,
    onKeyDown: function onKeyDown(e) {
      var modifiers = getModifiers(e);

      switch (e.key) {
        case "Escape":
          setTool("select");

          if (tool === "select") {
            setSelection([]);
          }

          return e.preventDefault();

        case "c":
          if (modifiers.size === 0) {
            setTool("insert_chart");
            return e.preventDefault();
          }

        case "i":
          if (modifiers.size === 0) {
            setTool("insert_image");
            return e.preventDefault();
          }

        case "t":
          if (modifiers.size === 0) {
            setTool("insert_text");
            return e.preventDefault();
          }

        case "Backspace":
          {
            updateReport(Object(_babel_runtime_corejs2_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_5__["default"])({}, report, {
              slides: report.slides.map(function (slide) {
                return Object(_babel_runtime_corejs2_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_5__["default"])({}, slide, {
                  charts: slide.charts.filter(function (chart) {
                    return selection.some(function (selection) {
                      return selection.id === chart.id;
                    }) === false;
                  })
                });
              })
            }));
          }

        case "z":
          if (modifiers.has("meta") && undoHistory.length > 1) {
            var newUndoHistory = undoHistory.slice(0, undoHistory.length - 1);
            updateReport(newUndoHistory[newUndoHistory.length - 1], true);
            setUndoHistory(newUndoHistory);
          }

      }
    },
    __source: {
      fileName: _jsxFileName,
      lineNumber: 151
    },
    __self: this
  }, (reportQuery.loading || updateReportQuery.loading) && Object(_emotion_core__WEBPACK_IMPORTED_MODULE_9__["jsx"])(LoadingIndicator, {
    __source: {
      fileName: _jsxFileName,
      lineNumber: 193
    },
    __self: this
  }), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_9__["jsx"])(_components_Header__WEBPACK_IMPORTED_MODULE_13__["Header"], {
    __source: {
      fileName: _jsxFileName,
      lineNumber: 194
    },
    __self: this
  }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_9__["jsx"])(_components_Header__WEBPACK_IMPORTED_MODULE_13__["HeaderSection"], {
    __source: {
      fileName: _jsxFileName,
      lineNumber: 195
    },
    __self: this
  }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_9__["jsx"])(_components_Crumbs__WEBPACK_IMPORTED_MODULE_12__["Crumbs"], {
    __source: {
      fileName: _jsxFileName,
      lineNumber: 196
    },
    __self: this
  }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_9__["jsx"])(_components_Crumbs__WEBPACK_IMPORTED_MODULE_12__["CrumbLink"], {
    href: "/",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 197
    },
    __self: this
  }, "Home"), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_9__["jsx"])(_components_Crumbs__WEBPACK_IMPORTED_MODULE_12__["CrumbLink"], {
    href: "/",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 198
    },
    __self: this
  }, "Reports"), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_9__["jsx"])(_components_Crumbs__WEBPACK_IMPORTED_MODULE_12__["CrumbTitle"], {
    __source: {
      fileName: _jsxFileName,
      lineNumber: 199
    },
    __self: this
  }, report ? report.title : "...")), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_9__["jsx"])(NewElements, {
    __source: {
      fileName: _jsxFileName,
      lineNumber: 201
    },
    __self: this
  }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_9__["jsx"])(_components_Button__WEBPACK_IMPORTED_MODULE_15__["FlatButton"], {
    name: "insert_chart",
    onClick: function onClick() {
      return setTool("insert_chart");
    },
    active: tool === "insert_chart",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 202
    },
    __self: this
  }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_9__["jsx"])(_components_Icon__WEBPACK_IMPORTED_MODULE_14__["Icon"], {
    icon: "insert_chart",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 203
    },
    __self: this
  })), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_9__["jsx"])(_components_Button__WEBPACK_IMPORTED_MODULE_15__["FlatButton"], {
    name: "insert_image",
    onClick: function onClick() {
      return setTool("insert_image");
    },
    active: tool === "insert_image",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 205
    },
    __self: this
  }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_9__["jsx"])(_components_Icon__WEBPACK_IMPORTED_MODULE_14__["Icon"], {
    icon: "insert_photo",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 205
    },
    __self: this
  })), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_9__["jsx"])(_components_Button__WEBPACK_IMPORTED_MODULE_15__["FlatButton"], {
    name: "insert_text",
    onClick: function onClick() {
      return setTool("insert_text");
    },
    active: tool === "insert_text",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 206
    },
    __self: this
  }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_9__["jsx"])(_components_Icon__WEBPACK_IMPORTED_MODULE_14__["Icon"], {
    icon: "insert_text",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 206
    },
    __self: this
  }))))), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_9__["jsx"])("div", {
    style: {
      position: "absolute",
      bottom: 16,
      right: 16
    },
    __source: {
      fileName: _jsxFileName,
      lineNumber: 210
    },
    __self: this
  }, scale), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_9__["jsx"])(Stage, {
    tool: tool,
    scale: scale,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 211
    },
    __self: this
  }, selectedSlide && Object(_emotion_core__WEBPACK_IMPORTED_MODULE_9__["jsx"])(Slide, Object(_babel_runtime_corejs2_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__["default"])({
    ref: parentRef
  }, dragHandlers, {
    width: report.width,
    height: report.height,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 215
    },
    __self: this
  }), ["insert_chart", "insert_image", "insert_text"].includes(tool) && isDragging && Object(_emotion_core__WEBPACK_IMPORTED_MODULE_9__["jsx"])(DragBox, Object(_babel_runtime_corejs2_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__["default"])({}, getDragBox(dragPos, dragOrigin), {
    __source: {
      fileName: _jsxFileName,
      lineNumber: 217
    },
    __self: this
  })), selectedSlide.charts.map(function (chart) {
    return Object(_emotion_core__WEBPACK_IMPORTED_MODULE_9__["jsx"])(Chart, Object(_babel_runtime_corejs2_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__["default"])({
      key: chart.id,
      selected: selection.some(function (s) {
        return s.id === chart.id;
      })
    }, chart, {
      onClick: function onClick(e) {
        if (tool === "select") {
          setSelection(e.nativeEvent.shiftKey ? [].concat(Object(_babel_runtime_corejs2_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_2__["default"])(selection), [chart]) : [chart]);
        }
      },
      __source: {
        fileName: _jsxFileName,
        lineNumber: 222
      },
      __self: this
    }));
  })), report && !selectedSlide && Object(_emotion_core__WEBPACK_IMPORTED_MODULE_9__["jsx"])(Center, {
    __source: {
      fileName: _jsxFileName,
      lineNumber: 232
    },
    __self: this
  }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_9__["jsx"])(_components_Button__WEBPACK_IMPORTED_MODULE_15__["Button"], {
    name: "create slide",
    onClick: function onClick() {
      updateReport(Object(_babel_runtime_corejs2_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_5__["default"])({}, report, {
        slides: [].concat(Object(_babel_runtime_corejs2_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_2__["default"])(report.slides), [{
          id: cuid__WEBPACK_IMPORTED_MODULE_18___default()(),
          charts: []
        }])
      }));
    },
    __source: {
      fileName: _jsxFileName,
      lineNumber: 233
    },
    __self: this
  }, "Create You first Slide")), reportQuery.error && Object(_emotion_core__WEBPACK_IMPORTED_MODULE_9__["jsx"])(_components_ErrorBox__WEBPACK_IMPORTED_MODULE_11__["ErrorBox"], {
    error: reportQuery.error,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 246
    },
    __self: this
  })));
};

var Chart = Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_7__["default"])("div", {
  target: "e1nne1bm0",
  label: "Chart"
})("position:absolute;left:", function (p) {
  return p.x;
}, "px;top:", function (p) {
  return p.y;
}, "px;width:", function (p) {
  return p.width;
}, "px;height:", function (p) {
  return p.height;
}, "px;background:#f0f0f0;border:1px solid #dedede;", function (p) {
  return p.selected &&
  /*#__PURE__*/

  /*#__PURE__*/
  Object(_emotion_core__WEBPACK_IMPORTED_MODULE_9__["css"])("border:1px dashed ", _theme__WEBPACK_IMPORTED_MODULE_17__["colors"].primary, ";label:Chart;" + ( false ? undefined : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"), "label:Chart;");
}, ";" + ( false ? undefined : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));

var Center = Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_7__["default"])("div", {
  target: "e1nne1bm1",
  label: "Center"
})( false ? undefined : {
  name: "ieltvz",
  styles: "height:100%;display:grid;place-content:center center;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"
});

var DragBox = Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_7__["default"])("div", {
  target: "e1nne1bm2",
  label: "DragBox"
})("position:absolute;width:", function (p) {
  return p.width;
}, "px;height:", function (p) {
  return p.height;
}, "px;left:", function (p) {
  return p.x;
}, "px;top:", function (p) {
  return p.y;
}, "px;border:2px dashed ", _theme__WEBPACK_IMPORTED_MODULE_17__["colors"].primary, ";" + ( false ? undefined : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));

var Slide = Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_7__["default"])("section", {
  target: "e1nne1bm3",
  label: "Slide"
})("position:relative;background:white;box-shadow:0 1px 4px rgba(0,0,0,0.4);width:", function (p) {
  return p.width;
}, "px;height:", function (p) {
  return p.height;
}, "px;" + ( false ? undefined : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));

var NewElements = Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_7__["default"])("div", {
  target: "e1nne1bm4",
  label: "NewElements"
})( false ? undefined : {
  name: "ecvamz",
  styles: "display:grid;grid-auto-flow:column;grid-gap:4px;place-content:center start;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"
});

var Layout = Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_7__["default"])("div", {
  target: "e1nne1bm5",
  label: "Layout"
})( false ? undefined : {
  name: "1dsk5u3",
  styles: "display:grid;height:100%;grid-gap:32px;background:#f5f5f5;grid-template-rows:auto 1fr;place-content:start stretch;overflow:hidden;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"
});

var _ref =  false ? undefined : {
  name: "gcwr8i-Stage",
  styles: "cursor:crosshair;label:Stage;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"
};

var Stage = Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_7__["default"])("main", {
  target: "e1nne1bm6",
  label: "Stage"
})("display:grid;width:100%;place-content:center center;overflow:hidden;", function (p) {
  switch (p.tool) {
    case "insert_chart":
    case "insert_image":
    case "insert_text":
      return (
        /*#__PURE__*/
        _ref
      );
  }
}, " & > *{transform:scale(", function (p) {
  return p.scale;
}, ");transform-origin:50% 50%;}" + ( false ? undefined : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));

var LoadingIndicator = function LoadingIndicator() {
  return Object(_emotion_core__WEBPACK_IMPORTED_MODULE_9__["jsx"])(LoadingWrapper, {
    __source: {
      fileName: _jsxFileName,
      lineNumber: 337
    },
    __self: this
  }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_9__["jsx"])(LoadingDot, {
    delay: 0,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 338
    },
    __self: this
  }, "."), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_9__["jsx"])(LoadingDot, {
    delay: 200,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 339
    },
    __self: this
  }, "."), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_9__["jsx"])(LoadingDot, {
    delay: 400,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 340
    },
    __self: this
  }, "."));
};

var jumpAnimation = Object(_emotion_core__WEBPACK_IMPORTED_MODULE_9__["keyframes"])(_templateObject());

var LoadingWrapper = Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_7__["default"])("div", {
  target: "e1nne1bm7",
  label: "LoadingWrapper"
})( false ? undefined : {
  name: "qabk88",
  styles: "position:absolute;top:0px;right:32px;font-size:2.5rem;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"
});

var LoadingDot = Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_7__["default"])("span", {
  target: "e1nne1bm8",
  label: "LoadingDot"
})("animation:", jumpAnimation, " 1s ease infinite;animation-delay:", function (p) {
  return p.delay;
}, "ms;" + ( false ? undefined : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));

/***/ })

})
//# sourceMappingURL=[reportId].js.9e36f0ba59a0d9a28286.hot-update.js.map