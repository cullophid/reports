webpackHotUpdate("static/development/pages/reports/[reportId].js",{

/***/ "./client/Report/Report.tsx":
/*!**********************************!*\
  !*** ./client/Report/Report.tsx ***!
  \**********************************/
/*! exports provided: ReportPage */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ReportPage", function() { return ReportPage; });
/* harmony import */ var _babel_runtime_corejs2_helpers_esm_taggedTemplateLiteral__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral */ "./node_modules/@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral.js");
/* harmony import */ var _babel_runtime_corejs2_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime-corejs2/helpers/esm/extends */ "./node_modules/@babel/runtime-corejs2/helpers/esm/extends.js");
/* harmony import */ var _babel_runtime_corejs2_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime-corejs2/helpers/esm/toConsumableArray */ "./node_modules/@babel/runtime-corejs2/helpers/esm/toConsumableArray.js");
/* harmony import */ var _babel_runtime_corejs2_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime-corejs2/helpers/esm/slicedToArray */ "./node_modules/@babel/runtime-corejs2/helpers/esm/slicedToArray.js");
/* harmony import */ var _babel_runtime_corejs2_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @babel/runtime-corejs2/helpers/esm/objectSpread */ "./node_modules/@babel/runtime-corejs2/helpers/esm/objectSpread.js");
/* harmony import */ var _babel_runtime_corejs2_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @babel/runtime-corejs2/helpers/esm/objectWithoutProperties */ "./node_modules/@babel/runtime-corejs2/helpers/esm/objectWithoutProperties.js");
/* harmony import */ var _emotion_styled_base__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @emotion/styled-base */ "./node_modules/@emotion/styled-base/dist/styled-base.browser.esm.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var _emotion_core__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @emotion/core */ "./node_modules/@emotion/core/dist/core.browser.esm.js");
/* harmony import */ var _codegen_graphql__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../codegen/graphql */ "./client/codegen/graphql.ts");
/* harmony import */ var _components_ErrorBox__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../components/ErrorBox */ "./client/components/ErrorBox.tsx");
/* harmony import */ var _components_Crumbs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../components/Crumbs */ "./client/components/Crumbs.tsx");
/* harmony import */ var _components_Header__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../components/Header */ "./client/components/Header.tsx");
/* harmony import */ var _components_Icon__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../components/Icon */ "./client/components/Icon.tsx");
/* harmony import */ var _components_Button__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../components/Button */ "./client/components/Button.tsx");
/* harmony import */ var _hooks_drag__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../hooks/drag */ "./client/hooks/drag.ts");
/* harmony import */ var _theme__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../theme */ "./client/theme.ts");
/* harmony import */ var cuid__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! cuid */ "./node_modules/cuid/index.js");
/* harmony import */ var cuid__WEBPACK_IMPORTED_MODULE_17___default = /*#__PURE__*/__webpack_require__.n(cuid__WEBPACK_IMPORTED_MODULE_17__);
/* harmony import */ var react_draggable__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! react-draggable */ "./node_modules/react-draggable/web/react-draggable.min.js");
/* harmony import */ var react_draggable__WEBPACK_IMPORTED_MODULE_18___default = /*#__PURE__*/__webpack_require__.n(react_draggable__WEBPACK_IMPORTED_MODULE_18__);







var _jsxFileName = "/Users/andreasmoller/code/reports/client/Report/Report.tsx";

var __jsx = react__WEBPACK_IMPORTED_MODULE_7___default.a.createElement;


function _templateObject() {
  var data = Object(_babel_runtime_corejs2_helpers_esm_taggedTemplateLiteral__WEBPACK_IMPORTED_MODULE_0__["default"])(["\n  from {\n    opacity:0;\n  }\n  to {\n    opacity:1;\n  }\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}














var removeTypename = function removeTypename(report) {
  var __typename = report.__typename,
      slides = report.slides,
      reportData = Object(_babel_runtime_corejs2_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_5__["default"])(report, ["__typename", "slides"]);

  return Object(_babel_runtime_corejs2_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_4__["default"])({}, reportData, {
    slides: slides.map(function (_ref2) {
      var __typename = _ref2.__typename,
          charts = _ref2.charts,
          slideData = Object(_babel_runtime_corejs2_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_5__["default"])(_ref2, ["__typename", "charts"]);

      return Object(_babel_runtime_corejs2_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_4__["default"])({}, slideData, {
        charts: charts.map(function (_ref3) {
          var __typename = _ref3.__typename,
              chartData = Object(_babel_runtime_corejs2_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_5__["default"])(_ref3, ["__typename"]);

          return chartData;
        })
      });
    })
  });
};

var getModifiers = function getModifiers(e) {
  return [e.nativeEvent.metaKey && "meta", e.nativeEvent.ctrlKey && "ctrl", e.nativeEvent.altKey && "alt", e.nativeEvent.shiftKey && "shift"].filter(Boolean);
};

var ReportPage = function ReportPage(props) {
  var _useState = Object(react__WEBPACK_IMPORTED_MODULE_7__["useState"])(1),
      scale = _useState[0],
      setScale = _useState[1];

  var _useState2 = Object(react__WEBPACK_IMPORTED_MODULE_7__["useState"])("select"),
      tool = _useState2[0],
      setTool = _useState2[1];

  var _useState3 = Object(react__WEBPACK_IMPORTED_MODULE_7__["useState"])([]),
      selection = _useState3[0],
      setSelection = _useState3[1];

  var reportQuery = Object(_codegen_graphql__WEBPACK_IMPORTED_MODULE_9__["useReportGetQuery"])({
    variables: {
      id: props.id
    },
    onCompleted: function onCompleted(_ref4) {
      var report = _ref4.report;
      setScale(window.innerWidth * 0.8 / report.width);
    }
  });

  var _useReportUpdateMutat = Object(_codegen_graphql__WEBPACK_IMPORTED_MODULE_9__["useReportUpdateMutation"])(),
      _useReportUpdateMutat2 = Object(_babel_runtime_corejs2_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_3__["default"])(_useReportUpdateMutat, 2),
      _updateReport = _useReportUpdateMutat2[0],
      updateReportQuery = _useReportUpdateMutat2[1];

  var updateReport = function updateReport(report) {
    reportQuery.client.writeQuery({
      query: _codegen_graphql__WEBPACK_IMPORTED_MODULE_9__["ReportGetDocument"],
      variables: {
        id: report.id
      },
      data: {
        report: report
      }
    });
    return _updateReport({
      variables: {
        report: removeTypename(report)
      }
    });
  };

  var report = reportQuery.data && reportQuery.data.report;
  Object(react__WEBPACK_IMPORTED_MODULE_7__["useEffect"])(function () {
    var handler = function handler() {
      if (report) {
        setScale(window.innerWidth * 0.8 / report.width);
      }
    };

    window.addEventListener("resize", handler);
    return function () {
      return window.removeEventListener("resize", handler);
    };
  }, [report]);
  var selectedSlide = report && (report.slides.find(function (s) {
    return s.id === props.slide;
  }) || report.slides[0]);

  var getDragBox = function getDragBox(pos, origin) {
    return {
      x: Math.min(pos.x, origin.x) / scale,
      y: Math.min(pos.y, origin.y) / scale,
      width: Math.abs(pos.x - origin.x) / scale,
      height: Math.abs(pos.y - origin.y) / scale
    };
  };

  var _useMouseDrag = Object(_hooks_drag__WEBPACK_IMPORTED_MODULE_15__["useMouseDrag"])({
    onDragEnd: function onDragEnd(pos, origin) {
      var box = getDragBox(pos, origin);

      switch (tool) {
        case "insert_chart":
          {
            var newChart = {
              id: cuid__WEBPACK_IMPORTED_MODULE_17___default()(),
              x: Math.round(box.x),
              y: Math.round(box.y),
              width: Math.round(box.width),
              height: Math.round(box.height),
              __typename: "Chart"
            };

            var newReport = Object(_babel_runtime_corejs2_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_4__["default"])({}, report, {
              slides: report.slides.map(function (slide) {
                if (slide.id === selectedSlide.id) {
                  return Object(_babel_runtime_corejs2_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_4__["default"])({}, slide, {
                    charts: [].concat(Object(_babel_runtime_corejs2_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_2__["default"])(slide.charts), [newChart])
                  });
                } else {
                  return slide;
                }
              })
            });

            updateReport(newReport);
            setTool("select");
            setSelection([newChart]);
          }
      }
    }
  }),
      dragHandlers = _useMouseDrag.dragHandlers,
      dragPos = _useMouseDrag.dragPos,
      dragOrigin = _useMouseDrag.dragOrigin,
      isDragging = _useMouseDrag.isDragging,
      parentRef = _useMouseDrag.parentRef;

  return Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__["jsx"])(Layout, {
    tabIndex: -1,
    onKeyDown: function onKeyDown(e) {
      var modifiers = getModifiers(e);

      switch (e.key) {
        case "Escape":
          setTool("select");

          if (tool === "select") {
            setSelection([]);
          }

          return e.preventDefault();

        case "c":
          if (modifiers.length === 0) {
            setTool("insert_chart");
            return e.preventDefault();
          }

        case "i":
          if (modifiers.length === 0) {
            setTool("insert_image");
            return e.preventDefault();
          }

        case "t":
          if (modifiers.length === 0) {
            setTool("insert_text");
            return e.preventDefault();
          }

        case "Backspace":
          {
            updateReport(Object(_babel_runtime_corejs2_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_4__["default"])({}, report, {
              slides: report.slides.map(function (slide) {
                return Object(_babel_runtime_corejs2_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_4__["default"])({}, slide, {
                  charts: slide.charts.filter(function (chart) {
                    return selection.some(function (selection) {
                      return selection.id === chart.id;
                    }) === false;
                  })
                });
              })
            }));
          }
      }
    },
    __source: {
      fileName: _jsxFileName,
      lineNumber: 144
    },
    __self: this
  }, (reportQuery.loading || updateReportQuery.loading) && Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__["jsx"])(LoadingIndicator, {
    __source: {
      fileName: _jsxFileName,
      lineNumber: 180
    },
    __self: this
  }), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__["jsx"])(_components_Header__WEBPACK_IMPORTED_MODULE_12__["Header"], {
    __source: {
      fileName: _jsxFileName,
      lineNumber: 181
    },
    __self: this
  }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__["jsx"])(_components_Header__WEBPACK_IMPORTED_MODULE_12__["HeaderSection"], {
    __source: {
      fileName: _jsxFileName,
      lineNumber: 182
    },
    __self: this
  }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__["jsx"])(_components_Crumbs__WEBPACK_IMPORTED_MODULE_11__["Crumbs"], {
    __source: {
      fileName: _jsxFileName,
      lineNumber: 183
    },
    __self: this
  }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__["jsx"])(_components_Crumbs__WEBPACK_IMPORTED_MODULE_11__["CrumbLink"], {
    href: "/",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 184
    },
    __self: this
  }, "Home"), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__["jsx"])(_components_Crumbs__WEBPACK_IMPORTED_MODULE_11__["CrumbLink"], {
    href: "/",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 185
    },
    __self: this
  }, "Reports"), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__["jsx"])(_components_Crumbs__WEBPACK_IMPORTED_MODULE_11__["CrumbTitle"], {
    __source: {
      fileName: _jsxFileName,
      lineNumber: 186
    },
    __self: this
  }, report ? report.title : "...")), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__["jsx"])(NewElements, {
    __source: {
      fileName: _jsxFileName,
      lineNumber: 188
    },
    __self: this
  }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__["jsx"])(_components_Button__WEBPACK_IMPORTED_MODULE_14__["FlatButton"], {
    name: "insert_chart",
    onClick: function onClick() {
      return setTool("insert_chart");
    },
    active: tool === "insert_chart",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 189
    },
    __self: this
  }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__["jsx"])(_components_Icon__WEBPACK_IMPORTED_MODULE_13__["Icon"], {
    icon: "insert_chart",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 190
    },
    __self: this
  })), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__["jsx"])(_components_Button__WEBPACK_IMPORTED_MODULE_14__["FlatButton"], {
    name: "insert_image",
    onClick: function onClick() {
      return setTool("insert_image");
    },
    active: tool === "insert_image",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 192
    },
    __self: this
  }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__["jsx"])(_components_Icon__WEBPACK_IMPORTED_MODULE_13__["Icon"], {
    icon: "insert_photo",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 192
    },
    __self: this
  })), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__["jsx"])(_components_Button__WEBPACK_IMPORTED_MODULE_14__["FlatButton"], {
    name: "insert_text",
    onClick: function onClick() {
      return setTool("insert_text");
    },
    active: tool === "insert_text",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 193
    },
    __self: this
  }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__["jsx"])(_components_Icon__WEBPACK_IMPORTED_MODULE_13__["Icon"], {
    icon: "insert_text",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 193
    },
    __self: this
  }))))), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__["jsx"])("div", {
    style: {
      position: "absolute",
      bottom: 16,
      right: 16
    },
    __source: {
      fileName: _jsxFileName,
      lineNumber: 197
    },
    __self: this
  }, scale), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__["jsx"])(Stage, {
    tool: tool,
    scale: scale,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 198
    },
    __self: this
  }, selectedSlide && Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__["jsx"])(Slide, Object(_babel_runtime_corejs2_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__["default"])({
    ref: parentRef
  }, dragHandlers, {
    width: report.width,
    height: report.height,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 202
    },
    __self: this
  }), ["insert_chart", "insert_image", "insert_text"].includes(tool) && isDragging && Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__["jsx"])(DragBox, Object(_babel_runtime_corejs2_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__["default"])({}, getDragBox(dragPos, dragOrigin), {
    __source: {
      fileName: _jsxFileName,
      lineNumber: 204
    },
    __self: this
  })), selectedSlide.charts.map(function (chart) {
    return Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__["jsx"])(react_draggable__WEBPACK_IMPORTED_MODULE_18__["Draggable"], {
      key: chart.id,
      disabled: tool !== "select",
      offsetParent: parentRef.current,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 208
      },
      __self: this
    }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__["jsx"])(Chart, Object(_babel_runtime_corejs2_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__["default"])({
      selected: selection.some(function (s) {
        return s.id === chart.id;
      })
    }, chart, {
      onClick: function onClick(e) {
        if (tool === "select") {
          setSelection(e.nativeEvent.shiftKey ? [].concat(Object(_babel_runtime_corejs2_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_2__["default"])(selection), [chart]) : [chart]);
        }
      },
      __source: {
        fileName: _jsxFileName,
        lineNumber: 214
      },
      __self: this
    })));
  })), report && !selectedSlide && Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__["jsx"])(Center, {
    __source: {
      fileName: _jsxFileName,
      lineNumber: 225
    },
    __self: this
  }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__["jsx"])(_components_Button__WEBPACK_IMPORTED_MODULE_14__["Button"], {
    name: "create slide",
    onClick: function onClick() {
      updateReport(Object(_babel_runtime_corejs2_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_4__["default"])({}, report, {
        slides: [].concat(Object(_babel_runtime_corejs2_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_2__["default"])(report.slides), [{
          charts: []
        }])
      }));
    },
    __source: {
      fileName: _jsxFileName,
      lineNumber: 227
    },
    __self: this
  }, "Create You first Slide")), reportQuery.error && Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__["jsx"])(_components_ErrorBox__WEBPACK_IMPORTED_MODULE_10__["ErrorBox"], {
    error: reportQuery.error,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 240
    },
    __self: this
  })));
};

var Chart = Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_6__["default"])("div", {
  target: "e1nne1bm0",
  label: "Chart"
})("position:absolute;left:", function (p) {
  return p.x;
}, "px;top:", function (p) {
  return p.y;
}, "px;width:", function (p) {
  return p.width;
}, "px;height:", function (p) {
  return p.height;
}, "px;background:#f0f0f0;border:1px solid #dedede;", function (p) {
  return p.selected &&
  /*#__PURE__*/

  /*#__PURE__*/
  Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__["css"])("border:1px dashed ", _theme__WEBPACK_IMPORTED_MODULE_16__["colors"].primary, ";label:Chart;" + ( false ? undefined : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"), "label:Chart;");
}, ";" + ( false ? undefined : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));

var Center = Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_6__["default"])("div", {
  target: "e1nne1bm1",
  label: "Center"
})( false ? undefined : {
  name: "ieltvz",
  styles: "height:100%;display:grid;place-content:center center;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"
});

var DragBox = Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_6__["default"])("div", {
  target: "e1nne1bm2",
  label: "DragBox"
})("position:absolute;width:", function (p) {
  return p.width;
}, "px;height:", function (p) {
  return p.height;
}, "px;left:", function (p) {
  return p.x;
}, "px;top:", function (p) {
  return p.y;
}, "px;border:2px dashed ", _theme__WEBPACK_IMPORTED_MODULE_16__["colors"].primary, ";" + ( false ? undefined : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));

var Slide = Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_6__["default"])("section", {
  target: "e1nne1bm3",
  label: "Slide"
})("position:relative;background:white;box-shadow:0 1px 4px rgba(0,0,0,0.4);width:", function (p) {
  return p.width;
}, "px;height:", function (p) {
  return p.height;
}, "px;" + ( false ? undefined : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));

var NewElements = Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_6__["default"])("div", {
  target: "e1nne1bm4",
  label: "NewElements"
})( false ? undefined : {
  name: "ecvamz",
  styles: "display:grid;grid-auto-flow:column;grid-gap:4px;place-content:center start;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"
});

var Layout = Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_6__["default"])("div", {
  target: "e1nne1bm5",
  label: "Layout"
})( false ? undefined : {
  name: "1dsk5u3",
  styles: "display:grid;height:100%;grid-gap:32px;background:#f5f5f5;grid-template-rows:auto 1fr;place-content:start stretch;overflow:hidden;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"
});

var _ref =  false ? undefined : {
  name: "gcwr8i-Stage",
  styles: "cursor:crosshair;label:Stage;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"
};

var Stage = Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_6__["default"])("main", {
  target: "e1nne1bm6",
  label: "Stage"
})("display:grid;width:100%;place-content:center center;overflow:hidden;", function (p) {
  switch (p.tool) {
    case "insert_chart":
    case "insert_image":
    case "insert_text":
      return (
        /*#__PURE__*/
        _ref
      );
  }
}, " & > *{transform:scale(", function (p) {
  return p.scale;
}, ");transform-origin:50% 50%;}" + ( false ? undefined : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9hbmRyZWFzbW9sbGVyL2NvZGUvcmVwb3J0cy9jbGllbnQvUmVwb3J0L1JlcG9ydC50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBbVR3RCIsImZpbGUiOiIvVXNlcnMvYW5kcmVhc21vbGxlci9jb2RlL3JlcG9ydHMvY2xpZW50L1JlcG9ydC9SZXBvcnQudHN4Iiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgeyB1c2VSZXBvcnRHZXRRdWVyeSwgdXNlUmVwb3J0VXBkYXRlTXV0YXRpb24sIENoYXJ0RnJhZ21lbnQsIFJlcG9ydFVwZGF0ZU11dGF0aW9uVmFyaWFibGVzLCBSZXBvcnRGcmFnbWVudCwgUmVwb3J0R2V0RG9jdW1lbnQgfSBmcm9tIFwiLi4vY29kZWdlbi9ncmFwaHFsXCI7XG5pbXBvcnQgc3R5bGVkIGZyb20gXCJAZW1vdGlvbi9zdHlsZWRcIjtcbmltcG9ydCB7IEVycm9yQm94IH0gZnJvbSBcIi4uL2NvbXBvbmVudHMvRXJyb3JCb3hcIjtcbmltcG9ydCB7IENydW1icywgQ3J1bWJUaXRsZSwgQ3J1bWJMaW5rIH0gZnJvbSBcIi4uL2NvbXBvbmVudHMvQ3J1bWJzXCI7XG5pbXBvcnQgeyBIZWFkZXIsIEhlYWRlclNlY3Rpb24gfSBmcm9tIFwiLi4vY29tcG9uZW50cy9IZWFkZXJcIjtcbmltcG9ydCB7IEljb24gfSBmcm9tIFwiLi4vY29tcG9uZW50cy9JY29uXCI7XG5pbXBvcnQgeyBGbGF0QnV0dG9uLCBCdXR0b24gfSBmcm9tIFwiLi4vY29tcG9uZW50cy9CdXR0b25cIjtcbmltcG9ydCB7IHVzZVN0YXRlLCBLZXlib2FyZEV2ZW50LCB1c2VFZmZlY3QgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IGNzcywga2V5ZnJhbWVzIH0gZnJvbSBcIkBlbW90aW9uL2NvcmVcIjtcbmltcG9ydCB7IHVzZU1vdXNlRHJhZywgUG9zIH0gZnJvbSBcIi4uL2hvb2tzL2RyYWdcIjtcbmltcG9ydCB7IGNvbG9ycyB9IGZyb20gXCIuLi90aGVtZVwiO1xuaW1wb3J0IGN1aWQgZnJvbSBcImN1aWRcIlxuaW1wb3J0IHsgRHJhZ2dhYmxlIH0gZnJvbSBcInJlYWN0LWRyYWdnYWJsZVwiXG5cbnR5cGUgVG9vbCA9XG4gIHwgXCJpbnNlcnRfY2hhcnRcIlxuICB8IFwiaW5zZXJ0X2ltYWdlXCJcbiAgfCBcImluc2VydF90ZXh0XCJcbiAgfCBcInNlbGVjdFwiXG5cblxudHlwZSBTZWxlY3Rpb24gPSBDaGFydEZyYWdtZW50XG5cblxuY29uc3QgcmVtb3ZlVHlwZW5hbWUgPSAocmVwb3J0OiBSZXBvcnRGcmFnbWVudCk6IFJlcG9ydFVwZGF0ZU11dGF0aW9uVmFyaWFibGVzW1wicmVwb3J0XCJdID0+IHtcbiAgY29uc3QgeyBfX3R5cGVuYW1lLCBzbGlkZXMsIC4uLnJlcG9ydERhdGEgfSA9IHJlcG9ydDtcbiAgcmV0dXJuIHtcbiAgICAuLi5yZXBvcnREYXRhLFxuICAgIHNsaWRlczogc2xpZGVzLm1hcCgoeyBfX3R5cGVuYW1lLCBjaGFydHMsIC4uLnNsaWRlRGF0YSB9KSA9PiB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5zbGlkZURhdGEsXG4gICAgICAgIGNoYXJ0czogY2hhcnRzLm1hcCgoeyBfX3R5cGVuYW1lLCAuLi5jaGFydERhdGEgfSkgPT4ge1xuICAgICAgICAgIHJldHVybiBjaGFydERhdGFcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9KVxuICB9XG59XG5cbmNvbnN0IGdldE1vZGlmaWVycyA9IChlOiBLZXlib2FyZEV2ZW50KSA9PlxuICBbXG4gICAgZS5uYXRpdmVFdmVudC5tZXRhS2V5ICYmIFwibWV0YVwiLFxuICAgIGUubmF0aXZlRXZlbnQuY3RybEtleSAmJiBcImN0cmxcIixcbiAgICBlLm5hdGl2ZUV2ZW50LmFsdEtleSAmJiBcImFsdFwiLFxuICAgIGUubmF0aXZlRXZlbnQuc2hpZnRLZXkgJiYgXCJzaGlmdFwiLFxuICBdLmZpbHRlcihCb29sZWFuKVxuXG5leHBvcnQgY29uc3QgUmVwb3J0UGFnZSA9IChwcm9wczogeyBpZDogc3RyaW5nLCBzbGlkZT86IHN0cmluZyB9KSA9PiB7XG4gIGNvbnN0IFtzY2FsZSwgc2V0U2NhbGVdID0gdXNlU3RhdGUoMSlcblxuXG4gIGNvbnN0IFt0b29sLCBzZXRUb29sXSA9IHVzZVN0YXRlPFRvb2w+KFwic2VsZWN0XCIpXG4gIGNvbnN0IFtzZWxlY3Rpb24sIHNldFNlbGVjdGlvbl0gPSB1c2VTdGF0ZTxTZWxlY3Rpb25bXT4oW10pXG4gIGNvbnN0IHJlcG9ydFF1ZXJ5ID0gdXNlUmVwb3J0R2V0UXVlcnkoe1xuICAgIHZhcmlhYmxlczoge1xuICAgICAgaWQ6IHByb3BzLmlkXG4gICAgfSxcbiAgICBvbkNvbXBsZXRlZDogKHsgcmVwb3J0IH0pID0+IHtcbiAgICAgIHNldFNjYWxlKHdpbmRvdy5pbm5lcldpZHRoICogMC44IC8gcmVwb3J0LndpZHRoKVxuICAgIH1cbiAgfSlcblxuICBjb25zdCBbX3VwZGF0ZVJlcG9ydCwgdXBkYXRlUmVwb3J0UXVlcnldID0gdXNlUmVwb3J0VXBkYXRlTXV0YXRpb24oKVxuXG4gIGNvbnN0IHVwZGF0ZVJlcG9ydCA9IChyZXBvcnQ6IFJlcG9ydFVwZGF0ZU11dGF0aW9uVmFyaWFibGVzW1wicmVwb3J0XCJdKSA9PiB7XG4gICAgcmVwb3J0UXVlcnkuY2xpZW50LndyaXRlUXVlcnkoe1xuICAgICAgcXVlcnk6IFJlcG9ydEdldERvY3VtZW50LFxuICAgICAgdmFyaWFibGVzOiB7IGlkOiByZXBvcnQuaWQgfSxcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgcmVwb3J0XG4gICAgICB9XG4gICAgfSlcbiAgICByZXR1cm4gX3VwZGF0ZVJlcG9ydCh7XG4gICAgICB2YXJpYWJsZXM6IHtcbiAgICAgICAgcmVwb3J0OiByZW1vdmVUeXBlbmFtZShyZXBvcnQgYXMgUmVwb3J0RnJhZ21lbnQpXG4gICAgICB9XG4gICAgfSlcblxuICB9XG5cbiAgY29uc3QgcmVwb3J0ID0gcmVwb3J0UXVlcnkuZGF0YSAmJiByZXBvcnRRdWVyeS5kYXRhLnJlcG9ydFxuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgY29uc3QgaGFuZGxlciA9ICgpID0+IHtcbiAgICAgIGlmIChyZXBvcnQpIHtcblxuICAgICAgICBzZXRTY2FsZSh3aW5kb3cuaW5uZXJXaWR0aCAqIDAuOCAvIHJlcG9ydC53aWR0aClcbiAgICAgIH1cbiAgICB9XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIiwgaGFuZGxlcik7XG4gICAgcmV0dXJuICgpID0+IHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwicmVzaXplXCIsIGhhbmRsZXIpXG4gIH0sIFtyZXBvcnRdKVxuXG4gIGNvbnN0IHNlbGVjdGVkU2xpZGUgPSByZXBvcnQgJiYgKHJlcG9ydC5zbGlkZXMuZmluZChzID0+IHMuaWQgPT09IHByb3BzLnNsaWRlKSB8fCByZXBvcnQuc2xpZGVzWzBdKTtcblxuICBjb25zdCBnZXREcmFnQm94ID0gKHBvczogUG9zLCBvcmlnaW46IFBvcykgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICB4OiBNYXRoLm1pbihwb3MueCwgb3JpZ2luLngpIC8gc2NhbGUsXG4gICAgICB5OiBNYXRoLm1pbihwb3MueSwgb3JpZ2luLnkpIC8gc2NhbGUsXG4gICAgICB3aWR0aDogTWF0aC5hYnMocG9zLnggLSBvcmlnaW4ueCkgLyBzY2FsZSxcbiAgICAgIGhlaWdodDogTWF0aC5hYnMocG9zLnkgLSBvcmlnaW4ueSkgLyBzY2FsZSxcbiAgICB9XG4gIH1cblxuICBjb25zdCB7IGRyYWdIYW5kbGVycywgZHJhZ1BvcywgZHJhZ09yaWdpbiwgaXNEcmFnZ2luZywgcGFyZW50UmVmIH0gPSB1c2VNb3VzZURyYWcoe1xuICAgIG9uRHJhZ0VuZDogKHBvcywgb3JpZ2luKSA9PiB7XG4gICAgICBjb25zdCBib3ggPSBnZXREcmFnQm94KHBvcywgb3JpZ2luKTtcbiAgICAgIHN3aXRjaCAodG9vbCkge1xuICAgICAgICBjYXNlIFwiaW5zZXJ0X2NoYXJ0XCI6IHtcblxuICAgICAgICAgIGNvbnN0IG5ld0NoYXJ0ID0ge1xuICAgICAgICAgICAgaWQ6IGN1aWQoKSxcbiAgICAgICAgICAgIHg6IE1hdGgucm91bmQoYm94LngpLFxuICAgICAgICAgICAgeTogTWF0aC5yb3VuZChib3gueSksXG4gICAgICAgICAgICB3aWR0aDogTWF0aC5yb3VuZChib3gud2lkdGgpLFxuICAgICAgICAgICAgaGVpZ2h0OiBNYXRoLnJvdW5kKGJveC5oZWlnaHQpLFxuICAgICAgICAgICAgX190eXBlbmFtZTogXCJDaGFydFwiIGFzIFwiQ2hhcnRcIlxuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnN0IG5ld1JlcG9ydCA9IHtcbiAgICAgICAgICAgIC4uLnJlcG9ydCxcbiAgICAgICAgICAgIHNsaWRlczogcmVwb3J0LnNsaWRlcy5tYXAoc2xpZGUgPT4ge1xuICAgICAgICAgICAgICBpZiAoc2xpZGUuaWQgPT09IHNlbGVjdGVkU2xpZGUuaWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgLi4uc2xpZGUsXG4gICAgICAgICAgICAgICAgICBjaGFydHM6IFsuLi5zbGlkZS5jaGFydHMsIG5ld0NoYXJ0XVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc2xpZGVcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICB9XG4gICAgICAgICAgdXBkYXRlUmVwb3J0KG5ld1JlcG9ydClcbiAgICAgICAgICBzZXRUb29sKFwic2VsZWN0XCIpO1xuICAgICAgICAgIHNldFNlbGVjdGlvbihbbmV3Q2hhcnRdKVxuICAgICAgICB9XG5cbiAgICAgIH1cbiAgICB9XG4gIH0pXG5cbiAgcmV0dXJuIChcbiAgICA8TGF5b3V0IHRhYkluZGV4PXstMX0gb25LZXlEb3duPXtlID0+IHtcbiAgICAgIGNvbnN0IG1vZGlmaWVycyA9IGdldE1vZGlmaWVycyhlKTtcbiAgICAgIHN3aXRjaCAoZS5rZXkpIHtcbiAgICAgICAgY2FzZSBcIkVzY2FwZVwiOlxuICAgICAgICAgIHNldFRvb2woXCJzZWxlY3RcIilcbiAgICAgICAgICBpZiAodG9vbCA9PT0gXCJzZWxlY3RcIikge1xuICAgICAgICAgICAgc2V0U2VsZWN0aW9uKFtdKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgY2FzZSBcImNcIjpcbiAgICAgICAgICBpZiAobW9kaWZpZXJzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgc2V0VG9vbChcImluc2VydF9jaGFydFwiKVxuICAgICAgICAgICAgcmV0dXJuIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICB9XG4gICAgICAgIGNhc2UgXCJpXCI6XG4gICAgICAgICAgaWYgKG1vZGlmaWVycy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHNldFRvb2woXCJpbnNlcnRfaW1hZ2VcIilcbiAgICAgICAgICAgIHJldHVybiBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgfVxuICAgICAgICBjYXNlIFwidFwiOlxuICAgICAgICAgIGlmIChtb2RpZmllcnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBzZXRUb29sKFwiaW5zZXJ0X3RleHRcIilcbiAgICAgICAgICAgIHJldHVybiBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgfVxuICAgICAgICBjYXNlIFwiQmFja3NwYWNlXCI6IHtcbiAgICAgICAgICB1cGRhdGVSZXBvcnQoe1xuICAgICAgICAgICAgLi4ucmVwb3J0LFxuICAgICAgICAgICAgc2xpZGVzOiByZXBvcnQuc2xpZGVzLm1hcChzbGlkZSA9PiAoe1xuICAgICAgICAgICAgICAuLi5zbGlkZSxcbiAgICAgICAgICAgICAgY2hhcnRzOiBzbGlkZS5jaGFydHMuZmlsdGVyKGNoYXJ0ID0+IHNlbGVjdGlvbi5zb21lKHNlbGVjdGlvbiA9PiBzZWxlY3Rpb24uaWQgPT09IGNoYXJ0LmlkKSA9PT0gZmFsc2UpXG4gICAgICAgICAgICB9KSlcbiAgICAgICAgICB9KVxuICAgICAgICB9XG5cbiAgICAgIH1cbiAgICB9fT5cbiAgICAgIHsocmVwb3J0UXVlcnkubG9hZGluZyB8fCB1cGRhdGVSZXBvcnRRdWVyeS5sb2FkaW5nKSAmJiA8TG9hZGluZ0luZGljYXRvciAvPn1cbiAgICAgIDxIZWFkZXI+XG4gICAgICAgIDxIZWFkZXJTZWN0aW9uPlxuICAgICAgICAgIDxDcnVtYnM+XG4gICAgICAgICAgICA8Q3J1bWJMaW5rIGhyZWY9XCIvXCI+SG9tZTwvQ3J1bWJMaW5rPlxuICAgICAgICAgICAgPENydW1iTGluayBocmVmPVwiL1wiPlJlcG9ydHM8L0NydW1iTGluaz5cbiAgICAgICAgICAgIDxDcnVtYlRpdGxlPntyZXBvcnQgPyByZXBvcnQudGl0bGUgOiBcIi4uLlwifTwvQ3J1bWJUaXRsZT5cbiAgICAgICAgICA8L0NydW1icyA+XG4gICAgICAgICAgPE5ld0VsZW1lbnRzPlxuICAgICAgICAgICAgPEZsYXRCdXR0b24gbmFtZT1cImluc2VydF9jaGFydFwiIG9uQ2xpY2s9eygpID0+IHNldFRvb2woXCJpbnNlcnRfY2hhcnRcIil9IGFjdGl2ZT17dG9vbCA9PT0gXCJpbnNlcnRfY2hhcnRcIn0+XG4gICAgICAgICAgICAgIDxJY29uIGljb249XCJpbnNlcnRfY2hhcnRcIiAvPlxuICAgICAgICAgICAgPC9GbGF0QnV0dG9uPlxuICAgICAgICAgICAgPEZsYXRCdXR0b24gbmFtZT1cImluc2VydF9pbWFnZVwiIG9uQ2xpY2s9eygpID0+IHNldFRvb2woXCJpbnNlcnRfaW1hZ2VcIil9IGFjdGl2ZT17dG9vbCA9PT0gXCJpbnNlcnRfaW1hZ2VcIn0+PEljb24gaWNvbj1cImluc2VydF9waG90b1wiIC8+PC9GbGF0QnV0dG9uPlxuICAgICAgICAgICAgPEZsYXRCdXR0b24gbmFtZT1cImluc2VydF90ZXh0XCIgb25DbGljaz17KCkgPT4gc2V0VG9vbChcImluc2VydF90ZXh0XCIpfSBhY3RpdmU9e3Rvb2wgPT09IFwiaW5zZXJ0X3RleHRcIn0+PEljb24gaWNvbj1cImluc2VydF90ZXh0XCIgLz48L0ZsYXRCdXR0b24+XG4gICAgICAgICAgPC9OZXdFbGVtZW50cz5cbiAgICAgICAgPC9IZWFkZXJTZWN0aW9uPlxuICAgICAgPC9IZWFkZXIgPlxuICAgICAgPGRpdiBzdHlsZT17eyBwb3NpdGlvbjogXCJhYnNvbHV0ZVwiLCBib3R0b206IDE2LCByaWdodDogMTYgfX0+e3NjYWxlfTwvZGl2PlxuICAgICAgPFN0YWdlIHRvb2w9e3Rvb2x9IHNjYWxlPXtzY2FsZX0+XG5cbiAgICAgICAge1xuICAgICAgICAgIHNlbGVjdGVkU2xpZGUgJiZcbiAgICAgICAgICA8U2xpZGUgcmVmPXtwYXJlbnRSZWZ9IHsuLi5kcmFnSGFuZGxlcnN9IHdpZHRoPXtyZXBvcnQud2lkdGh9IGhlaWdodD17cmVwb3J0LmhlaWdodH0+XG4gICAgICAgICAgICB7W1wiaW5zZXJ0X2NoYXJ0XCIsIFwiaW5zZXJ0X2ltYWdlXCIsIFwiaW5zZXJ0X3RleHRcIl0uaW5jbHVkZXModG9vbCkgJiYgaXNEcmFnZ2luZyAmJlxuICAgICAgICAgICAgICA8RHJhZ0JveCB7Li4uZ2V0RHJhZ0JveChkcmFnUG9zLCBkcmFnT3JpZ2luKX0gLz5cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHtzZWxlY3RlZFNsaWRlLmNoYXJ0cy5tYXAoY2hhcnQgPT4ge1xuICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgIDxEcmFnZ2FibGVcbiAgICAgICAgICAgICAgICAgIGtleT17Y2hhcnQuaWR9XG4gICAgICAgICAgICAgICAgICBkaXNhYmxlZD17dG9vbCAhPT0gXCJzZWxlY3RcIn1cbiAgICAgICAgICAgICAgICAgIG9mZnNldFBhcmVudD17cGFyZW50UmVmLmN1cnJlbnR9XG5cbiAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICA8Q2hhcnQgc2VsZWN0ZWQ9e3NlbGVjdGlvbi5zb21lKHMgPT4gcy5pZCA9PT0gY2hhcnQuaWQpfSB7Li4uY2hhcnR9IG9uQ2xpY2s9e2UgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAodG9vbCA9PT0gXCJzZWxlY3RcIikge1xuICAgICAgICAgICAgICAgICAgICAgIHNldFNlbGVjdGlvbihlLm5hdGl2ZUV2ZW50LnNoaWZ0S2V5ID8gWy4uLnNlbGVjdGlvbiwgY2hhcnRdIDogW2NoYXJ0XSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH19IC8+XG4gICAgICAgICAgICAgICAgPC9EcmFnZ2FibGU+XG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgIH0pfVxuICAgICAgICAgIDwvU2xpZGU+XG4gICAgICAgIH1cbiAgICAgICAge3JlcG9ydCAmJiAhc2VsZWN0ZWRTbGlkZSAmJlxuICAgICAgICAgIDxDZW50ZXI+XG5cbiAgICAgICAgICAgIDxCdXR0b24gbmFtZT1cImNyZWF0ZSBzbGlkZVwiIG9uQ2xpY2s9eygpID0+IHtcbiAgICAgICAgICAgICAgdXBkYXRlUmVwb3J0KHtcbiAgICAgICAgICAgICAgICAuLi5yZXBvcnQsXG4gICAgICAgICAgICAgICAgc2xpZGVzOiBbXG4gICAgICAgICAgICAgICAgICAuLi5yZXBvcnQuc2xpZGVzLFxuICAgICAgICAgICAgICAgICAgeyBjaGFydHM6IFtdIH1cbiAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9fT5cbiAgICAgICAgICAgICAgQ3JlYXRlIFlvdSBmaXJzdCBTbGlkZVxuICAgICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgICAgPC9DZW50ZXI+XG4gICAgICAgIH1cbiAgICAgICAge3JlcG9ydFF1ZXJ5LmVycm9yICYmIDxFcnJvckJveCBlcnJvcj17cmVwb3J0UXVlcnkuZXJyb3J9IC8+fVxuICAgICAgPC9TdGFnZT5cblxuICAgIDwvTGF5b3V0ID5cbiAgKVxufVxuXG5jb25zdCBDaGFydCA9IHN0eWxlZC5kaXY8Q2hhcnRGcmFnbWVudCAmIHsgc2VsZWN0ZWQ6IGJvb2xlYW4gfT5gXG4gIHBvc2l0aW9uOmFic29sdXRlO1xuICBsZWZ0OiAke3AgPT4gcC54fXB4O1xuICB0b3A6ICR7cCA9PiBwLnl9cHg7XG4gIHdpZHRoOiAke3AgPT4gcC53aWR0aH1weDtcbiAgaGVpZ2h0OiAke3AgPT4gcC5oZWlnaHR9cHg7XG4gIGJhY2tncm91bmQ6ICNmMGYwZjA7XG4gIGJvcmRlcjogMXB4IHNvbGlkICNkZWRlZGU7XG4gICR7cCA9PiBwLnNlbGVjdGVkICYmIGNzc2Bib3JkZXI6IDFweCBkYXNoZWQgJHtjb2xvcnMucHJpbWFyeX07YH07XG5gXG5cblxuY29uc3QgQ2VudGVyID0gc3R5bGVkLmRpdmBcbiAgaGVpZ2h0OjEwMCU7XG4gIGRpc3BsYXk6Z3JpZDtcbiAgcGxhY2UtY29udGVudDpjZW50ZXIgY2VudGVyO1xuICBgXG5cblxudHlwZSBEcmFnQm94UHJvcHMgPSB7XG4gIHg6IG51bWJlcjtcbiAgeTogbnVtYmVyO1xuICB3aWR0aDogbnVtYmVyO1xuICBoZWlnaHQ6IG51bWJlcjtcbn1cblxuY29uc3QgRHJhZ0JveCA9IHN0eWxlZC5kaXY8RHJhZ0JveFByb3BzPmBcbiAgcG9zaXRpb246YWJzb2x1dGU7XG4gIHdpZHRoOiR7cCA9PiBwLndpZHRofXB4O1xuICBoZWlnaHQ6JHtwID0+IHAuaGVpZ2h0fXB4O1xuICBsZWZ0OiR7cCA9PiBwLnh9cHg7XG4gIHRvcDoke3AgPT4gcC55fXB4O1xuICBib3JkZXI6IDJweCBkYXNoZWQgJHtjb2xvcnMucHJpbWFyeX07XG5gXG5cbmNvbnN0IFNsaWRlID0gc3R5bGVkLnNlY3Rpb248eyB3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlciB9PmBcbiAgcG9zaXRpb246cmVsYXRpdmU7XG4gIGJhY2tncm91bmQ6d2hpdGU7XG4gIGJveC1zaGFkb3c6IDAgMXB4IDRweCByZ2JhKDAsIDAsIDAsIDAuNCk7XG4gIHdpZHRoOiAke3AgPT4gcC53aWR0aH1weDtcbiAgaGVpZ2h0OiR7cCA9PiBwLmhlaWdodH1weDtcbmBcblxuY29uc3QgTmV3RWxlbWVudHMgPSBzdHlsZWQuZGl2YFxuICBkaXNwbGF5OmdyaWQ7XG4gIGdyaWQtYXV0by1mbG93OiBjb2x1bW47XG4gIGdyaWQtZ2FwOiA0cHg7XG4gIHBsYWNlLWNvbnRlbnQ6IGNlbnRlciBzdGFydDtcbmBcblxuXG5jb25zdCBMYXlvdXQgPSBzdHlsZWQuZGl2YFxuICBkaXNwbGF5OmdyaWQ7XG4gIGhlaWdodDoxMDAlO1xuICBncmlkLWdhcDogMzJweDtcbiAgYmFja2dyb3VuZDojZjVmNWY1O1xuICBncmlkLXRlbXBsYXRlLXJvd3M6IGF1dG8gMWZyO1xuICBwbGFjZS1jb250ZW50OiBzdGFydCBzdHJldGNoO1xuICBvdmVyZmxvdzpoaWRkZW47XG5gXG5cbmNvbnN0IFN0YWdlID0gc3R5bGVkLm1haW48eyB0b29sOiBUb29sLCBzY2FsZTogbnVtYmVyIH0+YFxuICBkaXNwbGF5OmdyaWQ7XG4gIHdpZHRoOjEwMCU7XG4gIHBsYWNlLWNvbnRlbnQ6Y2VudGVyIGNlbnRlcjtcbiAgb3ZlcmZsb3c6aGlkZGVuO1xuICAke3AgPT4ge1xuICAgIHN3aXRjaCAocC50b29sKSB7XG4gICAgICBjYXNlIFwiaW5zZXJ0X2NoYXJ0XCI6XG4gICAgICBjYXNlIFwiaW5zZXJ0X2ltYWdlXCI6XG4gICAgICBjYXNlIFwiaW5zZXJ0X3RleHRcIjpcbiAgICAgICAgcmV0dXJuIGNzc2BcbiAgICAgICAgY3Vyc29yOiBjcm9zc2hhaXI7XG4gICAgICAgIGBcbiAgICB9XG4gIH19XG4gICYgPiAqIHtcbiAgICB0cmFuc2Zvcm06IHNjYWxlKCR7cCA9PiBwLnNjYWxlfSk7XG4gICAgdHJhbnNmb3JtLW9yaWdpbjogNTAlIDUwJTtcbiAgfVxuYFxuXG5cbmNvbnN0IExvYWRpbmdJbmRpY2F0b3IgPSAoKSA9PlxuICA8TG9hZGluZ1dyYXBwZXI+XG4gICAgPExvYWRpbmdEb3QgZGVsYXk9ezB9Pi48L0xvYWRpbmdEb3Q+XG4gICAgPExvYWRpbmdEb3QgZGVsYXk9ezIwMH0+LjwvTG9hZGluZ0RvdD5cbiAgICA8TG9hZGluZ0RvdCBkZWxheT17NDAwfT4uPC9Mb2FkaW5nRG90PlxuICA8L0xvYWRpbmdXcmFwcGVyPlxuXG5jb25zdCBqdW1wQW5pbWF0aW9uID0ga2V5ZnJhbWVzYFxuICBmcm9tIHtcbiAgICBvcGFjaXR5OjA7XG4gIH1cbiAgdG8ge1xuICAgIG9wYWNpdHk6MTtcbiAgfVxuYFxuXG5cbmNvbnN0IExvYWRpbmdXcmFwcGVyID0gc3R5bGVkLmRpdmBcbnBvc2l0aW9uOmFic29sdXRlO1xuICB0b3A6IDMycHg7XG4gIHJpZ2h0OiAzMnB4O1xuICBmb250LXNpemU6IDJyZW07XG5gXG5jb25zdCBMb2FkaW5nRG90ID0gc3R5bGVkLnNwYW48eyBkZWxheTogbnVtYmVyIH0+YFxuICBhbmltYXRpb246JHtqdW1wQW5pbWF0aW9ufSAxcyBlYXNlIGluZmluaXRlO1xuICBhbmltYXRpb24tZGVsYXk6JHtwID0+IHAuZGVsYXl9bXM7XG5gIl19 */"));

var LoadingIndicator = function LoadingIndicator() {
  return Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__["jsx"])(LoadingWrapper, {
    __source: {
      fileName: _jsxFileName,
      lineNumber: 331
    },
    __self: this
  }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__["jsx"])(LoadingDot, {
    delay: 0,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 332
    },
    __self: this
  }, "."), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__["jsx"])(LoadingDot, {
    delay: 200,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 333
    },
    __self: this
  }, "."), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__["jsx"])(LoadingDot, {
    delay: 400,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 334
    },
    __self: this
  }, "."));
};

var jumpAnimation = Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__["keyframes"])(_templateObject());

var LoadingWrapper = Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_6__["default"])("div", {
  target: "e1nne1bm7",
  label: "LoadingWrapper"
})( false ? undefined : {
  name: "117pp3l",
  styles: "position:absolute;top:32px;right:32px;font-size:2rem;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"
});

var LoadingDot = Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_6__["default"])("span", {
  target: "e1nne1bm8",
  label: "LoadingDot"
})("animation:", jumpAnimation, " 1s ease infinite;animation-delay:", function (p) {
  return p.delay;
}, "ms;" + ( false ? undefined : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));

/***/ }),

/***/ "./node_modules/react-draggable/web/react-draggable.min.js":
/*!*****************************************************************!*\
  !*** ./node_modules/react-draggable/web/react-draggable.min.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

!function(t,e){ true?module.exports=e(__webpack_require__(/*! react */ "./node_modules/react/index.js"),__webpack_require__(/*! react-dom */ "./node_modules/react-dom/index.js")):undefined}(window,function(t,e){return function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=9)}([function(t,e,n){t.exports=n(11)()},function(t,e,n){"use strict";function r(t,e){for(var n=0,r=t.length;n<r;n++)if(e.apply(e,[t[n],n,t]))return t[n]}function o(t){return"function"==typeof t||"[object Function]"===Object.prototype.toString.call(t)}function a(t){return"number"==typeof t&&!isNaN(t)}function i(t){return parseInt(t,10)}function c(t,e,n){if(t[e])return new Error("Invalid prop ".concat(e," passed to ").concat(n," - do not set this, set it on the child."))}n.d(e,"b",function(){return r}),n.d(e,"d",function(){return o}),n.d(e,"e",function(){return a}),n.d(e,"c",function(){return i}),n.d(e,"a",function(){return c})},function(t,e,n){"use strict";var r=n(1),o=["Moz","Webkit","O","ms"];function a(t,e){return e?"".concat(e).concat(function(t){for(var e="",n=!0,r=0;r<t.length;r++)n?(e+=t[r].toUpperCase(),n=!1):"-"===t[r]?n=!0:e+=t[r];return e}(t)):t}var i=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"transform";if("undefined"==typeof window||void 0===window.document)return"";var e=window.document.documentElement.style;if(t in e)return"";for(var n=0;n<o.length;n++)if(a(t,o[n])in e)return o[n];return""}();function c(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter(function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})),n.push.apply(n,r)}return n}function u(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}n.d(e,"i",function(){return f}),n.d(e,"a",function(){return p}),n.d(e,"m",function(){return d}),n.d(e,"k",function(){return g}),n.d(e,"l",function(){return b}),n.d(e,"g",function(){return y}),n.d(e,"h",function(){return h}),n.d(e,"j",function(){return m}),n.d(e,"c",function(){return O}),n.d(e,"d",function(){return v}),n.d(e,"e",function(){return w}),n.d(e,"f",function(){return D}),n.d(e,"b",function(){return S}),n.d(e,"n",function(){return x}),n.d(e,"o",function(){return P});var s="";function l(t,e){return s||(s=Object(r.b)(["matches","webkitMatchesSelector","mozMatchesSelector","msMatchesSelector","oMatchesSelector"],function(e){return Object(r.d)(t[e])})),!!Object(r.d)(t[s])&&t[s](e)}function f(t,e,n){var r=t;do{if(l(r,e))return!0;if(r===n)return!1;r=r.parentNode}while(r);return!1}function p(t,e,n){t&&(t.attachEvent?t.attachEvent("on"+e,n):t.addEventListener?t.addEventListener(e,n,!0):t["on"+e]=n)}function d(t,e,n){t&&(t.detachEvent?t.detachEvent("on"+e,n):t.removeEventListener?t.removeEventListener(e,n,!0):t["on"+e]=null)}function g(t){var e=t.clientHeight,n=t.ownerDocument.defaultView.getComputedStyle(t);return e+=Object(r.c)(n.borderTopWidth),e+=Object(r.c)(n.borderBottomWidth)}function b(t){var e=t.clientWidth,n=t.ownerDocument.defaultView.getComputedStyle(t);return e+=Object(r.c)(n.borderLeftWidth),e+=Object(r.c)(n.borderRightWidth)}function y(t){var e=t.clientHeight,n=t.ownerDocument.defaultView.getComputedStyle(t);return e-=Object(r.c)(n.paddingTop),e-=Object(r.c)(n.paddingBottom)}function h(t){var e=t.clientWidth,n=t.ownerDocument.defaultView.getComputedStyle(t);return e-=Object(r.c)(n.paddingLeft),e-=Object(r.c)(n.paddingRight)}function m(t,e){var n=e===e.ownerDocument.body?{left:0,top:0}:e.getBoundingClientRect();return{x:t.clientX+e.scrollLeft-n.left,y:t.clientY+e.scrollTop-n.top}}function O(t,e){var n=j(t,e,"px");return u({},a("transform",i),n)}function v(t,e){return j(t,e,"")}function j(t,e,n){var r=t.x,o=t.y,a="translate(".concat(r).concat(n,",").concat(o).concat(n,")");if(e){var i="".concat("string"==typeof e.x?e.x:e.x+n),c="".concat("string"==typeof e.y?e.y:e.y+n);a="translate(".concat(i,", ").concat(c,")")+a}return a}function w(t,e){return t.targetTouches&&Object(r.b)(t.targetTouches,function(t){return e===t.identifier})||t.changedTouches&&Object(r.b)(t.changedTouches,function(t){return e===t.identifier})}function D(t){return t.targetTouches&&t.targetTouches[0]?t.targetTouches[0].identifier:t.changedTouches&&t.changedTouches[0]?t.changedTouches[0].identifier:void 0}function S(t){if(t){var e,n,r=t.getElementById("react-draggable-style-el");r||((r=t.createElement("style")).type="text/css",r.id="react-draggable-style-el",r.innerHTML=".react-draggable-transparent-selection *::-moz-selection {all: inherit;}\n",r.innerHTML+=".react-draggable-transparent-selection *::selection {all: inherit;}\n",t.getElementsByTagName("head")[0].appendChild(r)),t.body&&(e=t.body,n="react-draggable-transparent-selection",e.classList?e.classList.add(n):e.className.match(new RegExp("(?:^|\\s)".concat(n,"(?!\\S)")))||(e.className+=" ".concat(n)))}}function x(t){try{t&&t.body&&(e=t.body,n="react-draggable-transparent-selection",e.classList?e.classList.remove(n):e.className=e.className.replace(new RegExp("(?:^|\\s)".concat(n,"(?!\\S)"),"g"),"")),t.selection?t.selection.empty():window.getSelection().removeAllRanges()}catch(t){}var e,n}function P(){return function(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?c(n,!0).forEach(function(e){u(t,e,n[e])}):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):c(n).forEach(function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))})}return t}({touchAction:"none"},arguments.length>0&&void 0!==arguments[0]?arguments[0]:{})}},function(t,e,n){"use strict";n.d(e,"e",function(){return c}),n.d(e,"g",function(){return u}),n.d(e,"a",function(){return s}),n.d(e,"b",function(){return l}),n.d(e,"f",function(){return f}),n.d(e,"c",function(){return p}),n.d(e,"d",function(){return d});var r=n(1),o=n(6),a=n.n(o),i=n(2);function c(t,e,n){if(!t.props.bounds)return[e,n];var o=t.props.bounds;o="string"==typeof o?o:function(t){return{left:t.left,top:t.top,right:t.right,bottom:t.bottom}}(o);var a=g(t);if("string"==typeof o){var c,u=a.ownerDocument,s=u.defaultView;if(!((c="parent"===o?a.parentNode:u.querySelector(o))instanceof s.HTMLElement))throw new Error('Bounds selector "'+o+'" could not find an element.');var l=s.getComputedStyle(a),f=s.getComputedStyle(c);o={left:-a.offsetLeft+Object(r.c)(f.paddingLeft)+Object(r.c)(l.marginLeft),top:-a.offsetTop+Object(r.c)(f.paddingTop)+Object(r.c)(l.marginTop),right:Object(i.h)(c)-Object(i.l)(a)-a.offsetLeft+Object(r.c)(f.paddingRight)-Object(r.c)(l.marginRight),bottom:Object(i.g)(c)-Object(i.k)(a)-a.offsetTop+Object(r.c)(f.paddingBottom)-Object(r.c)(l.marginBottom)}}return Object(r.e)(o.right)&&(e=Math.min(e,o.right)),Object(r.e)(o.bottom)&&(n=Math.min(n,o.bottom)),Object(r.e)(o.left)&&(e=Math.max(e,o.left)),Object(r.e)(o.top)&&(n=Math.max(n,o.top)),[e,n]}function u(t,e,n){return[Math.round(e/t[0])*t[0],Math.round(n/t[1])*t[1]]}function s(t){return"both"===t.props.axis||"x"===t.props.axis}function l(t){return"both"===t.props.axis||"y"===t.props.axis}function f(t,e,n){var r="number"==typeof e?Object(i.e)(t,e):null;if("number"==typeof e&&!r)return null;var o=g(n),a=n.props.offsetParent||o.offsetParent||o.ownerDocument.body;return Object(i.j)(r||t,a)}function p(t,e,n){var o=t.state,a=!Object(r.e)(o.lastX),i=g(t);return a?{node:i,deltaX:0,deltaY:0,lastX:e,lastY:n,x:e,y:n}:{node:i,deltaX:e-o.lastX,deltaY:n-o.lastY,lastX:o.lastX,lastY:o.lastY,x:e,y:n}}function d(t,e){var n=t.props.scale;return{node:e.node,x:t.state.x+e.deltaX/n,y:t.state.y+e.deltaY/n,deltaX:e.deltaX/n,deltaY:e.deltaY/n,lastX:t.state.x,lastY:t.state.y}}function g(t){var e=a.a.findDOMNode(t);if(!e)throw new Error("<DraggableCore>: Unmounted during event!");return e}},function(t,e,n){"use strict";function r(){}n.d(e,"a",function(){return r})},function(e,n){e.exports=t},function(t,n){t.exports=e},function(t,e,n){"use strict";n.r(e),n.d(e,"default",function(){return w});var r=n(5),o=n.n(r),a=n(0),i=n.n(a),c=n(6),u=n.n(c),s=n(2),l=n(3),f=n(1),p=n(4);function d(t){return(d="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function g(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var n=[],r=!0,o=!1,a=void 0;try{for(var i,c=t[Symbol.iterator]();!(r=(i=c.next()).done)&&(n.push(i.value),!e||n.length!==e);r=!0);}catch(t){o=!0,a=t}finally{try{r||null==c.return||c.return()}finally{if(o)throw a}}return n}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function b(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function y(t){return(y=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function h(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function m(t,e){return(m=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function O(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var v={touch:{start:"touchstart",move:"touchmove",stop:"touchend"},mouse:{start:"mousedown",move:"mousemove",stop:"mouseup"}},j=v.mouse,w=function(t){function e(){var t,n,r,o;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);for(var a=arguments.length,i=new Array(a),c=0;c<a;c++)i[c]=arguments[c];return r=this,o=(t=y(e)).call.apply(t,[this].concat(i)),n=!o||"object"!==d(o)&&"function"!=typeof o?h(r):o,O(h(n),"state",{dragging:!1,lastX:NaN,lastY:NaN,touchIdentifier:null}),O(h(n),"handleDragStart",function(t){if(n.props.onMouseDown(t),!n.props.allowAnyClick&&"number"==typeof t.button&&0!==t.button)return!1;var e=u.a.findDOMNode(h(n));if(!e||!e.ownerDocument||!e.ownerDocument.body)throw new Error("<DraggableCore> not mounted on DragStart!");var r=e.ownerDocument;if(!(n.props.disabled||!(t.target instanceof r.defaultView.Node)||n.props.handle&&!Object(s.i)(t.target,n.props.handle,e)||n.props.cancel&&Object(s.i)(t.target,n.props.cancel,e))){var o=Object(s.f)(t);n.setState({touchIdentifier:o});var a=Object(l.f)(t,o,h(n));if(null!=a){var i=a.x,c=a.y,f=Object(l.c)(h(n),i,c);Object(p.a)("DraggableCore: handleDragStart: %j",f),Object(p.a)("calling",n.props.onStart),!1!==n.props.onStart(t,f)&&(n.props.enableUserSelectHack&&Object(s.b)(r),n.setState({dragging:!0,lastX:i,lastY:c}),Object(s.a)(r,j.move,n.handleDrag),Object(s.a)(r,j.stop,n.handleDragStop))}}}),O(h(n),"handleDrag",function(t){"touchmove"===t.type&&t.preventDefault();var e=Object(l.f)(t,n.state.touchIdentifier,h(n));if(null!=e){var r=e.x,o=e.y;if(Array.isArray(n.props.grid)){var a=r-n.state.lastX,i=o-n.state.lastY,c=g(Object(l.g)(n.props.grid,a,i),2);if(a=c[0],i=c[1],!a&&!i)return;r=n.state.lastX+a,o=n.state.lastY+i}var u=Object(l.c)(h(n),r,o);if(Object(p.a)("DraggableCore: handleDrag: %j",u),!1!==n.props.onDrag(t,u))n.setState({lastX:r,lastY:o});else try{n.handleDragStop(new MouseEvent("mouseup"))}catch(t){var s=document.createEvent("MouseEvents");s.initMouseEvent("mouseup",!0,!0,window,0,0,0,0,0,!1,!1,!1,!1,0,null),n.handleDragStop(s)}}}),O(h(n),"handleDragStop",function(t){if(n.state.dragging){var e=Object(l.f)(t,n.state.touchIdentifier,h(n));if(null!=e){var r=e.x,o=e.y,a=Object(l.c)(h(n),r,o),i=u.a.findDOMNode(h(n));i&&n.props.enableUserSelectHack&&Object(s.n)(i.ownerDocument),Object(p.a)("DraggableCore: handleDragStop: %j",a),n.setState({dragging:!1,lastX:NaN,lastY:NaN}),n.props.onStop(t,a),i&&(Object(p.a)("DraggableCore: Removing handlers"),Object(s.m)(i.ownerDocument,j.move,n.handleDrag),Object(s.m)(i.ownerDocument,j.stop,n.handleDragStop))}}}),O(h(n),"onMouseDown",function(t){return j=v.mouse,n.handleDragStart(t)}),O(h(n),"onMouseUp",function(t){return j=v.mouse,n.handleDragStop(t)}),O(h(n),"onTouchStart",function(t){return j=v.touch,n.handleDragStart(t)}),O(h(n),"onTouchEnd",function(t){return j=v.touch,n.handleDragStop(t)}),n}var n,r,a;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&m(t,e)}(e,o.a.Component),n=e,(r=[{key:"componentWillUnmount",value:function(){var t=u.a.findDOMNode(this);if(t){var e=t.ownerDocument;Object(s.m)(e,v.mouse.move,this.handleDrag),Object(s.m)(e,v.touch.move,this.handleDrag),Object(s.m)(e,v.mouse.stop,this.handleDragStop),Object(s.m)(e,v.touch.stop,this.handleDragStop),this.props.enableUserSelectHack&&Object(s.n)(e)}}},{key:"render",value:function(){return o.a.cloneElement(o.a.Children.only(this.props.children),{style:Object(s.o)(this.props.children.props.style),onMouseDown:this.onMouseDown,onTouchStart:this.onTouchStart,onMouseUp:this.onMouseUp,onTouchEnd:this.onTouchEnd})}}])&&b(n.prototype,r),a&&b(n,a),e}();O(w,"displayName","DraggableCore"),O(w,"propTypes",{allowAnyClick:i.a.bool,disabled:i.a.bool,enableUserSelectHack:i.a.bool,offsetParent:function(t,e){if(t[e]&&1!==t[e].nodeType)throw new Error("Draggable's offsetParent must be a DOM Node.")},grid:i.a.arrayOf(i.a.number),handle:i.a.string,cancel:i.a.string,onStart:i.a.func,onDrag:i.a.func,onStop:i.a.func,onMouseDown:i.a.func,className:f.a,style:f.a,transform:f.a}),O(w,"defaultProps",{allowAnyClick:!1,cancel:null,disabled:!1,enableUserSelectHack:!0,offsetParent:null,handle:null,grid:null,transform:null,onStart:function(){},onDrag:function(){},onStop:function(){},onMouseDown:function(){}})},function(t,e,n){var r;
/*!
  Copyright (c) 2017 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/!function(){"use strict";var n={}.hasOwnProperty;function o(){for(var t=[],e=0;e<arguments.length;e++){var r=arguments[e];if(r){var a=typeof r;if("string"===a||"number"===a)t.push(r);else if(Array.isArray(r)&&r.length){var i=o.apply(null,r);i&&t.push(i)}else if("object"===a)for(var c in r)n.call(r,c)&&r[c]&&t.push(c)}}return t.join(" ")}t.exports?(o.default=o,t.exports=o):void 0===(r=function(){return o}.apply(e,[]))||(t.exports=r)}()},function(t,e,n){var r=n(10).default;t.exports=r,t.exports.default=r,t.exports.DraggableCore=n(7).default},function(t,e,n){"use strict";n.r(e),n.d(e,"default",function(){return T});var r=n(5),o=n.n(r),a=n(0),i=n.n(a),c=n(6),u=n.n(c),s=n(8),l=n.n(s),f=n(2),p=n(3),d=n(1),g=n(7),b=n(4);function y(t){return(y="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function h(){return(h=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t}).apply(this,arguments)}function m(t,e){if(null==t)return{};var n,r,o=function(t,e){if(null==t)return{};var n,r,o={},a=Object.keys(t);for(r=0;r<a.length;r++)n=a[r],e.indexOf(n)>=0||(o[n]=t[n]);return o}(t,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);for(r=0;r<a.length;r++)n=a[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(o[n]=t[n])}return o}function O(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var n=[],r=!0,o=!1,a=void 0;try{for(var i,c=t[Symbol.iterator]();!(r=(i=c.next()).done)&&(n.push(i.value),!e||n.length!==e);r=!0);}catch(t){o=!0,a=t}finally{try{r||null==c.return||c.return()}finally{if(o)throw a}}return n}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function v(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter(function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})),n.push.apply(n,r)}return n}function j(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?v(n,!0).forEach(function(e){E(t,e,n[e])}):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):v(n).forEach(function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))})}return t}function w(t){return(w=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function D(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function S(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function x(t,e,n){return e&&S(t.prototype,e),n&&S(t,n),t}function P(t,e){return(P=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function E(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var T=function(t){function e(t){var n,r,o;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),r=this,o=w(e).call(this,t),n=!o||"object"!==y(o)&&"function"!=typeof o?D(r):o,E(D(n),"onDragStart",function(t,e){if(Object(b.a)("Draggable: onDragStart: %j",e),!1===n.props.onStart(t,Object(p.d)(D(n),e)))return!1;n.setState({dragging:!0,dragged:!0})}),E(D(n),"onDrag",function(t,e){if(!n.state.dragging)return!1;Object(b.a)("Draggable: onDrag: %j",e);var r=Object(p.d)(D(n),e),o={x:r.x,y:r.y};if(n.props.bounds){var a=o.x,i=o.y;o.x+=n.state.slackX,o.y+=n.state.slackY;var c=O(Object(p.e)(D(n),o.x,o.y),2),u=c[0],s=c[1];o.x=u,o.y=s,o.slackX=n.state.slackX+(a-o.x),o.slackY=n.state.slackY+(i-o.y),r.x=o.x,r.y=o.y,r.deltaX=o.x-n.state.x,r.deltaY=o.y-n.state.y}if(!1===n.props.onDrag(t,r))return!1;n.setState(o)}),E(D(n),"onDragStop",function(t,e){if(!n.state.dragging)return!1;if(!1===n.props.onStop(t,Object(p.d)(D(n),e)))return!1;Object(b.a)("Draggable: onDragStop: %j",e);var r={dragging:!1,slackX:0,slackY:0};if(Boolean(n.props.position)){var o=n.props.position,a=o.x,i=o.y;r.x=a,r.y=i}n.setState(r)}),n.state={dragging:!1,dragged:!1,x:t.position?t.position.x:t.defaultPosition.x,y:t.position?t.position.y:t.defaultPosition.y,prevPropsPosition:j({},t.position),slackX:0,slackY:0,isElementSVG:!1},!t.position||t.onDrag||t.onStop||console.warn("A `position` was applied to this <Draggable>, without drag handlers. This will make this component effectively undraggable. Please attach `onDrag` or `onStop` handlers so you can adjust the `position` of this element."),n}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&P(t,e)}(e,o.a.Component),x(e,null,[{key:"getDerivedStateFromProps",value:function(t,e){var n=t.position,r=e.prevPropsPosition;return!n||r&&n.x===r.x&&n.y===r.y?null:(Object(b.a)("Draggable: getDerivedStateFromProps %j",{position:n,prevPropsPosition:r}),{x:n.x,y:n.y,prevPropsPosition:j({},n)})}}]),x(e,[{key:"componentDidMount",value:function(){void 0!==window.SVGElement&&u.a.findDOMNode(this)instanceof window.SVGElement&&this.setState({isElementSVG:!0})}},{key:"componentWillUnmount",value:function(){this.setState({dragging:!1})}},{key:"render",value:function(){var t,e=this.props,n=(e.axis,e.bounds,e.children),r=e.defaultPosition,a=e.defaultClassName,i=e.defaultClassNameDragging,c=e.defaultClassNameDragged,u=e.position,s=e.positionOffset,d=(e.scale,m(e,["axis","bounds","children","defaultPosition","defaultClassName","defaultClassNameDragging","defaultClassNameDragged","position","positionOffset","scale"])),b={},y=null,O=!Boolean(u)||this.state.dragging,v=u||r,w={x:Object(p.a)(this)&&O?this.state.x:v.x,y:Object(p.b)(this)&&O?this.state.y:v.y};this.state.isElementSVG?y=Object(f.d)(w,s):b=Object(f.c)(w,s);var D=l()(n.props.className||"",a,(E(t={},i,this.state.dragging),E(t,c,this.state.dragged),t));return o.a.createElement(g.default,h({},d,{onStart:this.onDragStart,onDrag:this.onDrag,onStop:this.onDragStop}),o.a.cloneElement(o.a.Children.only(n),{className:D,style:j({},n.props.style,{},b),transform:y}))}}]),e}();E(T,"displayName","Draggable"),E(T,"propTypes",j({},g.default.propTypes,{axis:i.a.oneOf(["both","x","y","none"]),bounds:i.a.oneOfType([i.a.shape({left:i.a.number,right:i.a.number,top:i.a.number,bottom:i.a.number}),i.a.string,i.a.oneOf([!1])]),defaultClassName:i.a.string,defaultClassNameDragging:i.a.string,defaultClassNameDragged:i.a.string,defaultPosition:i.a.shape({x:i.a.number,y:i.a.number}),positionOffset:i.a.shape({x:i.a.oneOfType([i.a.number,i.a.string]),y:i.a.oneOfType([i.a.number,i.a.string])}),position:i.a.shape({x:i.a.number,y:i.a.number}),className:d.a,style:d.a,transform:d.a})),E(T,"defaultProps",j({},g.default.defaultProps,{axis:"both",bounds:!1,defaultClassName:"react-draggable",defaultClassNameDragging:"react-draggable-dragging",defaultClassNameDragged:"react-draggable-dragged",defaultPosition:{x:0,y:0},position:null,scale:1}))},function(t,e,n){"use strict";var r=n(12);function o(){}function a(){}a.resetWarningCache=o,t.exports=function(){function t(t,e,n,o,a,i){if(i!==r){var c=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw c.name="Invariant Violation",c}}function e(){return t}t.isRequired=t;var n={array:t,bool:t,func:t,number:t,object:t,string:t,symbol:t,any:t,arrayOf:e,element:t,elementType:t,instanceOf:e,node:t,objectOf:e,oneOf:e,oneOfType:e,shape:e,exact:e,checkPropTypes:a,resetWarningCache:o};return n.PropTypes=n,n}},function(t,e,n){"use strict";t.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"}])});
//# sourceMappingURL=react-draggable.min.js.map

/***/ })

})
//# sourceMappingURL=[reportId].js.25c24e7b4d868811b7e9.hot-update.js.map