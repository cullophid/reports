webpackHotUpdate("static/development/pages/reports/[reportId].js",{

/***/ "./client/Report/Report.tsx":
/*!**********************************!*\
  !*** ./client/Report/Report.tsx ***!
  \**********************************/
/*! exports provided: ReportPage */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ReportPage", function() { return ReportPage; });
/* harmony import */ var _babel_runtime_corejs2_helpers_esm_taggedTemplateLiteral__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral */ "./node_modules/@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral.js");
/* harmony import */ var _babel_runtime_corejs2_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime-corejs2/helpers/esm/extends */ "./node_modules/@babel/runtime-corejs2/helpers/esm/extends.js");
/* harmony import */ var _babel_runtime_corejs2_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime-corejs2/helpers/esm/toConsumableArray */ "./node_modules/@babel/runtime-corejs2/helpers/esm/toConsumableArray.js");
/* harmony import */ var _babel_runtime_corejs2_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime-corejs2/helpers/esm/slicedToArray */ "./node_modules/@babel/runtime-corejs2/helpers/esm/slicedToArray.js");
/* harmony import */ var _babel_runtime_corejs2_core_js_set__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @babel/runtime-corejs2/core-js/set */ "./node_modules/@babel/runtime-corejs2/core-js/set.js");
/* harmony import */ var _babel_runtime_corejs2_core_js_set__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_corejs2_core_js_set__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _babel_runtime_corejs2_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @babel/runtime-corejs2/helpers/esm/objectSpread */ "./node_modules/@babel/runtime-corejs2/helpers/esm/objectSpread.js");
/* harmony import */ var _babel_runtime_corejs2_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @babel/runtime-corejs2/helpers/esm/objectWithoutProperties */ "./node_modules/@babel/runtime-corejs2/helpers/esm/objectWithoutProperties.js");
/* harmony import */ var _emotion_styled_base__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @emotion/styled-base */ "./node_modules/@emotion/styled-base/dist/styled-base.browser.esm.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var _emotion_core__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @emotion/core */ "./node_modules/@emotion/core/dist/core.browser.esm.js");
/* harmony import */ var _codegen_graphql__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../codegen/graphql */ "./client/codegen/graphql.ts");
/* harmony import */ var _components_ErrorBox__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../components/ErrorBox */ "./client/components/ErrorBox.tsx");
/* harmony import */ var _components_Crumbs__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../components/Crumbs */ "./client/components/Crumbs.tsx");
/* harmony import */ var _components_Header__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../components/Header */ "./client/components/Header.tsx");
/* harmony import */ var _components_Icon__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../components/Icon */ "./client/components/Icon.tsx");
/* harmony import */ var _components_Button__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../components/Button */ "./client/components/Button.tsx");
/* harmony import */ var _hooks_drag__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../hooks/drag */ "./client/hooks/drag.ts");
/* harmony import */ var _theme__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../theme */ "./client/theme.ts");
/* harmony import */ var cuid__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! cuid */ "./node_modules/cuid/index.js");
/* harmony import */ var cuid__WEBPACK_IMPORTED_MODULE_18___default = /*#__PURE__*/__webpack_require__.n(cuid__WEBPACK_IMPORTED_MODULE_18__);








var _jsxFileName = "/Users/andreasmoller/code/reports/client/Report/Report.tsx";

var __jsx = react__WEBPACK_IMPORTED_MODULE_8___default.a.createElement;


function _templateObject() {
  var data = Object(_babel_runtime_corejs2_helpers_esm_taggedTemplateLiteral__WEBPACK_IMPORTED_MODULE_0__["default"])(["\n  from {\n    opacity:0;\n  }\n  to {\n    opacity:1;\n  }\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}













var removeTypename = function removeTypename(report) {
  var __typename = report.__typename,
      slides = report.slides,
      reportData = Object(_babel_runtime_corejs2_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_6__["default"])(report, ["__typename", "slides"]);

  return Object(_babel_runtime_corejs2_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_5__["default"])({}, reportData, {
    slides: slides.map(function (_ref2) {
      var __typename = _ref2.__typename,
          charts = _ref2.charts,
          slideData = Object(_babel_runtime_corejs2_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_6__["default"])(_ref2, ["__typename", "charts"]);

      return Object(_babel_runtime_corejs2_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_5__["default"])({}, slideData, {
        charts: charts.map(function (_ref3) {
          var __typename = _ref3.__typename,
              chartData = Object(_babel_runtime_corejs2_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_6__["default"])(_ref3, ["__typename"]);

          return chartData;
        })
      });
    })
  });
};

var getModifiers = function getModifiers(e) {
  return new _babel_runtime_corejs2_core_js_set__WEBPACK_IMPORTED_MODULE_4___default.a([e.nativeEvent.metaKey && "meta", e.nativeEvent.ctrlKey && "ctrl", e.nativeEvent.altKey && "alt", e.nativeEvent.shiftKey && "shift"].filter(Boolean));
};

var ReportPage = function ReportPage(props) {
  var _useState = Object(react__WEBPACK_IMPORTED_MODULE_8__["useState"])(1),
      scale = _useState[0],
      setScale = _useState[1];

  var _useState2 = Object(react__WEBPACK_IMPORTED_MODULE_8__["useState"])("select"),
      tool = _useState2[0],
      setTool = _useState2[1];

  var _useState3 = Object(react__WEBPACK_IMPORTED_MODULE_8__["useState"])([]),
      selection = _useState3[0],
      setSelection = _useState3[1];

  var _useState4 = Object(react__WEBPACK_IMPORTED_MODULE_8__["useState"])([]),
      undoHistory = _useState4[0],
      setUndoHistory = _useState4[1];

  var _useState5 = Object(react__WEBPACK_IMPORTED_MODULE_8__["useState"])(0),
      undoHistoryIndex = _useState5[0],
      setUndoHistoryIndex = _useState5[1];

  var reportQuery = Object(_codegen_graphql__WEBPACK_IMPORTED_MODULE_10__["useReportGetQuery"])({
    variables: {
      id: props.id
    },
    onCompleted: function onCompleted(_ref4) {
      var report = _ref4.report;
      setScale(window.innerWidth * 0.8 / report.width);
    }
  });
  var report = reportQuery.data && reportQuery.data.report;
  Object(react__WEBPACK_IMPORTED_MODULE_8__["useEffect"])(function () {
    if (report && undoHistory.length === 0) {
      setUndoHistory([report]);
    }
  }, [report]);

  var _useReportUpdateMutat = Object(_codegen_graphql__WEBPACK_IMPORTED_MODULE_10__["useReportUpdateMutation"])(),
      _useReportUpdateMutat2 = Object(_babel_runtime_corejs2_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_3__["default"])(_useReportUpdateMutat, 2),
      _updateReport = _useReportUpdateMutat2[0],
      updateReportQuery = _useReportUpdateMutat2[1];

  var updateReport = function updateReport(report) {
    var isUndo = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

    if (!isUndo) {
      setUndoHistory([].concat(Object(_babel_runtime_corejs2_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_2__["default"])(undoHistory.slice(0, undoHistoryIndex + 1)), [report]));
      setUndoHistoryIndex(undoHistoryIndex + 1);
    }

    reportQuery.client.writeQuery({
      query: _codegen_graphql__WEBPACK_IMPORTED_MODULE_10__["ReportGetDocument"],
      variables: {
        id: report.id
      },
      data: {
        report: report
      }
    });
    return _updateReport({
      variables: {
        report: removeTypename(report)
      }
    });
  };

  Object(react__WEBPACK_IMPORTED_MODULE_8__["useEffect"])(function () {
    var handler = function handler() {
      if (report) {
        setScale(window.innerWidth * 0.8 / report.width);
      }
    };

    window.addEventListener("resize", handler);
    return function () {
      return window.removeEventListener("resize", handler);
    };
  }, [report]);
  var selectedSlide = report && (report.slides.find(function (s) {
    return s.id === props.slide;
  }) || report.slides[0]);

  var getDragBox = function getDragBox(pos, origin) {
    return {
      x: Math.min(pos.x, origin.x) / scale,
      y: Math.min(pos.y, origin.y) / scale,
      width: Math.abs(pos.x - origin.x) / scale,
      height: Math.abs(pos.y - origin.y) / scale
    };
  };

  var _useMouseDrag = Object(_hooks_drag__WEBPACK_IMPORTED_MODULE_16__["useMouseDrag"])({
    onDragEnd: function onDragEnd(pos, origin) {
      var box = getDragBox(pos, origin);

      switch (tool) {
        case "insert_chart":
          {
            var newChart = {
              id: cuid__WEBPACK_IMPORTED_MODULE_18___default()(),
              x: Math.round(box.x),
              y: Math.round(box.y),
              width: Math.round(box.width),
              height: Math.round(box.height),
              __typename: "Chart"
            };

            var newReport = Object(_babel_runtime_corejs2_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_5__["default"])({}, report, {
              slides: report.slides.map(function (slide) {
                if (slide.id === selectedSlide.id) {
                  return Object(_babel_runtime_corejs2_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_5__["default"])({}, slide, {
                    charts: [].concat(Object(_babel_runtime_corejs2_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_2__["default"])(slide.charts), [newChart])
                  });
                } else {
                  return slide;
                }
              })
            });

            updateReport(newReport);
            setTool("select");
            setSelection([newChart]);
          }
      }
    }
  }),
      dragHandlers = _useMouseDrag.dragHandlers,
      dragPos = _useMouseDrag.dragPos,
      dragOrigin = _useMouseDrag.dragOrigin,
      isDragging = _useMouseDrag.isDragging,
      parentRef = _useMouseDrag.parentRef;

  console.log({
    undoHistory: undoHistory
  });
  return Object(_emotion_core__WEBPACK_IMPORTED_MODULE_9__["jsx"])(Layout, {
    tabIndex: -1,
    onKeyDown: function onKeyDown(e) {
      var modifiers = getModifiers(e);

      switch (e.key) {
        case "Escape":
          setTool("select");

          if (tool === "select") {
            setSelection([]);
          }

          return e.preventDefault();

        case "c":
          if (modifiers.size === 0) {
            setTool("insert_chart");
            return e.preventDefault();
          }

        case "i":
          if (modifiers.size === 0) {
            setTool("insert_image");
            return e.preventDefault();
          }

        case "t":
          if (modifiers.size === 0) {
            setTool("insert_text");
            return e.preventDefault();
          }

        case "Backspace":
          {
            updateReport(Object(_babel_runtime_corejs2_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_5__["default"])({}, report, {
              slides: report.slides.map(function (slide) {
                return Object(_babel_runtime_corejs2_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_5__["default"])({}, slide, {
                  charts: slide.charts.filter(function (chart) {
                    return selection.some(function (selection) {
                      return selection.id === chart.id;
                    }) === false;
                  })
                });
              })
            }));
          }

        case "z":
          if (modifiers.has("meta") && undoHistory.length > 1) {
            var newIndex = undoHistoryIndex - 1;
            updateReport(undoHistory[newIndex], true);
            setUndoHistoryIndex(newIndex);
          }

      }
    },
    __source: {
      fileName: _jsxFileName,
      lineNumber: 162
    },
    __self: this
  }, (reportQuery.loading || updateReportQuery.loading) && Object(_emotion_core__WEBPACK_IMPORTED_MODULE_9__["jsx"])(LoadingIndicator, {
    __source: {
      fileName: _jsxFileName,
      lineNumber: 204
    },
    __self: this
  }), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_9__["jsx"])(_components_Header__WEBPACK_IMPORTED_MODULE_13__["Header"], {
    __source: {
      fileName: _jsxFileName,
      lineNumber: 205
    },
    __self: this
  }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_9__["jsx"])(_components_Header__WEBPACK_IMPORTED_MODULE_13__["HeaderSection"], {
    __source: {
      fileName: _jsxFileName,
      lineNumber: 206
    },
    __self: this
  }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_9__["jsx"])(_components_Crumbs__WEBPACK_IMPORTED_MODULE_12__["Crumbs"], {
    __source: {
      fileName: _jsxFileName,
      lineNumber: 207
    },
    __self: this
  }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_9__["jsx"])(_components_Crumbs__WEBPACK_IMPORTED_MODULE_12__["CrumbLink"], {
    href: "/",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 208
    },
    __self: this
  }, "Home"), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_9__["jsx"])(_components_Crumbs__WEBPACK_IMPORTED_MODULE_12__["CrumbLink"], {
    href: "/",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 209
    },
    __self: this
  }, "Reports"), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_9__["jsx"])(_components_Crumbs__WEBPACK_IMPORTED_MODULE_12__["CrumbTitle"], {
    __source: {
      fileName: _jsxFileName,
      lineNumber: 210
    },
    __self: this
  }, report ? report.title : "...")), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_9__["jsx"])(NewElements, {
    __source: {
      fileName: _jsxFileName,
      lineNumber: 212
    },
    __self: this
  }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_9__["jsx"])(_components_Button__WEBPACK_IMPORTED_MODULE_15__["FlatButton"], {
    name: "insert_chart",
    onClick: function onClick() {
      return setTool("insert_chart");
    },
    active: tool === "insert_chart",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 213
    },
    __self: this
  }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_9__["jsx"])(_components_Icon__WEBPACK_IMPORTED_MODULE_14__["Icon"], {
    icon: "insert_chart",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 214
    },
    __self: this
  })), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_9__["jsx"])(_components_Button__WEBPACK_IMPORTED_MODULE_15__["FlatButton"], {
    name: "insert_image",
    onClick: function onClick() {
      return setTool("insert_image");
    },
    active: tool === "insert_image",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 216
    },
    __self: this
  }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_9__["jsx"])(_components_Icon__WEBPACK_IMPORTED_MODULE_14__["Icon"], {
    icon: "insert_photo",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 216
    },
    __self: this
  })), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_9__["jsx"])(_components_Button__WEBPACK_IMPORTED_MODULE_15__["FlatButton"], {
    name: "insert_text",
    onClick: function onClick() {
      return setTool("insert_text");
    },
    active: tool === "insert_text",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 217
    },
    __self: this
  }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_9__["jsx"])(_components_Icon__WEBPACK_IMPORTED_MODULE_14__["Icon"], {
    icon: "insert_text",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 217
    },
    __self: this
  }))))), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_9__["jsx"])("div", {
    style: {
      position: "absolute",
      bottom: 16,
      right: 16
    },
    __source: {
      fileName: _jsxFileName,
      lineNumber: 221
    },
    __self: this
  }, scale), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_9__["jsx"])(Stage, {
    tool: tool,
    scale: scale,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 222
    },
    __self: this
  }, selectedSlide && Object(_emotion_core__WEBPACK_IMPORTED_MODULE_9__["jsx"])(Slide, Object(_babel_runtime_corejs2_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__["default"])({
    ref: parentRef
  }, dragHandlers, {
    width: report.width,
    height: report.height,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 226
    },
    __self: this
  }), ["insert_chart", "insert_image", "insert_text"].includes(tool) && isDragging && Object(_emotion_core__WEBPACK_IMPORTED_MODULE_9__["jsx"])(DragBox, Object(_babel_runtime_corejs2_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__["default"])({}, getDragBox(dragPos, dragOrigin), {
    __source: {
      fileName: _jsxFileName,
      lineNumber: 228
    },
    __self: this
  })), selectedSlide.charts.map(function (chart) {
    return Object(_emotion_core__WEBPACK_IMPORTED_MODULE_9__["jsx"])(Chart, Object(_babel_runtime_corejs2_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__["default"])({
      key: chart.id,
      selected: selection.some(function (s) {
        return s.id === chart.id;
      })
    }, chart, {
      onClick: function onClick(e) {
        if (tool === "select") {
          setSelection(e.nativeEvent.shiftKey ? [].concat(Object(_babel_runtime_corejs2_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_2__["default"])(selection), [chart]) : [chart]);
        }
      },
      __source: {
        fileName: _jsxFileName,
        lineNumber: 233
      },
      __self: this
    }));
  })), report && !selectedSlide && Object(_emotion_core__WEBPACK_IMPORTED_MODULE_9__["jsx"])(Center, {
    __source: {
      fileName: _jsxFileName,
      lineNumber: 243
    },
    __self: this
  }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_9__["jsx"])(_components_Button__WEBPACK_IMPORTED_MODULE_15__["Button"], {
    name: "create slide",
    onClick: function onClick() {
      updateReport(Object(_babel_runtime_corejs2_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_5__["default"])({}, report, {
        slides: [].concat(Object(_babel_runtime_corejs2_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_2__["default"])(report.slides), [{
          id: cuid__WEBPACK_IMPORTED_MODULE_18___default()(),
          charts: []
        }])
      }));
    },
    __source: {
      fileName: _jsxFileName,
      lineNumber: 244
    },
    __self: this
  }, "Create You first Slide")), reportQuery.error && Object(_emotion_core__WEBPACK_IMPORTED_MODULE_9__["jsx"])(_components_ErrorBox__WEBPACK_IMPORTED_MODULE_11__["ErrorBox"], {
    error: reportQuery.error,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 257
    },
    __self: this
  })));
};

var Chart = Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_7__["default"])("div", {
  target: "e1nne1bm0",
  label: "Chart"
})("position:absolute;left:", function (p) {
  return p.x;
}, "px;top:", function (p) {
  return p.y;
}, "px;width:", function (p) {
  return p.width;
}, "px;height:", function (p) {
  return p.height;
}, "px;background:#f0f0f0;border:1px solid #dedede;", function (p) {
  return p.selected &&
  /*#__PURE__*/

  /*#__PURE__*/
  Object(_emotion_core__WEBPACK_IMPORTED_MODULE_9__["css"])("border:1px dashed ", _theme__WEBPACK_IMPORTED_MODULE_17__["colors"].primary, ";label:Chart;" + ( false ? undefined : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9hbmRyZWFzbW9sbGVyL2NvZGUvcmVwb3J0cy9jbGllbnQvUmVwb3J0L1JlcG9ydC50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBK1EwQiIsImZpbGUiOiIvVXNlcnMvYW5kcmVhc21vbGxlci9jb2RlL3JlcG9ydHMvY2xpZW50L1JlcG9ydC9SZXBvcnQudHN4Iiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgeyB1c2VSZXBvcnRHZXRRdWVyeSwgdXNlUmVwb3J0VXBkYXRlTXV0YXRpb24sIENoYXJ0RnJhZ21lbnQsIFJlcG9ydFVwZGF0ZU11dGF0aW9uVmFyaWFibGVzLCBSZXBvcnRGcmFnbWVudCwgUmVwb3J0R2V0RG9jdW1lbnQgfSBmcm9tIFwiLi4vY29kZWdlbi9ncmFwaHFsXCI7XG5pbXBvcnQgc3R5bGVkIGZyb20gXCJAZW1vdGlvbi9zdHlsZWRcIjtcbmltcG9ydCB7IEVycm9yQm94IH0gZnJvbSBcIi4uL2NvbXBvbmVudHMvRXJyb3JCb3hcIjtcbmltcG9ydCB7IENydW1icywgQ3J1bWJUaXRsZSwgQ3J1bWJMaW5rIH0gZnJvbSBcIi4uL2NvbXBvbmVudHMvQ3J1bWJzXCI7XG5pbXBvcnQgeyBIZWFkZXIsIEhlYWRlclNlY3Rpb24gfSBmcm9tIFwiLi4vY29tcG9uZW50cy9IZWFkZXJcIjtcbmltcG9ydCB7IEljb24gfSBmcm9tIFwiLi4vY29tcG9uZW50cy9JY29uXCI7XG5pbXBvcnQgeyBGbGF0QnV0dG9uLCBCdXR0b24gfSBmcm9tIFwiLi4vY29tcG9uZW50cy9CdXR0b25cIjtcbmltcG9ydCB7IHVzZVN0YXRlLCBLZXlib2FyZEV2ZW50LCB1c2VFZmZlY3QgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IGNzcywga2V5ZnJhbWVzIH0gZnJvbSBcIkBlbW90aW9uL2NvcmVcIjtcbmltcG9ydCB7IHVzZU1vdXNlRHJhZywgUG9zIH0gZnJvbSBcIi4uL2hvb2tzL2RyYWdcIjtcbmltcG9ydCB7IGNvbG9ycyB9IGZyb20gXCIuLi90aGVtZVwiO1xuaW1wb3J0IGN1aWQgZnJvbSBcImN1aWRcIlxuXG50eXBlIFRvb2wgPVxuICB8IFwiaW5zZXJ0X2NoYXJ0XCJcbiAgfCBcImluc2VydF9pbWFnZVwiXG4gIHwgXCJpbnNlcnRfdGV4dFwiXG4gIHwgXCJzZWxlY3RcIlxuXG5cbnR5cGUgU2VsZWN0aW9uID0gQ2hhcnRGcmFnbWVudFxuXG5cbmNvbnN0IHJlbW92ZVR5cGVuYW1lID0gKHJlcG9ydDogUmVwb3J0RnJhZ21lbnQpOiBSZXBvcnRVcGRhdGVNdXRhdGlvblZhcmlhYmxlc1tcInJlcG9ydFwiXSA9PiB7XG4gIGNvbnN0IHsgX190eXBlbmFtZSwgc2xpZGVzLCAuLi5yZXBvcnREYXRhIH0gPSByZXBvcnQ7XG4gIHJldHVybiB7XG4gICAgLi4ucmVwb3J0RGF0YSxcbiAgICBzbGlkZXM6IHNsaWRlcy5tYXAoKHsgX190eXBlbmFtZSwgY2hhcnRzLCAuLi5zbGlkZURhdGEgfSkgPT4ge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4uc2xpZGVEYXRhLFxuICAgICAgICBjaGFydHM6IGNoYXJ0cy5tYXAoKHsgX190eXBlbmFtZSwgLi4uY2hhcnREYXRhIH0pID0+IHtcbiAgICAgICAgICByZXR1cm4gY2hhcnREYXRhXG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgfSlcbiAgfVxufVxuXG5jb25zdCBnZXRNb2RpZmllcnMgPSAoZTogS2V5Ym9hcmRFdmVudCkgPT5cbiAgbmV3IFNldChbXG4gICAgZS5uYXRpdmVFdmVudC5tZXRhS2V5ICYmIFwibWV0YVwiLFxuICAgIGUubmF0aXZlRXZlbnQuY3RybEtleSAmJiBcImN0cmxcIixcbiAgICBlLm5hdGl2ZUV2ZW50LmFsdEtleSAmJiBcImFsdFwiLFxuICAgIGUubmF0aXZlRXZlbnQuc2hpZnRLZXkgJiYgXCJzaGlmdFwiLFxuICBdLmZpbHRlcihCb29sZWFuKVxuICApXG5cbmV4cG9ydCBjb25zdCBSZXBvcnRQYWdlID0gKHByb3BzOiB7IGlkOiBzdHJpbmcsIHNsaWRlPzogc3RyaW5nIH0pID0+IHtcbiAgY29uc3QgW3NjYWxlLCBzZXRTY2FsZV0gPSB1c2VTdGF0ZSgxKVxuXG5cbiAgY29uc3QgW3Rvb2wsIHNldFRvb2xdID0gdXNlU3RhdGU8VG9vbD4oXCJzZWxlY3RcIilcbiAgY29uc3QgW3NlbGVjdGlvbiwgc2V0U2VsZWN0aW9uXSA9IHVzZVN0YXRlPFNlbGVjdGlvbltdPihbXSlcblxuICBjb25zdCBbdW5kb0hpc3RvcnksIHNldFVuZG9IaXN0b3J5XSA9IHVzZVN0YXRlPFJlcG9ydFVwZGF0ZU11dGF0aW9uVmFyaWFibGVzW1wicmVwb3J0XCJdW10+KFtdKVxuICBjb25zdCBbdW5kb0hpc3RvcnlJbmRleCwgc2V0VW5kb0hpc3RvcnlJbmRleF0gPSB1c2VTdGF0ZTxudW1iZXI+KDApXG5cbiAgY29uc3QgcmVwb3J0UXVlcnkgPSB1c2VSZXBvcnRHZXRRdWVyeSh7XG4gICAgdmFyaWFibGVzOiB7XG4gICAgICBpZDogcHJvcHMuaWRcbiAgICB9LFxuICAgIG9uQ29tcGxldGVkOiAoeyByZXBvcnQgfSkgPT4ge1xuICAgICAgc2V0U2NhbGUod2luZG93LmlubmVyV2lkdGggKiAwLjggLyByZXBvcnQud2lkdGgpXG4gICAgfVxuICB9KVxuXG4gIGNvbnN0IHJlcG9ydCA9IHJlcG9ydFF1ZXJ5LmRhdGEgJiYgcmVwb3J0UXVlcnkuZGF0YS5yZXBvcnRcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChyZXBvcnQgJiYgdW5kb0hpc3RvcnkubGVuZ3RoID09PSAwKSB7XG4gICAgICBzZXRVbmRvSGlzdG9yeShbcmVwb3J0XSlcbiAgICB9XG4gIH0sIFtyZXBvcnRdKVxuXG4gIGNvbnN0IFtfdXBkYXRlUmVwb3J0LCB1cGRhdGVSZXBvcnRRdWVyeV0gPSB1c2VSZXBvcnRVcGRhdGVNdXRhdGlvbigpXG5cbiAgY29uc3QgdXBkYXRlUmVwb3J0ID0gKHJlcG9ydDogUmVwb3J0VXBkYXRlTXV0YXRpb25WYXJpYWJsZXNbXCJyZXBvcnRcIl0sIGlzVW5kbyA9IGZhbHNlKSA9PiB7XG4gICAgaWYgKCFpc1VuZG8pIHtcbiAgICAgIHNldFVuZG9IaXN0b3J5KFsuLi51bmRvSGlzdG9yeS5zbGljZSgwLCB1bmRvSGlzdG9yeUluZGV4ICsgMSksIHJlcG9ydF0pXG4gICAgICBzZXRVbmRvSGlzdG9yeUluZGV4KHVuZG9IaXN0b3J5SW5kZXggKyAxKVxuXG4gICAgfVxuICAgIHJlcG9ydFF1ZXJ5LmNsaWVudC53cml0ZVF1ZXJ5KHtcbiAgICAgIHF1ZXJ5OiBSZXBvcnRHZXREb2N1bWVudCxcbiAgICAgIHZhcmlhYmxlczogeyBpZDogcmVwb3J0LmlkIH0sXG4gICAgICBkYXRhOiB7XG4gICAgICAgIHJlcG9ydFxuICAgICAgfVxuICAgIH0pXG4gICAgcmV0dXJuIF91cGRhdGVSZXBvcnQoe1xuICAgICAgdmFyaWFibGVzOiB7XG4gICAgICAgIHJlcG9ydDogcmVtb3ZlVHlwZW5hbWUocmVwb3J0IGFzIFJlcG9ydEZyYWdtZW50KVxuICAgICAgfVxuICAgIH0pXG5cbiAgfVxuXG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCBoYW5kbGVyID0gKCkgPT4ge1xuICAgICAgaWYgKHJlcG9ydCkge1xuXG4gICAgICAgIHNldFNjYWxlKHdpbmRvdy5pbm5lcldpZHRoICogMC44IC8gcmVwb3J0LndpZHRoKVxuICAgICAgfVxuICAgIH1cbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLCBoYW5kbGVyKTtcbiAgICByZXR1cm4gKCkgPT4gd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIiwgaGFuZGxlcilcbiAgfSwgW3JlcG9ydF0pXG5cbiAgY29uc3Qgc2VsZWN0ZWRTbGlkZSA9IHJlcG9ydCAmJiAocmVwb3J0LnNsaWRlcy5maW5kKHMgPT4gcy5pZCA9PT0gcHJvcHMuc2xpZGUpIHx8IHJlcG9ydC5zbGlkZXNbMF0pO1xuXG4gIGNvbnN0IGdldERyYWdCb3ggPSAocG9zOiBQb3MsIG9yaWdpbjogUG9zKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHg6IE1hdGgubWluKHBvcy54LCBvcmlnaW4ueCkgLyBzY2FsZSxcbiAgICAgIHk6IE1hdGgubWluKHBvcy55LCBvcmlnaW4ueSkgLyBzY2FsZSxcbiAgICAgIHdpZHRoOiBNYXRoLmFicyhwb3MueCAtIG9yaWdpbi54KSAvIHNjYWxlLFxuICAgICAgaGVpZ2h0OiBNYXRoLmFicyhwb3MueSAtIG9yaWdpbi55KSAvIHNjYWxlLFxuICAgIH1cbiAgfVxuXG4gIGNvbnN0IHsgZHJhZ0hhbmRsZXJzLCBkcmFnUG9zLCBkcmFnT3JpZ2luLCBpc0RyYWdnaW5nLCBwYXJlbnRSZWYgfSA9IHVzZU1vdXNlRHJhZyh7XG4gICAgb25EcmFnRW5kOiAocG9zLCBvcmlnaW4pID0+IHtcbiAgICAgIGNvbnN0IGJveCA9IGdldERyYWdCb3gocG9zLCBvcmlnaW4pO1xuICAgICAgc3dpdGNoICh0b29sKSB7XG4gICAgICAgIGNhc2UgXCJpbnNlcnRfY2hhcnRcIjoge1xuXG4gICAgICAgICAgY29uc3QgbmV3Q2hhcnQgPSB7XG4gICAgICAgICAgICBpZDogY3VpZCgpLFxuICAgICAgICAgICAgeDogTWF0aC5yb3VuZChib3gueCksXG4gICAgICAgICAgICB5OiBNYXRoLnJvdW5kKGJveC55KSxcbiAgICAgICAgICAgIHdpZHRoOiBNYXRoLnJvdW5kKGJveC53aWR0aCksXG4gICAgICAgICAgICBoZWlnaHQ6IE1hdGgucm91bmQoYm94LmhlaWdodCksXG4gICAgICAgICAgICBfX3R5cGVuYW1lOiBcIkNoYXJ0XCIgYXMgXCJDaGFydFwiXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29uc3QgbmV3UmVwb3J0ID0ge1xuICAgICAgICAgICAgLi4ucmVwb3J0LFxuICAgICAgICAgICAgc2xpZGVzOiByZXBvcnQuc2xpZGVzLm1hcChzbGlkZSA9PiB7XG4gICAgICAgICAgICAgIGlmIChzbGlkZS5pZCA9PT0gc2VsZWN0ZWRTbGlkZS5pZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAuLi5zbGlkZSxcbiAgICAgICAgICAgICAgICAgIGNoYXJ0czogWy4uLnNsaWRlLmNoYXJ0cywgbmV3Q2hhcnRdXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBzbGlkZVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH1cbiAgICAgICAgICB1cGRhdGVSZXBvcnQobmV3UmVwb3J0KVxuICAgICAgICAgIHNldFRvb2woXCJzZWxlY3RcIik7XG4gICAgICAgICAgc2V0U2VsZWN0aW9uKFtuZXdDaGFydF0pXG4gICAgICAgIH1cblxuICAgICAgfVxuICAgIH1cbiAgfSlcblxuICBjb25zb2xlLmxvZyh7IHVuZG9IaXN0b3J5IH0pXG5cbiAgcmV0dXJuIChcbiAgICA8TGF5b3V0IHRhYkluZGV4PXstMX0gb25LZXlEb3duPXtlID0+IHtcbiAgICAgIGNvbnN0IG1vZGlmaWVycyA9IGdldE1vZGlmaWVycyhlKTtcbiAgICAgIHN3aXRjaCAoZS5rZXkpIHtcbiAgICAgICAgY2FzZSBcIkVzY2FwZVwiOlxuICAgICAgICAgIHNldFRvb2woXCJzZWxlY3RcIilcbiAgICAgICAgICBpZiAodG9vbCA9PT0gXCJzZWxlY3RcIikge1xuICAgICAgICAgICAgc2V0U2VsZWN0aW9uKFtdKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgY2FzZSBcImNcIjpcbiAgICAgICAgICBpZiAobW9kaWZpZXJzLnNpemUgPT09IDApIHtcbiAgICAgICAgICAgIHNldFRvb2woXCJpbnNlcnRfY2hhcnRcIilcbiAgICAgICAgICAgIHJldHVybiBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgfVxuICAgICAgICBjYXNlIFwiaVwiOlxuICAgICAgICAgIGlmIChtb2RpZmllcnMuc2l6ZSA9PT0gMCkge1xuICAgICAgICAgICAgc2V0VG9vbChcImluc2VydF9pbWFnZVwiKVxuICAgICAgICAgICAgcmV0dXJuIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICB9XG4gICAgICAgIGNhc2UgXCJ0XCI6XG4gICAgICAgICAgaWYgKG1vZGlmaWVycy5zaXplID09PSAwKSB7XG4gICAgICAgICAgICBzZXRUb29sKFwiaW5zZXJ0X3RleHRcIilcbiAgICAgICAgICAgIHJldHVybiBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgfVxuICAgICAgICBjYXNlIFwiQmFja3NwYWNlXCI6IHtcbiAgICAgICAgICB1cGRhdGVSZXBvcnQoe1xuICAgICAgICAgICAgLi4ucmVwb3J0LFxuICAgICAgICAgICAgc2xpZGVzOiByZXBvcnQuc2xpZGVzLm1hcChzbGlkZSA9PiAoe1xuICAgICAgICAgICAgICAuLi5zbGlkZSxcbiAgICAgICAgICAgICAgY2hhcnRzOiBzbGlkZS5jaGFydHMuZmlsdGVyKGNoYXJ0ID0+IHNlbGVjdGlvbi5zb21lKHNlbGVjdGlvbiA9PiBzZWxlY3Rpb24uaWQgPT09IGNoYXJ0LmlkKSA9PT0gZmFsc2UpXG4gICAgICAgICAgICB9KSlcbiAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICAgIGNhc2UgXCJ6XCI6XG4gICAgICAgICAgaWYgKG1vZGlmaWVycy5oYXMoXCJtZXRhXCIpICYmIHVuZG9IaXN0b3J5Lmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgIGNvbnN0IG5ld0luZGV4ID0gdW5kb0hpc3RvcnlJbmRleCAtIDE7XG4gICAgICAgICAgICB1cGRhdGVSZXBvcnQodW5kb0hpc3RvcnlbbmV3SW5kZXhdLCB0cnVlKTtcbiAgICAgICAgICAgIHNldFVuZG9IaXN0b3J5SW5kZXgobmV3SW5kZXgpXG4gICAgICAgICAgfVxuXG4gICAgICB9XG4gICAgfX0+XG4gICAgICB7KHJlcG9ydFF1ZXJ5LmxvYWRpbmcgfHwgdXBkYXRlUmVwb3J0UXVlcnkubG9hZGluZykgJiYgPExvYWRpbmdJbmRpY2F0b3IgLz59XG4gICAgICA8SGVhZGVyPlxuICAgICAgICA8SGVhZGVyU2VjdGlvbj5cbiAgICAgICAgICA8Q3J1bWJzPlxuICAgICAgICAgICAgPENydW1iTGluayBocmVmPVwiL1wiPkhvbWU8L0NydW1iTGluaz5cbiAgICAgICAgICAgIDxDcnVtYkxpbmsgaHJlZj1cIi9cIj5SZXBvcnRzPC9DcnVtYkxpbms+XG4gICAgICAgICAgICA8Q3J1bWJUaXRsZT57cmVwb3J0ID8gcmVwb3J0LnRpdGxlIDogXCIuLi5cIn08L0NydW1iVGl0bGU+XG4gICAgICAgICAgPC9DcnVtYnMgPlxuICAgICAgICAgIDxOZXdFbGVtZW50cz5cbiAgICAgICAgICAgIDxGbGF0QnV0dG9uIG5hbWU9XCJpbnNlcnRfY2hhcnRcIiBvbkNsaWNrPXsoKSA9PiBzZXRUb29sKFwiaW5zZXJ0X2NoYXJ0XCIpfSBhY3RpdmU9e3Rvb2wgPT09IFwiaW5zZXJ0X2NoYXJ0XCJ9PlxuICAgICAgICAgICAgICA8SWNvbiBpY29uPVwiaW5zZXJ0X2NoYXJ0XCIgLz5cbiAgICAgICAgICAgIDwvRmxhdEJ1dHRvbj5cbiAgICAgICAgICAgIDxGbGF0QnV0dG9uIG5hbWU9XCJpbnNlcnRfaW1hZ2VcIiBvbkNsaWNrPXsoKSA9PiBzZXRUb29sKFwiaW5zZXJ0X2ltYWdlXCIpfSBhY3RpdmU9e3Rvb2wgPT09IFwiaW5zZXJ0X2ltYWdlXCJ9PjxJY29uIGljb249XCJpbnNlcnRfcGhvdG9cIiAvPjwvRmxhdEJ1dHRvbj5cbiAgICAgICAgICAgIDxGbGF0QnV0dG9uIG5hbWU9XCJpbnNlcnRfdGV4dFwiIG9uQ2xpY2s9eygpID0+IHNldFRvb2woXCJpbnNlcnRfdGV4dFwiKX0gYWN0aXZlPXt0b29sID09PSBcImluc2VydF90ZXh0XCJ9PjxJY29uIGljb249XCJpbnNlcnRfdGV4dFwiIC8+PC9GbGF0QnV0dG9uPlxuICAgICAgICAgIDwvTmV3RWxlbWVudHM+XG4gICAgICAgIDwvSGVhZGVyU2VjdGlvbj5cbiAgICAgIDwvSGVhZGVyID5cbiAgICAgIDxkaXYgc3R5bGU9e3sgcG9zaXRpb246IFwiYWJzb2x1dGVcIiwgYm90dG9tOiAxNiwgcmlnaHQ6IDE2IH19PntzY2FsZX08L2Rpdj5cbiAgICAgIDxTdGFnZSB0b29sPXt0b29sfSBzY2FsZT17c2NhbGV9PlxuXG4gICAgICAgIHtcbiAgICAgICAgICBzZWxlY3RlZFNsaWRlICYmXG4gICAgICAgICAgPFNsaWRlIHJlZj17cGFyZW50UmVmfSB7Li4uZHJhZ0hhbmRsZXJzfSB3aWR0aD17cmVwb3J0LndpZHRofSBoZWlnaHQ9e3JlcG9ydC5oZWlnaHR9PlxuICAgICAgICAgICAge1tcImluc2VydF9jaGFydFwiLCBcImluc2VydF9pbWFnZVwiLCBcImluc2VydF90ZXh0XCJdLmluY2x1ZGVzKHRvb2wpICYmIGlzRHJhZ2dpbmcgJiZcbiAgICAgICAgICAgICAgPERyYWdCb3ggey4uLmdldERyYWdCb3goZHJhZ1BvcywgZHJhZ09yaWdpbil9IC8+XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB7c2VsZWN0ZWRTbGlkZS5jaGFydHMubWFwKGNoYXJ0ID0+IHtcbiAgICAgICAgICAgICAgcmV0dXJuIChcblxuICAgICAgICAgICAgICAgIDxDaGFydCBrZXk9e2NoYXJ0LmlkfSBzZWxlY3RlZD17c2VsZWN0aW9uLnNvbWUocyA9PiBzLmlkID09PSBjaGFydC5pZCl9IHsuLi5jaGFydH0gb25DbGljaz17ZSA9PiB7XG4gICAgICAgICAgICAgICAgICBpZiAodG9vbCA9PT0gXCJzZWxlY3RcIikge1xuICAgICAgICAgICAgICAgICAgICBzZXRTZWxlY3Rpb24oZS5uYXRpdmVFdmVudC5zaGlmdEtleSA/IFsuLi5zZWxlY3Rpb24sIGNoYXJ0XSA6IFtjaGFydF0pO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH19IC8+XG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgIH0pfVxuICAgICAgICAgIDwvU2xpZGU+XG4gICAgICAgIH1cbiAgICAgICAge3JlcG9ydCAmJiAhc2VsZWN0ZWRTbGlkZSAmJlxuICAgICAgICAgIDxDZW50ZXI+XG4gICAgICAgICAgICA8QnV0dG9uIG5hbWU9XCJjcmVhdGUgc2xpZGVcIiBvbkNsaWNrPXsoKSA9PiB7XG4gICAgICAgICAgICAgIHVwZGF0ZVJlcG9ydCh7XG4gICAgICAgICAgICAgICAgLi4ucmVwb3J0LFxuICAgICAgICAgICAgICAgIHNsaWRlczogW1xuICAgICAgICAgICAgICAgICAgLi4ucmVwb3J0LnNsaWRlcyxcbiAgICAgICAgICAgICAgICAgIHsgaWQ6IGN1aWQoKSwgY2hhcnRzOiBbXSB9XG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfX0+XG4gICAgICAgICAgICAgIENyZWF0ZSBZb3UgZmlyc3QgU2xpZGVcbiAgICAgICAgICAgIDwvQnV0dG9uPlxuICAgICAgICAgIDwvQ2VudGVyPlxuICAgICAgICB9XG4gICAgICAgIHtyZXBvcnRRdWVyeS5lcnJvciAmJiA8RXJyb3JCb3ggZXJyb3I9e3JlcG9ydFF1ZXJ5LmVycm9yfSAvPn1cbiAgICAgIDwvU3RhZ2U+XG5cbiAgICA8L0xheW91dCA+XG4gIClcbn1cblxuY29uc3QgQ2hhcnQgPSBzdHlsZWQuZGl2PENoYXJ0RnJhZ21lbnQgJiB7IHNlbGVjdGVkOiBib29sZWFuIH0+YFxuICBwb3NpdGlvbjphYnNvbHV0ZTtcbiAgbGVmdDogJHtwID0+IHAueH1weDtcbiAgdG9wOiAke3AgPT4gcC55fXB4O1xuICB3aWR0aDogJHtwID0+IHAud2lkdGh9cHg7XG4gIGhlaWdodDogJHtwID0+IHAuaGVpZ2h0fXB4O1xuICBiYWNrZ3JvdW5kOiAjZjBmMGYwO1xuICBib3JkZXI6IDFweCBzb2xpZCAjZGVkZWRlO1xuICAke3AgPT4gcC5zZWxlY3RlZCAmJiBjc3NgYm9yZGVyOiAxcHggZGFzaGVkICR7Y29sb3JzLnByaW1hcnl9O2B9O1xuYFxuXG5cbmNvbnN0IENlbnRlciA9IHN0eWxlZC5kaXZgXG4gIGhlaWdodDoxMDAlO1xuICBkaXNwbGF5OmdyaWQ7XG4gIHBsYWNlLWNvbnRlbnQ6Y2VudGVyIGNlbnRlcjtcbiAgYFxuXG5cbnR5cGUgRHJhZ0JveFByb3BzID0ge1xuICB4OiBudW1iZXI7XG4gIHk6IG51bWJlcjtcbiAgd2lkdGg6IG51bWJlcjtcbiAgaGVpZ2h0OiBudW1iZXI7XG59XG5cbmNvbnN0IERyYWdCb3ggPSBzdHlsZWQuZGl2PERyYWdCb3hQcm9wcz5gXG4gIHBvc2l0aW9uOmFic29sdXRlO1xuICB3aWR0aDoke3AgPT4gcC53aWR0aH1weDtcbiAgaGVpZ2h0OiR7cCA9PiBwLmhlaWdodH1weDtcbiAgbGVmdDoke3AgPT4gcC54fXB4O1xuICB0b3A6JHtwID0+IHAueX1weDtcbiAgYm9yZGVyOiAycHggZGFzaGVkICR7Y29sb3JzLnByaW1hcnl9O1xuYFxuXG5jb25zdCBTbGlkZSA9IHN0eWxlZC5zZWN0aW9uPHsgd2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIgfT5gXG4gIHBvc2l0aW9uOnJlbGF0aXZlO1xuICBiYWNrZ3JvdW5kOndoaXRlO1xuICBib3gtc2hhZG93OiAwIDFweCA0cHggcmdiYSgwLCAwLCAwLCAwLjQpO1xuICB3aWR0aDogJHtwID0+IHAud2lkdGh9cHg7XG4gIGhlaWdodDoke3AgPT4gcC5oZWlnaHR9cHg7XG5gXG5cbmNvbnN0IE5ld0VsZW1lbnRzID0gc3R5bGVkLmRpdmBcbiAgZGlzcGxheTpncmlkO1xuICBncmlkLWF1dG8tZmxvdzogY29sdW1uO1xuICBncmlkLWdhcDogNHB4O1xuICBwbGFjZS1jb250ZW50OiBjZW50ZXIgc3RhcnQ7XG5gXG5cblxuY29uc3QgTGF5b3V0ID0gc3R5bGVkLmRpdmBcbiAgZGlzcGxheTpncmlkO1xuICBoZWlnaHQ6MTAwJTtcbiAgZ3JpZC1nYXA6IDMycHg7XG4gIGJhY2tncm91bmQ6I2Y1ZjVmNTtcbiAgZ3JpZC10ZW1wbGF0ZS1yb3dzOiBhdXRvIDFmcjtcbiAgcGxhY2UtY29udGVudDogc3RhcnQgc3RyZXRjaDtcbiAgb3ZlcmZsb3c6aGlkZGVuO1xuYFxuXG5jb25zdCBTdGFnZSA9IHN0eWxlZC5tYWluPHsgdG9vbDogVG9vbCwgc2NhbGU6IG51bWJlciB9PmBcbiAgZGlzcGxheTpncmlkO1xuICB3aWR0aDoxMDAlO1xuICBwbGFjZS1jb250ZW50OmNlbnRlciBjZW50ZXI7XG4gIG92ZXJmbG93OmhpZGRlbjtcbiAgJHtwID0+IHtcbiAgICBzd2l0Y2ggKHAudG9vbCkge1xuICAgICAgY2FzZSBcImluc2VydF9jaGFydFwiOlxuICAgICAgY2FzZSBcImluc2VydF9pbWFnZVwiOlxuICAgICAgY2FzZSBcImluc2VydF90ZXh0XCI6XG4gICAgICAgIHJldHVybiBjc3NgXG4gICAgICAgIGN1cnNvcjogY3Jvc3NoYWlyO1xuICAgICAgICBgXG4gICAgfVxuICB9fVxuICAmID4gKiB7XG4gICAgdHJhbnNmb3JtOiBzY2FsZSgke3AgPT4gcC5zY2FsZX0pO1xuICAgIHRyYW5zZm9ybS1vcmlnaW46IDUwJSA1MCU7XG4gIH1cbmBcblxuXG5jb25zdCBMb2FkaW5nSW5kaWNhdG9yID0gKCkgPT5cbiAgPExvYWRpbmdXcmFwcGVyPlxuICAgIDxMb2FkaW5nRG90IGRlbGF5PXswfT4uPC9Mb2FkaW5nRG90PlxuICAgIDxMb2FkaW5nRG90IGRlbGF5PXsyMDB9Pi48L0xvYWRpbmdEb3Q+XG4gICAgPExvYWRpbmdEb3QgZGVsYXk9ezQwMH0+LjwvTG9hZGluZ0RvdD5cbiAgPC9Mb2FkaW5nV3JhcHBlcj5cblxuY29uc3QganVtcEFuaW1hdGlvbiA9IGtleWZyYW1lc2BcbiAgZnJvbSB7XG4gICAgb3BhY2l0eTowO1xuICB9XG4gIHRvIHtcbiAgICBvcGFjaXR5OjE7XG4gIH1cbmBcblxuXG5jb25zdCBMb2FkaW5nV3JhcHBlciA9IHN0eWxlZC5kaXZgXG5wb3NpdGlvbjphYnNvbHV0ZTtcbiAgdG9wOiAwcHg7XG4gIHJpZ2h0OiAzMnB4O1xuICBmb250LXNpemU6IDIuNXJlbTtcbmBcbmNvbnN0IExvYWRpbmdEb3QgPSBzdHlsZWQuc3Bhbjx7IGRlbGF5OiBudW1iZXIgfT5gXG4gIGFuaW1hdGlvbjoke2p1bXBBbmltYXRpb259IDFzIGVhc2UgaW5maW5pdGU7XG4gIGFuaW1hdGlvbi1kZWxheToke3AgPT4gcC5kZWxheX1tcztcbmAiXX0= */"), "label:Chart;");
}, ";" + ( false ? undefined : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));

var Center = Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_7__["default"])("div", {
  target: "e1nne1bm1",
  label: "Center"
})( false ? undefined : {
  name: "ieltvz",
  styles: "height:100%;display:grid;place-content:center center;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"
});

var DragBox = Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_7__["default"])("div", {
  target: "e1nne1bm2",
  label: "DragBox"
})("position:absolute;width:", function (p) {
  return p.width;
}, "px;height:", function (p) {
  return p.height;
}, "px;left:", function (p) {
  return p.x;
}, "px;top:", function (p) {
  return p.y;
}, "px;border:2px dashed ", _theme__WEBPACK_IMPORTED_MODULE_17__["colors"].primary, ";" + ( false ? undefined : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));

var Slide = Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_7__["default"])("section", {
  target: "e1nne1bm3",
  label: "Slide"
})("position:relative;background:white;box-shadow:0 1px 4px rgba(0,0,0,0.4);width:", function (p) {
  return p.width;
}, "px;height:", function (p) {
  return p.height;
}, "px;" + ( false ? undefined : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));

var NewElements = Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_7__["default"])("div", {
  target: "e1nne1bm4",
  label: "NewElements"
})( false ? undefined : {
  name: "ecvamz",
  styles: "display:grid;grid-auto-flow:column;grid-gap:4px;place-content:center start;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9hbmRyZWFzbW9sbGVyL2NvZGUvcmVwb3J0cy9jbGllbnQvUmVwb3J0L1JlcG9ydC50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBa1Q4QiIsImZpbGUiOiIvVXNlcnMvYW5kcmVhc21vbGxlci9jb2RlL3JlcG9ydHMvY2xpZW50L1JlcG9ydC9SZXBvcnQudHN4Iiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgeyB1c2VSZXBvcnRHZXRRdWVyeSwgdXNlUmVwb3J0VXBkYXRlTXV0YXRpb24sIENoYXJ0RnJhZ21lbnQsIFJlcG9ydFVwZGF0ZU11dGF0aW9uVmFyaWFibGVzLCBSZXBvcnRGcmFnbWVudCwgUmVwb3J0R2V0RG9jdW1lbnQgfSBmcm9tIFwiLi4vY29kZWdlbi9ncmFwaHFsXCI7XG5pbXBvcnQgc3R5bGVkIGZyb20gXCJAZW1vdGlvbi9zdHlsZWRcIjtcbmltcG9ydCB7IEVycm9yQm94IH0gZnJvbSBcIi4uL2NvbXBvbmVudHMvRXJyb3JCb3hcIjtcbmltcG9ydCB7IENydW1icywgQ3J1bWJUaXRsZSwgQ3J1bWJMaW5rIH0gZnJvbSBcIi4uL2NvbXBvbmVudHMvQ3J1bWJzXCI7XG5pbXBvcnQgeyBIZWFkZXIsIEhlYWRlclNlY3Rpb24gfSBmcm9tIFwiLi4vY29tcG9uZW50cy9IZWFkZXJcIjtcbmltcG9ydCB7IEljb24gfSBmcm9tIFwiLi4vY29tcG9uZW50cy9JY29uXCI7XG5pbXBvcnQgeyBGbGF0QnV0dG9uLCBCdXR0b24gfSBmcm9tIFwiLi4vY29tcG9uZW50cy9CdXR0b25cIjtcbmltcG9ydCB7IHVzZVN0YXRlLCBLZXlib2FyZEV2ZW50LCB1c2VFZmZlY3QgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IGNzcywga2V5ZnJhbWVzIH0gZnJvbSBcIkBlbW90aW9uL2NvcmVcIjtcbmltcG9ydCB7IHVzZU1vdXNlRHJhZywgUG9zIH0gZnJvbSBcIi4uL2hvb2tzL2RyYWdcIjtcbmltcG9ydCB7IGNvbG9ycyB9IGZyb20gXCIuLi90aGVtZVwiO1xuaW1wb3J0IGN1aWQgZnJvbSBcImN1aWRcIlxuXG50eXBlIFRvb2wgPVxuICB8IFwiaW5zZXJ0X2NoYXJ0XCJcbiAgfCBcImluc2VydF9pbWFnZVwiXG4gIHwgXCJpbnNlcnRfdGV4dFwiXG4gIHwgXCJzZWxlY3RcIlxuXG5cbnR5cGUgU2VsZWN0aW9uID0gQ2hhcnRGcmFnbWVudFxuXG5cbmNvbnN0IHJlbW92ZVR5cGVuYW1lID0gKHJlcG9ydDogUmVwb3J0RnJhZ21lbnQpOiBSZXBvcnRVcGRhdGVNdXRhdGlvblZhcmlhYmxlc1tcInJlcG9ydFwiXSA9PiB7XG4gIGNvbnN0IHsgX190eXBlbmFtZSwgc2xpZGVzLCAuLi5yZXBvcnREYXRhIH0gPSByZXBvcnQ7XG4gIHJldHVybiB7XG4gICAgLi4ucmVwb3J0RGF0YSxcbiAgICBzbGlkZXM6IHNsaWRlcy5tYXAoKHsgX190eXBlbmFtZSwgY2hhcnRzLCAuLi5zbGlkZURhdGEgfSkgPT4ge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4uc2xpZGVEYXRhLFxuICAgICAgICBjaGFydHM6IGNoYXJ0cy5tYXAoKHsgX190eXBlbmFtZSwgLi4uY2hhcnREYXRhIH0pID0+IHtcbiAgICAgICAgICByZXR1cm4gY2hhcnREYXRhXG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgfSlcbiAgfVxufVxuXG5jb25zdCBnZXRNb2RpZmllcnMgPSAoZTogS2V5Ym9hcmRFdmVudCkgPT5cbiAgbmV3IFNldChbXG4gICAgZS5uYXRpdmVFdmVudC5tZXRhS2V5ICYmIFwibWV0YVwiLFxuICAgIGUubmF0aXZlRXZlbnQuY3RybEtleSAmJiBcImN0cmxcIixcbiAgICBlLm5hdGl2ZUV2ZW50LmFsdEtleSAmJiBcImFsdFwiLFxuICAgIGUubmF0aXZlRXZlbnQuc2hpZnRLZXkgJiYgXCJzaGlmdFwiLFxuICBdLmZpbHRlcihCb29sZWFuKVxuICApXG5cbmV4cG9ydCBjb25zdCBSZXBvcnRQYWdlID0gKHByb3BzOiB7IGlkOiBzdHJpbmcsIHNsaWRlPzogc3RyaW5nIH0pID0+IHtcbiAgY29uc3QgW3NjYWxlLCBzZXRTY2FsZV0gPSB1c2VTdGF0ZSgxKVxuXG5cbiAgY29uc3QgW3Rvb2wsIHNldFRvb2xdID0gdXNlU3RhdGU8VG9vbD4oXCJzZWxlY3RcIilcbiAgY29uc3QgW3NlbGVjdGlvbiwgc2V0U2VsZWN0aW9uXSA9IHVzZVN0YXRlPFNlbGVjdGlvbltdPihbXSlcblxuICBjb25zdCBbdW5kb0hpc3RvcnksIHNldFVuZG9IaXN0b3J5XSA9IHVzZVN0YXRlPFJlcG9ydFVwZGF0ZU11dGF0aW9uVmFyaWFibGVzW1wicmVwb3J0XCJdW10+KFtdKVxuICBjb25zdCBbdW5kb0hpc3RvcnlJbmRleCwgc2V0VW5kb0hpc3RvcnlJbmRleF0gPSB1c2VTdGF0ZTxudW1iZXI+KDApXG5cbiAgY29uc3QgcmVwb3J0UXVlcnkgPSB1c2VSZXBvcnRHZXRRdWVyeSh7XG4gICAgdmFyaWFibGVzOiB7XG4gICAgICBpZDogcHJvcHMuaWRcbiAgICB9LFxuICAgIG9uQ29tcGxldGVkOiAoeyByZXBvcnQgfSkgPT4ge1xuICAgICAgc2V0U2NhbGUod2luZG93LmlubmVyV2lkdGggKiAwLjggLyByZXBvcnQud2lkdGgpXG4gICAgfVxuICB9KVxuXG4gIGNvbnN0IHJlcG9ydCA9IHJlcG9ydFF1ZXJ5LmRhdGEgJiYgcmVwb3J0UXVlcnkuZGF0YS5yZXBvcnRcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChyZXBvcnQgJiYgdW5kb0hpc3RvcnkubGVuZ3RoID09PSAwKSB7XG4gICAgICBzZXRVbmRvSGlzdG9yeShbcmVwb3J0XSlcbiAgICB9XG4gIH0sIFtyZXBvcnRdKVxuXG4gIGNvbnN0IFtfdXBkYXRlUmVwb3J0LCB1cGRhdGVSZXBvcnRRdWVyeV0gPSB1c2VSZXBvcnRVcGRhdGVNdXRhdGlvbigpXG5cbiAgY29uc3QgdXBkYXRlUmVwb3J0ID0gKHJlcG9ydDogUmVwb3J0VXBkYXRlTXV0YXRpb25WYXJpYWJsZXNbXCJyZXBvcnRcIl0sIGlzVW5kbyA9IGZhbHNlKSA9PiB7XG4gICAgaWYgKCFpc1VuZG8pIHtcbiAgICAgIHNldFVuZG9IaXN0b3J5KFsuLi51bmRvSGlzdG9yeS5zbGljZSgwLCB1bmRvSGlzdG9yeUluZGV4ICsgMSksIHJlcG9ydF0pXG4gICAgICBzZXRVbmRvSGlzdG9yeUluZGV4KHVuZG9IaXN0b3J5SW5kZXggKyAxKVxuXG4gICAgfVxuICAgIHJlcG9ydFF1ZXJ5LmNsaWVudC53cml0ZVF1ZXJ5KHtcbiAgICAgIHF1ZXJ5OiBSZXBvcnRHZXREb2N1bWVudCxcbiAgICAgIHZhcmlhYmxlczogeyBpZDogcmVwb3J0LmlkIH0sXG4gICAgICBkYXRhOiB7XG4gICAgICAgIHJlcG9ydFxuICAgICAgfVxuICAgIH0pXG4gICAgcmV0dXJuIF91cGRhdGVSZXBvcnQoe1xuICAgICAgdmFyaWFibGVzOiB7XG4gICAgICAgIHJlcG9ydDogcmVtb3ZlVHlwZW5hbWUocmVwb3J0IGFzIFJlcG9ydEZyYWdtZW50KVxuICAgICAgfVxuICAgIH0pXG5cbiAgfVxuXG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCBoYW5kbGVyID0gKCkgPT4ge1xuICAgICAgaWYgKHJlcG9ydCkge1xuXG4gICAgICAgIHNldFNjYWxlKHdpbmRvdy5pbm5lcldpZHRoICogMC44IC8gcmVwb3J0LndpZHRoKVxuICAgICAgfVxuICAgIH1cbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLCBoYW5kbGVyKTtcbiAgICByZXR1cm4gKCkgPT4gd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIiwgaGFuZGxlcilcbiAgfSwgW3JlcG9ydF0pXG5cbiAgY29uc3Qgc2VsZWN0ZWRTbGlkZSA9IHJlcG9ydCAmJiAocmVwb3J0LnNsaWRlcy5maW5kKHMgPT4gcy5pZCA9PT0gcHJvcHMuc2xpZGUpIHx8IHJlcG9ydC5zbGlkZXNbMF0pO1xuXG4gIGNvbnN0IGdldERyYWdCb3ggPSAocG9zOiBQb3MsIG9yaWdpbjogUG9zKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHg6IE1hdGgubWluKHBvcy54LCBvcmlnaW4ueCkgLyBzY2FsZSxcbiAgICAgIHk6IE1hdGgubWluKHBvcy55LCBvcmlnaW4ueSkgLyBzY2FsZSxcbiAgICAgIHdpZHRoOiBNYXRoLmFicyhwb3MueCAtIG9yaWdpbi54KSAvIHNjYWxlLFxuICAgICAgaGVpZ2h0OiBNYXRoLmFicyhwb3MueSAtIG9yaWdpbi55KSAvIHNjYWxlLFxuICAgIH1cbiAgfVxuXG4gIGNvbnN0IHsgZHJhZ0hhbmRsZXJzLCBkcmFnUG9zLCBkcmFnT3JpZ2luLCBpc0RyYWdnaW5nLCBwYXJlbnRSZWYgfSA9IHVzZU1vdXNlRHJhZyh7XG4gICAgb25EcmFnRW5kOiAocG9zLCBvcmlnaW4pID0+IHtcbiAgICAgIGNvbnN0IGJveCA9IGdldERyYWdCb3gocG9zLCBvcmlnaW4pO1xuICAgICAgc3dpdGNoICh0b29sKSB7XG4gICAgICAgIGNhc2UgXCJpbnNlcnRfY2hhcnRcIjoge1xuXG4gICAgICAgICAgY29uc3QgbmV3Q2hhcnQgPSB7XG4gICAgICAgICAgICBpZDogY3VpZCgpLFxuICAgICAgICAgICAgeDogTWF0aC5yb3VuZChib3gueCksXG4gICAgICAgICAgICB5OiBNYXRoLnJvdW5kKGJveC55KSxcbiAgICAgICAgICAgIHdpZHRoOiBNYXRoLnJvdW5kKGJveC53aWR0aCksXG4gICAgICAgICAgICBoZWlnaHQ6IE1hdGgucm91bmQoYm94LmhlaWdodCksXG4gICAgICAgICAgICBfX3R5cGVuYW1lOiBcIkNoYXJ0XCIgYXMgXCJDaGFydFwiXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29uc3QgbmV3UmVwb3J0ID0ge1xuICAgICAgICAgICAgLi4ucmVwb3J0LFxuICAgICAgICAgICAgc2xpZGVzOiByZXBvcnQuc2xpZGVzLm1hcChzbGlkZSA9PiB7XG4gICAgICAgICAgICAgIGlmIChzbGlkZS5pZCA9PT0gc2VsZWN0ZWRTbGlkZS5pZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAuLi5zbGlkZSxcbiAgICAgICAgICAgICAgICAgIGNoYXJ0czogWy4uLnNsaWRlLmNoYXJ0cywgbmV3Q2hhcnRdXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBzbGlkZVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH1cbiAgICAgICAgICB1cGRhdGVSZXBvcnQobmV3UmVwb3J0KVxuICAgICAgICAgIHNldFRvb2woXCJzZWxlY3RcIik7XG4gICAgICAgICAgc2V0U2VsZWN0aW9uKFtuZXdDaGFydF0pXG4gICAgICAgIH1cblxuICAgICAgfVxuICAgIH1cbiAgfSlcblxuICBjb25zb2xlLmxvZyh7IHVuZG9IaXN0b3J5IH0pXG5cbiAgcmV0dXJuIChcbiAgICA8TGF5b3V0IHRhYkluZGV4PXstMX0gb25LZXlEb3duPXtlID0+IHtcbiAgICAgIGNvbnN0IG1vZGlmaWVycyA9IGdldE1vZGlmaWVycyhlKTtcbiAgICAgIHN3aXRjaCAoZS5rZXkpIHtcbiAgICAgICAgY2FzZSBcIkVzY2FwZVwiOlxuICAgICAgICAgIHNldFRvb2woXCJzZWxlY3RcIilcbiAgICAgICAgICBpZiAodG9vbCA9PT0gXCJzZWxlY3RcIikge1xuICAgICAgICAgICAgc2V0U2VsZWN0aW9uKFtdKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgY2FzZSBcImNcIjpcbiAgICAgICAgICBpZiAobW9kaWZpZXJzLnNpemUgPT09IDApIHtcbiAgICAgICAgICAgIHNldFRvb2woXCJpbnNlcnRfY2hhcnRcIilcbiAgICAgICAgICAgIHJldHVybiBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgfVxuICAgICAgICBjYXNlIFwiaVwiOlxuICAgICAgICAgIGlmIChtb2RpZmllcnMuc2l6ZSA9PT0gMCkge1xuICAgICAgICAgICAgc2V0VG9vbChcImluc2VydF9pbWFnZVwiKVxuICAgICAgICAgICAgcmV0dXJuIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICB9XG4gICAgICAgIGNhc2UgXCJ0XCI6XG4gICAgICAgICAgaWYgKG1vZGlmaWVycy5zaXplID09PSAwKSB7XG4gICAgICAgICAgICBzZXRUb29sKFwiaW5zZXJ0X3RleHRcIilcbiAgICAgICAgICAgIHJldHVybiBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgfVxuICAgICAgICBjYXNlIFwiQmFja3NwYWNlXCI6IHtcbiAgICAgICAgICB1cGRhdGVSZXBvcnQoe1xuICAgICAgICAgICAgLi4ucmVwb3J0LFxuICAgICAgICAgICAgc2xpZGVzOiByZXBvcnQuc2xpZGVzLm1hcChzbGlkZSA9PiAoe1xuICAgICAgICAgICAgICAuLi5zbGlkZSxcbiAgICAgICAgICAgICAgY2hhcnRzOiBzbGlkZS5jaGFydHMuZmlsdGVyKGNoYXJ0ID0+IHNlbGVjdGlvbi5zb21lKHNlbGVjdGlvbiA9PiBzZWxlY3Rpb24uaWQgPT09IGNoYXJ0LmlkKSA9PT0gZmFsc2UpXG4gICAgICAgICAgICB9KSlcbiAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICAgIGNhc2UgXCJ6XCI6XG4gICAgICAgICAgaWYgKG1vZGlmaWVycy5oYXMoXCJtZXRhXCIpICYmIHVuZG9IaXN0b3J5Lmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgIGNvbnN0IG5ld0luZGV4ID0gdW5kb0hpc3RvcnlJbmRleCAtIDE7XG4gICAgICAgICAgICB1cGRhdGVSZXBvcnQodW5kb0hpc3RvcnlbbmV3SW5kZXhdLCB0cnVlKTtcbiAgICAgICAgICAgIHNldFVuZG9IaXN0b3J5SW5kZXgobmV3SW5kZXgpXG4gICAgICAgICAgfVxuXG4gICAgICB9XG4gICAgfX0+XG4gICAgICB7KHJlcG9ydFF1ZXJ5LmxvYWRpbmcgfHwgdXBkYXRlUmVwb3J0UXVlcnkubG9hZGluZykgJiYgPExvYWRpbmdJbmRpY2F0b3IgLz59XG4gICAgICA8SGVhZGVyPlxuICAgICAgICA8SGVhZGVyU2VjdGlvbj5cbiAgICAgICAgICA8Q3J1bWJzPlxuICAgICAgICAgICAgPENydW1iTGluayBocmVmPVwiL1wiPkhvbWU8L0NydW1iTGluaz5cbiAgICAgICAgICAgIDxDcnVtYkxpbmsgaHJlZj1cIi9cIj5SZXBvcnRzPC9DcnVtYkxpbms+XG4gICAgICAgICAgICA8Q3J1bWJUaXRsZT57cmVwb3J0ID8gcmVwb3J0LnRpdGxlIDogXCIuLi5cIn08L0NydW1iVGl0bGU+XG4gICAgICAgICAgPC9DcnVtYnMgPlxuICAgICAgICAgIDxOZXdFbGVtZW50cz5cbiAgICAgICAgICAgIDxGbGF0QnV0dG9uIG5hbWU9XCJpbnNlcnRfY2hhcnRcIiBvbkNsaWNrPXsoKSA9PiBzZXRUb29sKFwiaW5zZXJ0X2NoYXJ0XCIpfSBhY3RpdmU9e3Rvb2wgPT09IFwiaW5zZXJ0X2NoYXJ0XCJ9PlxuICAgICAgICAgICAgICA8SWNvbiBpY29uPVwiaW5zZXJ0X2NoYXJ0XCIgLz5cbiAgICAgICAgICAgIDwvRmxhdEJ1dHRvbj5cbiAgICAgICAgICAgIDxGbGF0QnV0dG9uIG5hbWU9XCJpbnNlcnRfaW1hZ2VcIiBvbkNsaWNrPXsoKSA9PiBzZXRUb29sKFwiaW5zZXJ0X2ltYWdlXCIpfSBhY3RpdmU9e3Rvb2wgPT09IFwiaW5zZXJ0X2ltYWdlXCJ9PjxJY29uIGljb249XCJpbnNlcnRfcGhvdG9cIiAvPjwvRmxhdEJ1dHRvbj5cbiAgICAgICAgICAgIDxGbGF0QnV0dG9uIG5hbWU9XCJpbnNlcnRfdGV4dFwiIG9uQ2xpY2s9eygpID0+IHNldFRvb2woXCJpbnNlcnRfdGV4dFwiKX0gYWN0aXZlPXt0b29sID09PSBcImluc2VydF90ZXh0XCJ9PjxJY29uIGljb249XCJpbnNlcnRfdGV4dFwiIC8+PC9GbGF0QnV0dG9uPlxuICAgICAgICAgIDwvTmV3RWxlbWVudHM+XG4gICAgICAgIDwvSGVhZGVyU2VjdGlvbj5cbiAgICAgIDwvSGVhZGVyID5cbiAgICAgIDxkaXYgc3R5bGU9e3sgcG9zaXRpb246IFwiYWJzb2x1dGVcIiwgYm90dG9tOiAxNiwgcmlnaHQ6IDE2IH19PntzY2FsZX08L2Rpdj5cbiAgICAgIDxTdGFnZSB0b29sPXt0b29sfSBzY2FsZT17c2NhbGV9PlxuXG4gICAgICAgIHtcbiAgICAgICAgICBzZWxlY3RlZFNsaWRlICYmXG4gICAgICAgICAgPFNsaWRlIHJlZj17cGFyZW50UmVmfSB7Li4uZHJhZ0hhbmRsZXJzfSB3aWR0aD17cmVwb3J0LndpZHRofSBoZWlnaHQ9e3JlcG9ydC5oZWlnaHR9PlxuICAgICAgICAgICAge1tcImluc2VydF9jaGFydFwiLCBcImluc2VydF9pbWFnZVwiLCBcImluc2VydF90ZXh0XCJdLmluY2x1ZGVzKHRvb2wpICYmIGlzRHJhZ2dpbmcgJiZcbiAgICAgICAgICAgICAgPERyYWdCb3ggey4uLmdldERyYWdCb3goZHJhZ1BvcywgZHJhZ09yaWdpbil9IC8+XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB7c2VsZWN0ZWRTbGlkZS5jaGFydHMubWFwKGNoYXJ0ID0+IHtcbiAgICAgICAgICAgICAgcmV0dXJuIChcblxuICAgICAgICAgICAgICAgIDxDaGFydCBrZXk9e2NoYXJ0LmlkfSBzZWxlY3RlZD17c2VsZWN0aW9uLnNvbWUocyA9PiBzLmlkID09PSBjaGFydC5pZCl9IHsuLi5jaGFydH0gb25DbGljaz17ZSA9PiB7XG4gICAgICAgICAgICAgICAgICBpZiAodG9vbCA9PT0gXCJzZWxlY3RcIikge1xuICAgICAgICAgICAgICAgICAgICBzZXRTZWxlY3Rpb24oZS5uYXRpdmVFdmVudC5zaGlmdEtleSA/IFsuLi5zZWxlY3Rpb24sIGNoYXJ0XSA6IFtjaGFydF0pO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH19IC8+XG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgIH0pfVxuICAgICAgICAgIDwvU2xpZGU+XG4gICAgICAgIH1cbiAgICAgICAge3JlcG9ydCAmJiAhc2VsZWN0ZWRTbGlkZSAmJlxuICAgICAgICAgIDxDZW50ZXI+XG4gICAgICAgICAgICA8QnV0dG9uIG5hbWU9XCJjcmVhdGUgc2xpZGVcIiBvbkNsaWNrPXsoKSA9PiB7XG4gICAgICAgICAgICAgIHVwZGF0ZVJlcG9ydCh7XG4gICAgICAgICAgICAgICAgLi4ucmVwb3J0LFxuICAgICAgICAgICAgICAgIHNsaWRlczogW1xuICAgICAgICAgICAgICAgICAgLi4ucmVwb3J0LnNsaWRlcyxcbiAgICAgICAgICAgICAgICAgIHsgaWQ6IGN1aWQoKSwgY2hhcnRzOiBbXSB9XG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfX0+XG4gICAgICAgICAgICAgIENyZWF0ZSBZb3UgZmlyc3QgU2xpZGVcbiAgICAgICAgICAgIDwvQnV0dG9uPlxuICAgICAgICAgIDwvQ2VudGVyPlxuICAgICAgICB9XG4gICAgICAgIHtyZXBvcnRRdWVyeS5lcnJvciAmJiA8RXJyb3JCb3ggZXJyb3I9e3JlcG9ydFF1ZXJ5LmVycm9yfSAvPn1cbiAgICAgIDwvU3RhZ2U+XG5cbiAgICA8L0xheW91dCA+XG4gIClcbn1cblxuY29uc3QgQ2hhcnQgPSBzdHlsZWQuZGl2PENoYXJ0RnJhZ21lbnQgJiB7IHNlbGVjdGVkOiBib29sZWFuIH0+YFxuICBwb3NpdGlvbjphYnNvbHV0ZTtcbiAgbGVmdDogJHtwID0+IHAueH1weDtcbiAgdG9wOiAke3AgPT4gcC55fXB4O1xuICB3aWR0aDogJHtwID0+IHAud2lkdGh9cHg7XG4gIGhlaWdodDogJHtwID0+IHAuaGVpZ2h0fXB4O1xuICBiYWNrZ3JvdW5kOiAjZjBmMGYwO1xuICBib3JkZXI6IDFweCBzb2xpZCAjZGVkZWRlO1xuICAke3AgPT4gcC5zZWxlY3RlZCAmJiBjc3NgYm9yZGVyOiAxcHggZGFzaGVkICR7Y29sb3JzLnByaW1hcnl9O2B9O1xuYFxuXG5cbmNvbnN0IENlbnRlciA9IHN0eWxlZC5kaXZgXG4gIGhlaWdodDoxMDAlO1xuICBkaXNwbGF5OmdyaWQ7XG4gIHBsYWNlLWNvbnRlbnQ6Y2VudGVyIGNlbnRlcjtcbiAgYFxuXG5cbnR5cGUgRHJhZ0JveFByb3BzID0ge1xuICB4OiBudW1iZXI7XG4gIHk6IG51bWJlcjtcbiAgd2lkdGg6IG51bWJlcjtcbiAgaGVpZ2h0OiBudW1iZXI7XG59XG5cbmNvbnN0IERyYWdCb3ggPSBzdHlsZWQuZGl2PERyYWdCb3hQcm9wcz5gXG4gIHBvc2l0aW9uOmFic29sdXRlO1xuICB3aWR0aDoke3AgPT4gcC53aWR0aH1weDtcbiAgaGVpZ2h0OiR7cCA9PiBwLmhlaWdodH1weDtcbiAgbGVmdDoke3AgPT4gcC54fXB4O1xuICB0b3A6JHtwID0+IHAueX1weDtcbiAgYm9yZGVyOiAycHggZGFzaGVkICR7Y29sb3JzLnByaW1hcnl9O1xuYFxuXG5jb25zdCBTbGlkZSA9IHN0eWxlZC5zZWN0aW9uPHsgd2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIgfT5gXG4gIHBvc2l0aW9uOnJlbGF0aXZlO1xuICBiYWNrZ3JvdW5kOndoaXRlO1xuICBib3gtc2hhZG93OiAwIDFweCA0cHggcmdiYSgwLCAwLCAwLCAwLjQpO1xuICB3aWR0aDogJHtwID0+IHAud2lkdGh9cHg7XG4gIGhlaWdodDoke3AgPT4gcC5oZWlnaHR9cHg7XG5gXG5cbmNvbnN0IE5ld0VsZW1lbnRzID0gc3R5bGVkLmRpdmBcbiAgZGlzcGxheTpncmlkO1xuICBncmlkLWF1dG8tZmxvdzogY29sdW1uO1xuICBncmlkLWdhcDogNHB4O1xuICBwbGFjZS1jb250ZW50OiBjZW50ZXIgc3RhcnQ7XG5gXG5cblxuY29uc3QgTGF5b3V0ID0gc3R5bGVkLmRpdmBcbiAgZGlzcGxheTpncmlkO1xuICBoZWlnaHQ6MTAwJTtcbiAgZ3JpZC1nYXA6IDMycHg7XG4gIGJhY2tncm91bmQ6I2Y1ZjVmNTtcbiAgZ3JpZC10ZW1wbGF0ZS1yb3dzOiBhdXRvIDFmcjtcbiAgcGxhY2UtY29udGVudDogc3RhcnQgc3RyZXRjaDtcbiAgb3ZlcmZsb3c6aGlkZGVuO1xuYFxuXG5jb25zdCBTdGFnZSA9IHN0eWxlZC5tYWluPHsgdG9vbDogVG9vbCwgc2NhbGU6IG51bWJlciB9PmBcbiAgZGlzcGxheTpncmlkO1xuICB3aWR0aDoxMDAlO1xuICBwbGFjZS1jb250ZW50OmNlbnRlciBjZW50ZXI7XG4gIG92ZXJmbG93OmhpZGRlbjtcbiAgJHtwID0+IHtcbiAgICBzd2l0Y2ggKHAudG9vbCkge1xuICAgICAgY2FzZSBcImluc2VydF9jaGFydFwiOlxuICAgICAgY2FzZSBcImluc2VydF9pbWFnZVwiOlxuICAgICAgY2FzZSBcImluc2VydF90ZXh0XCI6XG4gICAgICAgIHJldHVybiBjc3NgXG4gICAgICAgIGN1cnNvcjogY3Jvc3NoYWlyO1xuICAgICAgICBgXG4gICAgfVxuICB9fVxuICAmID4gKiB7XG4gICAgdHJhbnNmb3JtOiBzY2FsZSgke3AgPT4gcC5zY2FsZX0pO1xuICAgIHRyYW5zZm9ybS1vcmlnaW46IDUwJSA1MCU7XG4gIH1cbmBcblxuXG5jb25zdCBMb2FkaW5nSW5kaWNhdG9yID0gKCkgPT5cbiAgPExvYWRpbmdXcmFwcGVyPlxuICAgIDxMb2FkaW5nRG90IGRlbGF5PXswfT4uPC9Mb2FkaW5nRG90PlxuICAgIDxMb2FkaW5nRG90IGRlbGF5PXsyMDB9Pi48L0xvYWRpbmdEb3Q+XG4gICAgPExvYWRpbmdEb3QgZGVsYXk9ezQwMH0+LjwvTG9hZGluZ0RvdD5cbiAgPC9Mb2FkaW5nV3JhcHBlcj5cblxuY29uc3QganVtcEFuaW1hdGlvbiA9IGtleWZyYW1lc2BcbiAgZnJvbSB7XG4gICAgb3BhY2l0eTowO1xuICB9XG4gIHRvIHtcbiAgICBvcGFjaXR5OjE7XG4gIH1cbmBcblxuXG5jb25zdCBMb2FkaW5nV3JhcHBlciA9IHN0eWxlZC5kaXZgXG5wb3NpdGlvbjphYnNvbHV0ZTtcbiAgdG9wOiAwcHg7XG4gIHJpZ2h0OiAzMnB4O1xuICBmb250LXNpemU6IDIuNXJlbTtcbmBcbmNvbnN0IExvYWRpbmdEb3QgPSBzdHlsZWQuc3Bhbjx7IGRlbGF5OiBudW1iZXIgfT5gXG4gIGFuaW1hdGlvbjoke2p1bXBBbmltYXRpb259IDFzIGVhc2UgaW5maW5pdGU7XG4gIGFuaW1hdGlvbi1kZWxheToke3AgPT4gcC5kZWxheX1tcztcbmAiXX0= */"
});

var Layout = Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_7__["default"])("div", {
  target: "e1nne1bm5",
  label: "Layout"
})( false ? undefined : {
  name: "1dsk5u3",
  styles: "display:grid;height:100%;grid-gap:32px;background:#f5f5f5;grid-template-rows:auto 1fr;place-content:start stretch;overflow:hidden;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"
});

var _ref =  false ? undefined : {
  name: "gcwr8i-Stage",
  styles: "cursor:crosshair;label:Stage;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"
};

var Stage = Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_7__["default"])("main", {
  target: "e1nne1bm6",
  label: "Stage"
})("display:grid;width:100%;place-content:center center;overflow:hidden;", function (p) {
  switch (p.tool) {
    case "insert_chart":
    case "insert_image":
    case "insert_text":
      return (
        /*#__PURE__*/
        _ref
      );
  }
}, " & > *{transform:scale(", function (p) {
  return p.scale;
}, ");transform-origin:50% 50%;}" + ( false ? undefined : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));

var LoadingIndicator = function LoadingIndicator() {
  return Object(_emotion_core__WEBPACK_IMPORTED_MODULE_9__["jsx"])(LoadingWrapper, {
    __source: {
      fileName: _jsxFileName,
      lineNumber: 348
    },
    __self: this
  }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_9__["jsx"])(LoadingDot, {
    delay: 0,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 349
    },
    __self: this
  }, "."), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_9__["jsx"])(LoadingDot, {
    delay: 200,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 350
    },
    __self: this
  }, "."), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_9__["jsx"])(LoadingDot, {
    delay: 400,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 351
    },
    __self: this
  }, "."));
};

var jumpAnimation = Object(_emotion_core__WEBPACK_IMPORTED_MODULE_9__["keyframes"])(_templateObject());

var LoadingWrapper = Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_7__["default"])("div", {
  target: "e1nne1bm7",
  label: "LoadingWrapper"
})( false ? undefined : {
  name: "qabk88",
  styles: "position:absolute;top:0px;right:32px;font-size:2.5rem;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"
});

var LoadingDot = Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_7__["default"])("span", {
  target: "e1nne1bm8",
  label: "LoadingDot"
})("animation:", jumpAnimation, " 1s ease infinite;animation-delay:", function (p) {
  return p.delay;
}, "ms;" + ( false ? undefined : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));

/***/ })

})
//# sourceMappingURL=[reportId].js.fb81d2b39a28a51ae4ad.hot-update.js.map