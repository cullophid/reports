webpackHotUpdate("static/development/pages/reports/[reportId].js",{

/***/ "./client/Report/Report.tsx":
/*!**********************************!*\
  !*** ./client/Report/Report.tsx ***!
  \**********************************/
/*! exports provided: ReportPage */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ReportPage", function() { return ReportPage; });
/* harmony import */ var _babel_runtime_corejs2_helpers_esm_taggedTemplateLiteral__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral */ "./node_modules/@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral.js");
/* harmony import */ var _babel_runtime_corejs2_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime-corejs2/helpers/esm/extends */ "./node_modules/@babel/runtime-corejs2/helpers/esm/extends.js");
/* harmony import */ var _babel_runtime_corejs2_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime-corejs2/helpers/esm/toConsumableArray */ "./node_modules/@babel/runtime-corejs2/helpers/esm/toConsumableArray.js");
/* harmony import */ var _babel_runtime_corejs2_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime-corejs2/helpers/esm/slicedToArray */ "./node_modules/@babel/runtime-corejs2/helpers/esm/slicedToArray.js");
/* harmony import */ var _babel_runtime_corejs2_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @babel/runtime-corejs2/helpers/esm/objectSpread */ "./node_modules/@babel/runtime-corejs2/helpers/esm/objectSpread.js");
/* harmony import */ var _babel_runtime_corejs2_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @babel/runtime-corejs2/helpers/esm/objectWithoutProperties */ "./node_modules/@babel/runtime-corejs2/helpers/esm/objectWithoutProperties.js");
/* harmony import */ var _emotion_styled_base__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @emotion/styled-base */ "./node_modules/@emotion/styled-base/dist/styled-base.browser.esm.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var _emotion_core__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @emotion/core */ "./node_modules/@emotion/core/dist/core.browser.esm.js");
/* harmony import */ var _codegen_graphql__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../codegen/graphql */ "./client/codegen/graphql.ts");
/* harmony import */ var _components_ErrorBox__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../components/ErrorBox */ "./client/components/ErrorBox.tsx");
/* harmony import */ var _components_Crumbs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../components/Crumbs */ "./client/components/Crumbs.tsx");
/* harmony import */ var _components_Header__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../components/Header */ "./client/components/Header.tsx");
/* harmony import */ var _components_Icon__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../components/Icon */ "./client/components/Icon.tsx");
/* harmony import */ var _components_Button__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../components/Button */ "./client/components/Button.tsx");
/* harmony import */ var _hooks_drag__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../hooks/drag */ "./client/hooks/drag.ts");
/* harmony import */ var _theme__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../theme */ "./client/theme.ts");
/* harmony import */ var cuid__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! cuid */ "./node_modules/cuid/index.js");
/* harmony import */ var cuid__WEBPACK_IMPORTED_MODULE_17___default = /*#__PURE__*/__webpack_require__.n(cuid__WEBPACK_IMPORTED_MODULE_17__);
/* harmony import */ var react_draggable__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! react-draggable */ "./node_modules/react-draggable/web/react-draggable.min.js");
/* harmony import */ var react_draggable__WEBPACK_IMPORTED_MODULE_18___default = /*#__PURE__*/__webpack_require__.n(react_draggable__WEBPACK_IMPORTED_MODULE_18__);







var _jsxFileName = "/Users/andreasmoller/code/reports/client/Report/Report.tsx";

var __jsx = react__WEBPACK_IMPORTED_MODULE_7___default.a.createElement;


function _templateObject() {
  var data = Object(_babel_runtime_corejs2_helpers_esm_taggedTemplateLiteral__WEBPACK_IMPORTED_MODULE_0__["default"])(["\n  from {\n    opacity:0;\n  }\n  to {\n    opacity:1;\n  }\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}














var removeTypename = function removeTypename(report) {
  var __typename = report.__typename,
      slides = report.slides,
      reportData = Object(_babel_runtime_corejs2_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_5__["default"])(report, ["__typename", "slides"]);

  return Object(_babel_runtime_corejs2_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_4__["default"])({}, reportData, {
    slides: slides.map(function (_ref2) {
      var __typename = _ref2.__typename,
          charts = _ref2.charts,
          slideData = Object(_babel_runtime_corejs2_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_5__["default"])(_ref2, ["__typename", "charts"]);

      return Object(_babel_runtime_corejs2_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_4__["default"])({}, slideData, {
        charts: charts.map(function (_ref3) {
          var __typename = _ref3.__typename,
              chartData = Object(_babel_runtime_corejs2_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_5__["default"])(_ref3, ["__typename"]);

          return chartData;
        })
      });
    })
  });
};

var getModifiers = function getModifiers(e) {
  return [e.nativeEvent.metaKey && "meta", e.nativeEvent.ctrlKey && "ctrl", e.nativeEvent.altKey && "alt", e.nativeEvent.shiftKey && "shift"].filter(Boolean);
};

var ReportPage = function ReportPage(props) {
  var _useState = Object(react__WEBPACK_IMPORTED_MODULE_7__["useState"])(1),
      scale = _useState[0],
      setScale = _useState[1];

  var _useState2 = Object(react__WEBPACK_IMPORTED_MODULE_7__["useState"])("select"),
      tool = _useState2[0],
      setTool = _useState2[1];

  var _useState3 = Object(react__WEBPACK_IMPORTED_MODULE_7__["useState"])([]),
      selection = _useState3[0],
      setSelection = _useState3[1];

  var reportQuery = Object(_codegen_graphql__WEBPACK_IMPORTED_MODULE_9__["useReportGetQuery"])({
    variables: {
      id: props.id
    },
    onCompleted: function onCompleted(_ref4) {
      var report = _ref4.report;
      setScale(window.innerWidth * 0.8 / report.width);
    }
  });

  var _useReportUpdateMutat = Object(_codegen_graphql__WEBPACK_IMPORTED_MODULE_9__["useReportUpdateMutation"])(),
      _useReportUpdateMutat2 = Object(_babel_runtime_corejs2_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_3__["default"])(_useReportUpdateMutat, 2),
      _updateReport = _useReportUpdateMutat2[0],
      updateReportQuery = _useReportUpdateMutat2[1];

  var updateReport = function updateReport(report) {
    reportQuery.client.writeQuery({
      query: _codegen_graphql__WEBPACK_IMPORTED_MODULE_9__["ReportGetDocument"],
      variables: {
        id: report.id
      },
      data: {
        report: report
      }
    });
    return _updateReport({
      variables: {
        report: removeTypename(report)
      }
    });
  };

  var report = reportQuery.data && reportQuery.data.report;
  Object(react__WEBPACK_IMPORTED_MODULE_7__["useEffect"])(function () {
    var handler = function handler() {
      if (report) {
        setScale(window.innerWidth * 0.8 / report.width);
      }
    };

    window.addEventListener("resize", handler);
    return function () {
      return window.removeEventListener("resize", handler);
    };
  }, [report]);
  var selectedSlide = report && (report.slides.find(function (s) {
    return s.id === props.slide;
  }) || report.slides[0]);

  var getDragBox = function getDragBox(pos, origin) {
    return {
      x: Math.min(pos.x, origin.x) / scale,
      y: Math.min(pos.y, origin.y) / scale,
      width: Math.abs(pos.x - origin.x) / scale,
      height: Math.abs(pos.y - origin.y) / scale
    };
  };

  var _useMouseDrag = Object(_hooks_drag__WEBPACK_IMPORTED_MODULE_15__["useMouseDrag"])({
    onDragEnd: function onDragEnd(pos, origin) {
      var box = getDragBox(pos, origin);

      switch (tool) {
        case "insert_chart":
          {
            var newChart = {
              id: cuid__WEBPACK_IMPORTED_MODULE_17___default()(),
              x: Math.round(box.x),
              y: Math.round(box.y),
              width: Math.round(box.width),
              height: Math.round(box.height),
              __typename: "Chart"
            };

            var newReport = Object(_babel_runtime_corejs2_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_4__["default"])({}, report, {
              slides: report.slides.map(function (slide) {
                if (slide.id === selectedSlide.id) {
                  return Object(_babel_runtime_corejs2_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_4__["default"])({}, slide, {
                    charts: [].concat(Object(_babel_runtime_corejs2_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_2__["default"])(slide.charts), [newChart])
                  });
                } else {
                  return slide;
                }
              })
            });

            updateReport(newReport);
            setTool("select");
            setSelection([newChart]);
          }
      }
    }
  }),
      dragHandlers = _useMouseDrag.dragHandlers,
      dragPos = _useMouseDrag.dragPos,
      dragOrigin = _useMouseDrag.dragOrigin,
      isDragging = _useMouseDrag.isDragging,
      parentRef = _useMouseDrag.parentRef;

  return Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__["jsx"])(Layout, {
    tabIndex: -1,
    onKeyDown: function onKeyDown(e) {
      var modifiers = getModifiers(e);

      switch (e.key) {
        case "Escape":
          setTool("select");

          if (tool === "select") {
            setSelection([]);
          }

          return e.preventDefault();

        case "c":
          if (modifiers.length === 0) {
            setTool("insert_chart");
            return e.preventDefault();
          }

        case "i":
          if (modifiers.length === 0) {
            setTool("insert_image");
            return e.preventDefault();
          }

        case "t":
          if (modifiers.length === 0) {
            setTool("insert_text");
            return e.preventDefault();
          }

        case "Backspace":
          {
            updateReport(Object(_babel_runtime_corejs2_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_4__["default"])({}, report, {
              slides: report.slides.map(function (slide) {
                return Object(_babel_runtime_corejs2_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_4__["default"])({}, slide, {
                  charts: slide.charts.filter(function (chart) {
                    return selection.some(function (selection) {
                      return selection.id === chart.id;
                    }) === false;
                  })
                });
              })
            }));
          }
      }
    },
    __source: {
      fileName: _jsxFileName,
      lineNumber: 144
    },
    __self: this
  }, (reportQuery.loading || updateReportQuery.loading) && Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__["jsx"])(LoadingIndicator, {
    __source: {
      fileName: _jsxFileName,
      lineNumber: 180
    },
    __self: this
  }), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__["jsx"])(_components_Header__WEBPACK_IMPORTED_MODULE_12__["Header"], {
    __source: {
      fileName: _jsxFileName,
      lineNumber: 181
    },
    __self: this
  }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__["jsx"])(_components_Header__WEBPACK_IMPORTED_MODULE_12__["HeaderSection"], {
    __source: {
      fileName: _jsxFileName,
      lineNumber: 182
    },
    __self: this
  }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__["jsx"])(_components_Crumbs__WEBPACK_IMPORTED_MODULE_11__["Crumbs"], {
    __source: {
      fileName: _jsxFileName,
      lineNumber: 183
    },
    __self: this
  }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__["jsx"])(_components_Crumbs__WEBPACK_IMPORTED_MODULE_11__["CrumbLink"], {
    href: "/",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 184
    },
    __self: this
  }, "Home"), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__["jsx"])(_components_Crumbs__WEBPACK_IMPORTED_MODULE_11__["CrumbLink"], {
    href: "/",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 185
    },
    __self: this
  }, "Reports"), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__["jsx"])(_components_Crumbs__WEBPACK_IMPORTED_MODULE_11__["CrumbTitle"], {
    __source: {
      fileName: _jsxFileName,
      lineNumber: 186
    },
    __self: this
  }, report ? report.title : "...")), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__["jsx"])(NewElements, {
    __source: {
      fileName: _jsxFileName,
      lineNumber: 188
    },
    __self: this
  }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__["jsx"])(_components_Button__WEBPACK_IMPORTED_MODULE_14__["FlatButton"], {
    name: "insert_chart",
    onClick: function onClick() {
      return setTool("insert_chart");
    },
    active: tool === "insert_chart",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 189
    },
    __self: this
  }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__["jsx"])(_components_Icon__WEBPACK_IMPORTED_MODULE_13__["Icon"], {
    icon: "insert_chart",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 190
    },
    __self: this
  })), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__["jsx"])(_components_Button__WEBPACK_IMPORTED_MODULE_14__["FlatButton"], {
    name: "insert_image",
    onClick: function onClick() {
      return setTool("insert_image");
    },
    active: tool === "insert_image",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 192
    },
    __self: this
  }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__["jsx"])(_components_Icon__WEBPACK_IMPORTED_MODULE_13__["Icon"], {
    icon: "insert_photo",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 192
    },
    __self: this
  })), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__["jsx"])(_components_Button__WEBPACK_IMPORTED_MODULE_14__["FlatButton"], {
    name: "insert_text",
    onClick: function onClick() {
      return setTool("insert_text");
    },
    active: tool === "insert_text",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 193
    },
    __self: this
  }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__["jsx"])(_components_Icon__WEBPACK_IMPORTED_MODULE_13__["Icon"], {
    icon: "insert_text",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 193
    },
    __self: this
  }))))), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__["jsx"])("div", {
    style: {
      position: "absolute",
      bottom: 16,
      right: 16
    },
    __source: {
      fileName: _jsxFileName,
      lineNumber: 197
    },
    __self: this
  }, scale), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__["jsx"])(Stage, {
    tool: tool,
    scale: scale,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 198
    },
    __self: this
  }, selectedSlide && Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__["jsx"])(Slide, Object(_babel_runtime_corejs2_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__["default"])({
    ref: parentRef
  }, dragHandlers, {
    width: report.width,
    height: report.height,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 202
    },
    __self: this
  }), ["insert_chart", "insert_image", "insert_text"].includes(tool) && isDragging && Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__["jsx"])(DragBox, Object(_babel_runtime_corejs2_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__["default"])({}, getDragBox(dragPos, dragOrigin), {
    __source: {
      fileName: _jsxFileName,
      lineNumber: 204
    },
    __self: this
  })), selectedSlide.charts.map(function (chart) {
    return Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__["jsx"])(react_draggable__WEBPACK_IMPORTED_MODULE_18___default.a, {
      key: chart.id,
      disabled: tool !== "select",
      offsetParent: parentRef.current,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 208
      },
      __self: this
    }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__["jsx"])(Chart, Object(_babel_runtime_corejs2_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__["default"])({
      selected: selection.some(function (s) {
        return s.id === chart.id;
      })
    }, chart, {
      onClick: function onClick(e) {
        if (tool === "select") {
          setSelection(e.nativeEvent.shiftKey ? [].concat(Object(_babel_runtime_corejs2_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_2__["default"])(selection), [chart]) : [chart]);
        }
      },
      __source: {
        fileName: _jsxFileName,
        lineNumber: 214
      },
      __self: this
    })));
  })), report && !selectedSlide && Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__["jsx"])(Center, {
    __source: {
      fileName: _jsxFileName,
      lineNumber: 225
    },
    __self: this
  }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__["jsx"])(_components_Button__WEBPACK_IMPORTED_MODULE_14__["Button"], {
    name: "create slide",
    onClick: function onClick() {
      updateReport(Object(_babel_runtime_corejs2_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_4__["default"])({}, report, {
        slides: [].concat(Object(_babel_runtime_corejs2_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_2__["default"])(report.slides), [{
          charts: []
        }])
      }));
    },
    __source: {
      fileName: _jsxFileName,
      lineNumber: 227
    },
    __self: this
  }, "Create You first Slide")), reportQuery.error && Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__["jsx"])(_components_ErrorBox__WEBPACK_IMPORTED_MODULE_10__["ErrorBox"], {
    error: reportQuery.error,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 240
    },
    __self: this
  })));
};

var Chart = Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_6__["default"])("div", {
  target: "e1nne1bm0",
  label: "Chart"
})("position:absolute;left:", function (p) {
  return p.x;
}, "px;top:", function (p) {
  return p.y;
}, "px;width:", function (p) {
  return p.width;
}, "px;height:", function (p) {
  return p.height;
}, "px;background:#f0f0f0;border:1px solid #dedede;", function (p) {
  return p.selected &&
  /*#__PURE__*/

  /*#__PURE__*/
  Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__["css"])("border:1px dashed ", _theme__WEBPACK_IMPORTED_MODULE_16__["colors"].primary, ";label:Chart;" + ( false ? undefined : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"), "label:Chart;");
}, ";" + ( false ? undefined : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));

var Center = Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_6__["default"])("div", {
  target: "e1nne1bm1",
  label: "Center"
})( false ? undefined : {
  name: "ieltvz",
  styles: "height:100%;display:grid;place-content:center center;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9hbmRyZWFzbW9sbGVyL2NvZGUvcmVwb3J0cy9jbGllbnQvUmVwb3J0L1JlcG9ydC50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBa1F5QiIsImZpbGUiOiIvVXNlcnMvYW5kcmVhc21vbGxlci9jb2RlL3JlcG9ydHMvY2xpZW50L1JlcG9ydC9SZXBvcnQudHN4Iiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgeyB1c2VSZXBvcnRHZXRRdWVyeSwgdXNlUmVwb3J0VXBkYXRlTXV0YXRpb24sIENoYXJ0RnJhZ21lbnQsIFJlcG9ydFVwZGF0ZU11dGF0aW9uVmFyaWFibGVzLCBSZXBvcnRGcmFnbWVudCwgUmVwb3J0R2V0RG9jdW1lbnQgfSBmcm9tIFwiLi4vY29kZWdlbi9ncmFwaHFsXCI7XG5pbXBvcnQgc3R5bGVkIGZyb20gXCJAZW1vdGlvbi9zdHlsZWRcIjtcbmltcG9ydCB7IEVycm9yQm94IH0gZnJvbSBcIi4uL2NvbXBvbmVudHMvRXJyb3JCb3hcIjtcbmltcG9ydCB7IENydW1icywgQ3J1bWJUaXRsZSwgQ3J1bWJMaW5rIH0gZnJvbSBcIi4uL2NvbXBvbmVudHMvQ3J1bWJzXCI7XG5pbXBvcnQgeyBIZWFkZXIsIEhlYWRlclNlY3Rpb24gfSBmcm9tIFwiLi4vY29tcG9uZW50cy9IZWFkZXJcIjtcbmltcG9ydCB7IEljb24gfSBmcm9tIFwiLi4vY29tcG9uZW50cy9JY29uXCI7XG5pbXBvcnQgeyBGbGF0QnV0dG9uLCBCdXR0b24gfSBmcm9tIFwiLi4vY29tcG9uZW50cy9CdXR0b25cIjtcbmltcG9ydCB7IHVzZVN0YXRlLCBLZXlib2FyZEV2ZW50LCB1c2VFZmZlY3QgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IGNzcywga2V5ZnJhbWVzIH0gZnJvbSBcIkBlbW90aW9uL2NvcmVcIjtcbmltcG9ydCB7IHVzZU1vdXNlRHJhZywgUG9zIH0gZnJvbSBcIi4uL2hvb2tzL2RyYWdcIjtcbmltcG9ydCB7IGNvbG9ycyB9IGZyb20gXCIuLi90aGVtZVwiO1xuaW1wb3J0IGN1aWQgZnJvbSBcImN1aWRcIlxuaW1wb3J0IERyYWdnYWJsZSBmcm9tIFwicmVhY3QtZHJhZ2dhYmxlXCJcblxudHlwZSBUb29sID1cbiAgfCBcImluc2VydF9jaGFydFwiXG4gIHwgXCJpbnNlcnRfaW1hZ2VcIlxuICB8IFwiaW5zZXJ0X3RleHRcIlxuICB8IFwic2VsZWN0XCJcblxuXG50eXBlIFNlbGVjdGlvbiA9IENoYXJ0RnJhZ21lbnRcblxuXG5jb25zdCByZW1vdmVUeXBlbmFtZSA9IChyZXBvcnQ6IFJlcG9ydEZyYWdtZW50KTogUmVwb3J0VXBkYXRlTXV0YXRpb25WYXJpYWJsZXNbXCJyZXBvcnRcIl0gPT4ge1xuICBjb25zdCB7IF9fdHlwZW5hbWUsIHNsaWRlcywgLi4ucmVwb3J0RGF0YSB9ID0gcmVwb3J0O1xuICByZXR1cm4ge1xuICAgIC4uLnJlcG9ydERhdGEsXG4gICAgc2xpZGVzOiBzbGlkZXMubWFwKCh7IF9fdHlwZW5hbWUsIGNoYXJ0cywgLi4uc2xpZGVEYXRhIH0pID0+IHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLnNsaWRlRGF0YSxcbiAgICAgICAgY2hhcnRzOiBjaGFydHMubWFwKCh7IF9fdHlwZW5hbWUsIC4uLmNoYXJ0RGF0YSB9KSA9PiB7XG4gICAgICAgICAgcmV0dXJuIGNoYXJ0RGF0YVxuICAgICAgICB9KVxuICAgICAgfVxuICAgIH0pXG4gIH1cbn1cblxuY29uc3QgZ2V0TW9kaWZpZXJzID0gKGU6IEtleWJvYXJkRXZlbnQpID0+XG4gIFtcbiAgICBlLm5hdGl2ZUV2ZW50Lm1ldGFLZXkgJiYgXCJtZXRhXCIsXG4gICAgZS5uYXRpdmVFdmVudC5jdHJsS2V5ICYmIFwiY3RybFwiLFxuICAgIGUubmF0aXZlRXZlbnQuYWx0S2V5ICYmIFwiYWx0XCIsXG4gICAgZS5uYXRpdmVFdmVudC5zaGlmdEtleSAmJiBcInNoaWZ0XCIsXG4gIF0uZmlsdGVyKEJvb2xlYW4pXG5cbmV4cG9ydCBjb25zdCBSZXBvcnRQYWdlID0gKHByb3BzOiB7IGlkOiBzdHJpbmcsIHNsaWRlPzogc3RyaW5nIH0pID0+IHtcbiAgY29uc3QgW3NjYWxlLCBzZXRTY2FsZV0gPSB1c2VTdGF0ZSgxKVxuXG5cbiAgY29uc3QgW3Rvb2wsIHNldFRvb2xdID0gdXNlU3RhdGU8VG9vbD4oXCJzZWxlY3RcIilcbiAgY29uc3QgW3NlbGVjdGlvbiwgc2V0U2VsZWN0aW9uXSA9IHVzZVN0YXRlPFNlbGVjdGlvbltdPihbXSlcbiAgY29uc3QgcmVwb3J0UXVlcnkgPSB1c2VSZXBvcnRHZXRRdWVyeSh7XG4gICAgdmFyaWFibGVzOiB7XG4gICAgICBpZDogcHJvcHMuaWRcbiAgICB9LFxuICAgIG9uQ29tcGxldGVkOiAoeyByZXBvcnQgfSkgPT4ge1xuICAgICAgc2V0U2NhbGUod2luZG93LmlubmVyV2lkdGggKiAwLjggLyByZXBvcnQud2lkdGgpXG4gICAgfVxuICB9KVxuXG4gIGNvbnN0IFtfdXBkYXRlUmVwb3J0LCB1cGRhdGVSZXBvcnRRdWVyeV0gPSB1c2VSZXBvcnRVcGRhdGVNdXRhdGlvbigpXG5cbiAgY29uc3QgdXBkYXRlUmVwb3J0ID0gKHJlcG9ydDogUmVwb3J0VXBkYXRlTXV0YXRpb25WYXJpYWJsZXNbXCJyZXBvcnRcIl0pID0+IHtcbiAgICByZXBvcnRRdWVyeS5jbGllbnQud3JpdGVRdWVyeSh7XG4gICAgICBxdWVyeTogUmVwb3J0R2V0RG9jdW1lbnQsXG4gICAgICB2YXJpYWJsZXM6IHsgaWQ6IHJlcG9ydC5pZCB9LFxuICAgICAgZGF0YToge1xuICAgICAgICByZXBvcnRcbiAgICAgIH1cbiAgICB9KVxuICAgIHJldHVybiBfdXBkYXRlUmVwb3J0KHtcbiAgICAgIHZhcmlhYmxlczoge1xuICAgICAgICByZXBvcnQ6IHJlbW92ZVR5cGVuYW1lKHJlcG9ydCBhcyBSZXBvcnRGcmFnbWVudClcbiAgICAgIH1cbiAgICB9KVxuXG4gIH1cblxuICBjb25zdCByZXBvcnQgPSByZXBvcnRRdWVyeS5kYXRhICYmIHJlcG9ydFF1ZXJ5LmRhdGEucmVwb3J0XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCBoYW5kbGVyID0gKCkgPT4ge1xuICAgICAgaWYgKHJlcG9ydCkge1xuXG4gICAgICAgIHNldFNjYWxlKHdpbmRvdy5pbm5lcldpZHRoICogMC44IC8gcmVwb3J0LndpZHRoKVxuICAgICAgfVxuICAgIH1cbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLCBoYW5kbGVyKTtcbiAgICByZXR1cm4gKCkgPT4gd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIiwgaGFuZGxlcilcbiAgfSwgW3JlcG9ydF0pXG5cbiAgY29uc3Qgc2VsZWN0ZWRTbGlkZSA9IHJlcG9ydCAmJiAocmVwb3J0LnNsaWRlcy5maW5kKHMgPT4gcy5pZCA9PT0gcHJvcHMuc2xpZGUpIHx8IHJlcG9ydC5zbGlkZXNbMF0pO1xuXG4gIGNvbnN0IGdldERyYWdCb3ggPSAocG9zOiBQb3MsIG9yaWdpbjogUG9zKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHg6IE1hdGgubWluKHBvcy54LCBvcmlnaW4ueCkgLyBzY2FsZSxcbiAgICAgIHk6IE1hdGgubWluKHBvcy55LCBvcmlnaW4ueSkgLyBzY2FsZSxcbiAgICAgIHdpZHRoOiBNYXRoLmFicyhwb3MueCAtIG9yaWdpbi54KSAvIHNjYWxlLFxuICAgICAgaGVpZ2h0OiBNYXRoLmFicyhwb3MueSAtIG9yaWdpbi55KSAvIHNjYWxlLFxuICAgIH1cbiAgfVxuXG4gIGNvbnN0IHsgZHJhZ0hhbmRsZXJzLCBkcmFnUG9zLCBkcmFnT3JpZ2luLCBpc0RyYWdnaW5nLCBwYXJlbnRSZWYgfSA9IHVzZU1vdXNlRHJhZyh7XG4gICAgb25EcmFnRW5kOiAocG9zLCBvcmlnaW4pID0+IHtcbiAgICAgIGNvbnN0IGJveCA9IGdldERyYWdCb3gocG9zLCBvcmlnaW4pO1xuICAgICAgc3dpdGNoICh0b29sKSB7XG4gICAgICAgIGNhc2UgXCJpbnNlcnRfY2hhcnRcIjoge1xuXG4gICAgICAgICAgY29uc3QgbmV3Q2hhcnQgPSB7XG4gICAgICAgICAgICBpZDogY3VpZCgpLFxuICAgICAgICAgICAgeDogTWF0aC5yb3VuZChib3gueCksXG4gICAgICAgICAgICB5OiBNYXRoLnJvdW5kKGJveC55KSxcbiAgICAgICAgICAgIHdpZHRoOiBNYXRoLnJvdW5kKGJveC53aWR0aCksXG4gICAgICAgICAgICBoZWlnaHQ6IE1hdGgucm91bmQoYm94LmhlaWdodCksXG4gICAgICAgICAgICBfX3R5cGVuYW1lOiBcIkNoYXJ0XCIgYXMgXCJDaGFydFwiXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29uc3QgbmV3UmVwb3J0ID0ge1xuICAgICAgICAgICAgLi4ucmVwb3J0LFxuICAgICAgICAgICAgc2xpZGVzOiByZXBvcnQuc2xpZGVzLm1hcChzbGlkZSA9PiB7XG4gICAgICAgICAgICAgIGlmIChzbGlkZS5pZCA9PT0gc2VsZWN0ZWRTbGlkZS5pZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAuLi5zbGlkZSxcbiAgICAgICAgICAgICAgICAgIGNoYXJ0czogWy4uLnNsaWRlLmNoYXJ0cywgbmV3Q2hhcnRdXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBzbGlkZVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH1cbiAgICAgICAgICB1cGRhdGVSZXBvcnQobmV3UmVwb3J0KVxuICAgICAgICAgIHNldFRvb2woXCJzZWxlY3RcIik7XG4gICAgICAgICAgc2V0U2VsZWN0aW9uKFtuZXdDaGFydF0pXG4gICAgICAgIH1cblxuICAgICAgfVxuICAgIH1cbiAgfSlcblxuICByZXR1cm4gKFxuICAgIDxMYXlvdXQgdGFiSW5kZXg9ey0xfSBvbktleURvd249e2UgPT4ge1xuICAgICAgY29uc3QgbW9kaWZpZXJzID0gZ2V0TW9kaWZpZXJzKGUpO1xuICAgICAgc3dpdGNoIChlLmtleSkge1xuICAgICAgICBjYXNlIFwiRXNjYXBlXCI6XG4gICAgICAgICAgc2V0VG9vbChcInNlbGVjdFwiKVxuICAgICAgICAgIGlmICh0b29sID09PSBcInNlbGVjdFwiKSB7XG4gICAgICAgICAgICBzZXRTZWxlY3Rpb24oW10pO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBjYXNlIFwiY1wiOlxuICAgICAgICAgIGlmIChtb2RpZmllcnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBzZXRUb29sKFwiaW5zZXJ0X2NoYXJ0XCIpXG4gICAgICAgICAgICByZXR1cm4gZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgY2FzZSBcImlcIjpcbiAgICAgICAgICBpZiAobW9kaWZpZXJzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgc2V0VG9vbChcImluc2VydF9pbWFnZVwiKVxuICAgICAgICAgICAgcmV0dXJuIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICB9XG4gICAgICAgIGNhc2UgXCJ0XCI6XG4gICAgICAgICAgaWYgKG1vZGlmaWVycy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHNldFRvb2woXCJpbnNlcnRfdGV4dFwiKVxuICAgICAgICAgICAgcmV0dXJuIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICB9XG4gICAgICAgIGNhc2UgXCJCYWNrc3BhY2VcIjoge1xuICAgICAgICAgIHVwZGF0ZVJlcG9ydCh7XG4gICAgICAgICAgICAuLi5yZXBvcnQsXG4gICAgICAgICAgICBzbGlkZXM6IHJlcG9ydC5zbGlkZXMubWFwKHNsaWRlID0+ICh7XG4gICAgICAgICAgICAgIC4uLnNsaWRlLFxuICAgICAgICAgICAgICBjaGFydHM6IHNsaWRlLmNoYXJ0cy5maWx0ZXIoY2hhcnQgPT4gc2VsZWN0aW9uLnNvbWUoc2VsZWN0aW9uID0+IHNlbGVjdGlvbi5pZCA9PT0gY2hhcnQuaWQpID09PSBmYWxzZSlcbiAgICAgICAgICAgIH0pKVxuICAgICAgICAgIH0pXG4gICAgICAgIH1cblxuICAgICAgfVxuICAgIH19PlxuICAgICAgeyhyZXBvcnRRdWVyeS5sb2FkaW5nIHx8IHVwZGF0ZVJlcG9ydFF1ZXJ5LmxvYWRpbmcpICYmIDxMb2FkaW5nSW5kaWNhdG9yIC8+fVxuICAgICAgPEhlYWRlcj5cbiAgICAgICAgPEhlYWRlclNlY3Rpb24+XG4gICAgICAgICAgPENydW1icz5cbiAgICAgICAgICAgIDxDcnVtYkxpbmsgaHJlZj1cIi9cIj5Ib21lPC9DcnVtYkxpbms+XG4gICAgICAgICAgICA8Q3J1bWJMaW5rIGhyZWY9XCIvXCI+UmVwb3J0czwvQ3J1bWJMaW5rPlxuICAgICAgICAgICAgPENydW1iVGl0bGU+e3JlcG9ydCA/IHJlcG9ydC50aXRsZSA6IFwiLi4uXCJ9PC9DcnVtYlRpdGxlPlxuICAgICAgICAgIDwvQ3J1bWJzID5cbiAgICAgICAgICA8TmV3RWxlbWVudHM+XG4gICAgICAgICAgICA8RmxhdEJ1dHRvbiBuYW1lPVwiaW5zZXJ0X2NoYXJ0XCIgb25DbGljaz17KCkgPT4gc2V0VG9vbChcImluc2VydF9jaGFydFwiKX0gYWN0aXZlPXt0b29sID09PSBcImluc2VydF9jaGFydFwifT5cbiAgICAgICAgICAgICAgPEljb24gaWNvbj1cImluc2VydF9jaGFydFwiIC8+XG4gICAgICAgICAgICA8L0ZsYXRCdXR0b24+XG4gICAgICAgICAgICA8RmxhdEJ1dHRvbiBuYW1lPVwiaW5zZXJ0X2ltYWdlXCIgb25DbGljaz17KCkgPT4gc2V0VG9vbChcImluc2VydF9pbWFnZVwiKX0gYWN0aXZlPXt0b29sID09PSBcImluc2VydF9pbWFnZVwifT48SWNvbiBpY29uPVwiaW5zZXJ0X3Bob3RvXCIgLz48L0ZsYXRCdXR0b24+XG4gICAgICAgICAgICA8RmxhdEJ1dHRvbiBuYW1lPVwiaW5zZXJ0X3RleHRcIiBvbkNsaWNrPXsoKSA9PiBzZXRUb29sKFwiaW5zZXJ0X3RleHRcIil9IGFjdGl2ZT17dG9vbCA9PT0gXCJpbnNlcnRfdGV4dFwifT48SWNvbiBpY29uPVwiaW5zZXJ0X3RleHRcIiAvPjwvRmxhdEJ1dHRvbj5cbiAgICAgICAgICA8L05ld0VsZW1lbnRzPlxuICAgICAgICA8L0hlYWRlclNlY3Rpb24+XG4gICAgICA8L0hlYWRlciA+XG4gICAgICA8ZGl2IHN0eWxlPXt7IHBvc2l0aW9uOiBcImFic29sdXRlXCIsIGJvdHRvbTogMTYsIHJpZ2h0OiAxNiB9fT57c2NhbGV9PC9kaXY+XG4gICAgICA8U3RhZ2UgdG9vbD17dG9vbH0gc2NhbGU9e3NjYWxlfT5cblxuICAgICAgICB7XG4gICAgICAgICAgc2VsZWN0ZWRTbGlkZSAmJlxuICAgICAgICAgIDxTbGlkZSByZWY9e3BhcmVudFJlZn0gey4uLmRyYWdIYW5kbGVyc30gd2lkdGg9e3JlcG9ydC53aWR0aH0gaGVpZ2h0PXtyZXBvcnQuaGVpZ2h0fT5cbiAgICAgICAgICAgIHtbXCJpbnNlcnRfY2hhcnRcIiwgXCJpbnNlcnRfaW1hZ2VcIiwgXCJpbnNlcnRfdGV4dFwiXS5pbmNsdWRlcyh0b29sKSAmJiBpc0RyYWdnaW5nICYmXG4gICAgICAgICAgICAgIDxEcmFnQm94IHsuLi5nZXREcmFnQm94KGRyYWdQb3MsIGRyYWdPcmlnaW4pfSAvPlxuICAgICAgICAgICAgfVxuICAgICAgICAgICAge3NlbGVjdGVkU2xpZGUuY2hhcnRzLm1hcChjaGFydCA9PiB7XG4gICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgPERyYWdnYWJsZVxuICAgICAgICAgICAgICAgICAga2V5PXtjaGFydC5pZH1cbiAgICAgICAgICAgICAgICAgIGRpc2FibGVkPXt0b29sICE9PSBcInNlbGVjdFwifVxuICAgICAgICAgICAgICAgICAgb2Zmc2V0UGFyZW50PXtwYXJlbnRSZWYuY3VycmVudH1cblxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgIDxDaGFydCBzZWxlY3RlZD17c2VsZWN0aW9uLnNvbWUocyA9PiBzLmlkID09PSBjaGFydC5pZCl9IHsuLi5jaGFydH0gb25DbGljaz17ZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0b29sID09PSBcInNlbGVjdFwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgc2V0U2VsZWN0aW9uKGUubmF0aXZlRXZlbnQuc2hpZnRLZXkgPyBbLi4uc2VsZWN0aW9uLCBjaGFydF0gOiBbY2hhcnRdKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfX0gLz5cbiAgICAgICAgICAgICAgICA8L0RyYWdnYWJsZT5cbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgfSl9XG4gICAgICAgICAgPC9TbGlkZT5cbiAgICAgICAgfVxuICAgICAgICB7cmVwb3J0ICYmICFzZWxlY3RlZFNsaWRlICYmXG4gICAgICAgICAgPENlbnRlcj5cblxuICAgICAgICAgICAgPEJ1dHRvbiBuYW1lPVwiY3JlYXRlIHNsaWRlXCIgb25DbGljaz17KCkgPT4ge1xuICAgICAgICAgICAgICB1cGRhdGVSZXBvcnQoe1xuICAgICAgICAgICAgICAgIC4uLnJlcG9ydCxcbiAgICAgICAgICAgICAgICBzbGlkZXM6IFtcbiAgICAgICAgICAgICAgICAgIC4uLnJlcG9ydC5zbGlkZXMsXG4gICAgICAgICAgICAgICAgICB7IGNoYXJ0czogW10gfVxuICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH19PlxuICAgICAgICAgICAgICBDcmVhdGUgWW91IGZpcnN0IFNsaWRlXG4gICAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgICA8L0NlbnRlcj5cbiAgICAgICAgfVxuICAgICAgICB7cmVwb3J0UXVlcnkuZXJyb3IgJiYgPEVycm9yQm94IGVycm9yPXtyZXBvcnRRdWVyeS5lcnJvcn0gLz59XG4gICAgICA8L1N0YWdlPlxuXG4gICAgPC9MYXlvdXQgPlxuICApXG59XG5cbmNvbnN0IENoYXJ0ID0gc3R5bGVkLmRpdjxDaGFydEZyYWdtZW50ICYgeyBzZWxlY3RlZDogYm9vbGVhbiB9PmBcbiAgcG9zaXRpb246YWJzb2x1dGU7XG4gIGxlZnQ6ICR7cCA9PiBwLnh9cHg7XG4gIHRvcDogJHtwID0+IHAueX1weDtcbiAgd2lkdGg6ICR7cCA9PiBwLndpZHRofXB4O1xuICBoZWlnaHQ6ICR7cCA9PiBwLmhlaWdodH1weDtcbiAgYmFja2dyb3VuZDogI2YwZjBmMDtcbiAgYm9yZGVyOiAxcHggc29saWQgI2RlZGVkZTtcbiAgJHtwID0+IHAuc2VsZWN0ZWQgJiYgY3NzYGJvcmRlcjogMXB4IGRhc2hlZCAke2NvbG9ycy5wcmltYXJ5fTtgfTtcbmBcblxuXG5jb25zdCBDZW50ZXIgPSBzdHlsZWQuZGl2YFxuICBoZWlnaHQ6MTAwJTtcbiAgZGlzcGxheTpncmlkO1xuICBwbGFjZS1jb250ZW50OmNlbnRlciBjZW50ZXI7XG4gIGBcblxuXG50eXBlIERyYWdCb3hQcm9wcyA9IHtcbiAgeDogbnVtYmVyO1xuICB5OiBudW1iZXI7XG4gIHdpZHRoOiBudW1iZXI7XG4gIGhlaWdodDogbnVtYmVyO1xufVxuXG5jb25zdCBEcmFnQm94ID0gc3R5bGVkLmRpdjxEcmFnQm94UHJvcHM+YFxuICBwb3NpdGlvbjphYnNvbHV0ZTtcbiAgd2lkdGg6JHtwID0+IHAud2lkdGh9cHg7XG4gIGhlaWdodDoke3AgPT4gcC5oZWlnaHR9cHg7XG4gIGxlZnQ6JHtwID0+IHAueH1weDtcbiAgdG9wOiR7cCA9PiBwLnl9cHg7XG4gIGJvcmRlcjogMnB4IGRhc2hlZCAke2NvbG9ycy5wcmltYXJ5fTtcbmBcblxuY29uc3QgU2xpZGUgPSBzdHlsZWQuc2VjdGlvbjx7IHdpZHRoOiBudW1iZXIsIGhlaWdodDogbnVtYmVyIH0+YFxuICBwb3NpdGlvbjpyZWxhdGl2ZTtcbiAgYmFja2dyb3VuZDp3aGl0ZTtcbiAgYm94LXNoYWRvdzogMCAxcHggNHB4IHJnYmEoMCwgMCwgMCwgMC40KTtcbiAgd2lkdGg6ICR7cCA9PiBwLndpZHRofXB4O1xuICBoZWlnaHQ6JHtwID0+IHAuaGVpZ2h0fXB4O1xuYFxuXG5jb25zdCBOZXdFbGVtZW50cyA9IHN0eWxlZC5kaXZgXG4gIGRpc3BsYXk6Z3JpZDtcbiAgZ3JpZC1hdXRvLWZsb3c6IGNvbHVtbjtcbiAgZ3JpZC1nYXA6IDRweDtcbiAgcGxhY2UtY29udGVudDogY2VudGVyIHN0YXJ0O1xuYFxuXG5cbmNvbnN0IExheW91dCA9IHN0eWxlZC5kaXZgXG4gIGRpc3BsYXk6Z3JpZDtcbiAgaGVpZ2h0OjEwMCU7XG4gIGdyaWQtZ2FwOiAzMnB4O1xuICBiYWNrZ3JvdW5kOiNmNWY1ZjU7XG4gIGdyaWQtdGVtcGxhdGUtcm93czogYXV0byAxZnI7XG4gIHBsYWNlLWNvbnRlbnQ6IHN0YXJ0IHN0cmV0Y2g7XG4gIG92ZXJmbG93OmhpZGRlbjtcbmBcblxuY29uc3QgU3RhZ2UgPSBzdHlsZWQubWFpbjx7IHRvb2w6IFRvb2wsIHNjYWxlOiBudW1iZXIgfT5gXG4gIGRpc3BsYXk6Z3JpZDtcbiAgd2lkdGg6MTAwJTtcbiAgcGxhY2UtY29udGVudDpjZW50ZXIgY2VudGVyO1xuICBvdmVyZmxvdzpoaWRkZW47XG4gICR7cCA9PiB7XG4gICAgc3dpdGNoIChwLnRvb2wpIHtcbiAgICAgIGNhc2UgXCJpbnNlcnRfY2hhcnRcIjpcbiAgICAgIGNhc2UgXCJpbnNlcnRfaW1hZ2VcIjpcbiAgICAgIGNhc2UgXCJpbnNlcnRfdGV4dFwiOlxuICAgICAgICByZXR1cm4gY3NzYFxuICAgICAgICBjdXJzb3I6IGNyb3NzaGFpcjtcbiAgICAgICAgYFxuICAgIH1cbiAgfX1cbiAgJiA+ICoge1xuICAgIHRyYW5zZm9ybTogc2NhbGUoJHtwID0+IHAuc2NhbGV9KTtcbiAgICB0cmFuc2Zvcm0tb3JpZ2luOiA1MCUgNTAlO1xuICB9XG5gXG5cblxuY29uc3QgTG9hZGluZ0luZGljYXRvciA9ICgpID0+XG4gIDxMb2FkaW5nV3JhcHBlcj5cbiAgICA8TG9hZGluZ0RvdCBkZWxheT17MH0+LjwvTG9hZGluZ0RvdD5cbiAgICA8TG9hZGluZ0RvdCBkZWxheT17MjAwfT4uPC9Mb2FkaW5nRG90PlxuICAgIDxMb2FkaW5nRG90IGRlbGF5PXs0MDB9Pi48L0xvYWRpbmdEb3Q+XG4gIDwvTG9hZGluZ1dyYXBwZXI+XG5cbmNvbnN0IGp1bXBBbmltYXRpb24gPSBrZXlmcmFtZXNgXG4gIGZyb20ge1xuICAgIG9wYWNpdHk6MDtcbiAgfVxuICB0byB7XG4gICAgb3BhY2l0eToxO1xuICB9XG5gXG5cblxuY29uc3QgTG9hZGluZ1dyYXBwZXIgPSBzdHlsZWQuZGl2YFxucG9zaXRpb246YWJzb2x1dGU7XG4gIHRvcDogMzJweDtcbiAgcmlnaHQ6IDMycHg7XG4gIGZvbnQtc2l6ZTogMnJlbTtcbmBcbmNvbnN0IExvYWRpbmdEb3QgPSBzdHlsZWQuc3Bhbjx7IGRlbGF5OiBudW1iZXIgfT5gXG4gIGFuaW1hdGlvbjoke2p1bXBBbmltYXRpb259IDFzIGVhc2UgaW5maW5pdGU7XG4gIGFuaW1hdGlvbi1kZWxheToke3AgPT4gcC5kZWxheX1tcztcbmAiXX0= */"
});

var DragBox = Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_6__["default"])("div", {
  target: "e1nne1bm2",
  label: "DragBox"
})("position:absolute;width:", function (p) {
  return p.width;
}, "px;height:", function (p) {
  return p.height;
}, "px;left:", function (p) {
  return p.x;
}, "px;top:", function (p) {
  return p.y;
}, "px;border:2px dashed ", _theme__WEBPACK_IMPORTED_MODULE_16__["colors"].primary, ";" + ( false ? undefined : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));

var Slide = Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_6__["default"])("section", {
  target: "e1nne1bm3",
  label: "Slide"
})("position:relative;background:white;box-shadow:0 1px 4px rgba(0,0,0,0.4);width:", function (p) {
  return p.width;
}, "px;height:", function (p) {
  return p.height;
}, "px;" + ( false ? undefined : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));

var NewElements = Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_6__["default"])("div", {
  target: "e1nne1bm4",
  label: "NewElements"
})( false ? undefined : {
  name: "ecvamz",
  styles: "display:grid;grid-auto-flow:column;grid-gap:4px;place-content:center start;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"
});

var Layout = Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_6__["default"])("div", {
  target: "e1nne1bm5",
  label: "Layout"
})( false ? undefined : {
  name: "1dsk5u3",
  styles: "display:grid;height:100%;grid-gap:32px;background:#f5f5f5;grid-template-rows:auto 1fr;place-content:start stretch;overflow:hidden;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"
});

var _ref =  false ? undefined : {
  name: "gcwr8i-Stage",
  styles: "cursor:crosshair;label:Stage;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"
};

var Stage = Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_6__["default"])("main", {
  target: "e1nne1bm6",
  label: "Stage"
})("display:grid;width:100%;place-content:center center;overflow:hidden;", function (p) {
  switch (p.tool) {
    case "insert_chart":
    case "insert_image":
    case "insert_text":
      return (
        /*#__PURE__*/
        _ref
      );
  }
}, " & > *{transform:scale(", function (p) {
  return p.scale;
}, ");transform-origin:50% 50%;}" + ( false ? undefined : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));

var LoadingIndicator = function LoadingIndicator() {
  return Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__["jsx"])(LoadingWrapper, {
    __source: {
      fileName: _jsxFileName,
      lineNumber: 331
    },
    __self: this
  }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__["jsx"])(LoadingDot, {
    delay: 0,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 332
    },
    __self: this
  }, "."), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__["jsx"])(LoadingDot, {
    delay: 200,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 333
    },
    __self: this
  }, "."), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__["jsx"])(LoadingDot, {
    delay: 400,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 334
    },
    __self: this
  }, "."));
};

var jumpAnimation = Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__["keyframes"])(_templateObject());

var LoadingWrapper = Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_6__["default"])("div", {
  target: "e1nne1bm7",
  label: "LoadingWrapper"
})( false ? undefined : {
  name: "117pp3l",
  styles: "position:absolute;top:32px;right:32px;font-size:2rem;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"
});

var LoadingDot = Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_6__["default"])("span", {
  target: "e1nne1bm8",
  label: "LoadingDot"
})("animation:", jumpAnimation, " 1s ease infinite;animation-delay:", function (p) {
  return p.delay;
}, "ms;" + ( false ? undefined : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9hbmRyZWFzbW9sbGVyL2NvZGUvcmVwb3J0cy9jbGllbnQvUmVwb3J0L1JlcG9ydC50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBZ1dpRCIsImZpbGUiOiIvVXNlcnMvYW5kcmVhc21vbGxlci9jb2RlL3JlcG9ydHMvY2xpZW50L1JlcG9ydC9SZXBvcnQudHN4Iiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgeyB1c2VSZXBvcnRHZXRRdWVyeSwgdXNlUmVwb3J0VXBkYXRlTXV0YXRpb24sIENoYXJ0RnJhZ21lbnQsIFJlcG9ydFVwZGF0ZU11dGF0aW9uVmFyaWFibGVzLCBSZXBvcnRGcmFnbWVudCwgUmVwb3J0R2V0RG9jdW1lbnQgfSBmcm9tIFwiLi4vY29kZWdlbi9ncmFwaHFsXCI7XG5pbXBvcnQgc3R5bGVkIGZyb20gXCJAZW1vdGlvbi9zdHlsZWRcIjtcbmltcG9ydCB7IEVycm9yQm94IH0gZnJvbSBcIi4uL2NvbXBvbmVudHMvRXJyb3JCb3hcIjtcbmltcG9ydCB7IENydW1icywgQ3J1bWJUaXRsZSwgQ3J1bWJMaW5rIH0gZnJvbSBcIi4uL2NvbXBvbmVudHMvQ3J1bWJzXCI7XG5pbXBvcnQgeyBIZWFkZXIsIEhlYWRlclNlY3Rpb24gfSBmcm9tIFwiLi4vY29tcG9uZW50cy9IZWFkZXJcIjtcbmltcG9ydCB7IEljb24gfSBmcm9tIFwiLi4vY29tcG9uZW50cy9JY29uXCI7XG5pbXBvcnQgeyBGbGF0QnV0dG9uLCBCdXR0b24gfSBmcm9tIFwiLi4vY29tcG9uZW50cy9CdXR0b25cIjtcbmltcG9ydCB7IHVzZVN0YXRlLCBLZXlib2FyZEV2ZW50LCB1c2VFZmZlY3QgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IGNzcywga2V5ZnJhbWVzIH0gZnJvbSBcIkBlbW90aW9uL2NvcmVcIjtcbmltcG9ydCB7IHVzZU1vdXNlRHJhZywgUG9zIH0gZnJvbSBcIi4uL2hvb2tzL2RyYWdcIjtcbmltcG9ydCB7IGNvbG9ycyB9IGZyb20gXCIuLi90aGVtZVwiO1xuaW1wb3J0IGN1aWQgZnJvbSBcImN1aWRcIlxuaW1wb3J0IERyYWdnYWJsZSBmcm9tIFwicmVhY3QtZHJhZ2dhYmxlXCJcblxudHlwZSBUb29sID1cbiAgfCBcImluc2VydF9jaGFydFwiXG4gIHwgXCJpbnNlcnRfaW1hZ2VcIlxuICB8IFwiaW5zZXJ0X3RleHRcIlxuICB8IFwic2VsZWN0XCJcblxuXG50eXBlIFNlbGVjdGlvbiA9IENoYXJ0RnJhZ21lbnRcblxuXG5jb25zdCByZW1vdmVUeXBlbmFtZSA9IChyZXBvcnQ6IFJlcG9ydEZyYWdtZW50KTogUmVwb3J0VXBkYXRlTXV0YXRpb25WYXJpYWJsZXNbXCJyZXBvcnRcIl0gPT4ge1xuICBjb25zdCB7IF9fdHlwZW5hbWUsIHNsaWRlcywgLi4ucmVwb3J0RGF0YSB9ID0gcmVwb3J0O1xuICByZXR1cm4ge1xuICAgIC4uLnJlcG9ydERhdGEsXG4gICAgc2xpZGVzOiBzbGlkZXMubWFwKCh7IF9fdHlwZW5hbWUsIGNoYXJ0cywgLi4uc2xpZGVEYXRhIH0pID0+IHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLnNsaWRlRGF0YSxcbiAgICAgICAgY2hhcnRzOiBjaGFydHMubWFwKCh7IF9fdHlwZW5hbWUsIC4uLmNoYXJ0RGF0YSB9KSA9PiB7XG4gICAgICAgICAgcmV0dXJuIGNoYXJ0RGF0YVxuICAgICAgICB9KVxuICAgICAgfVxuICAgIH0pXG4gIH1cbn1cblxuY29uc3QgZ2V0TW9kaWZpZXJzID0gKGU6IEtleWJvYXJkRXZlbnQpID0+XG4gIFtcbiAgICBlLm5hdGl2ZUV2ZW50Lm1ldGFLZXkgJiYgXCJtZXRhXCIsXG4gICAgZS5uYXRpdmVFdmVudC5jdHJsS2V5ICYmIFwiY3RybFwiLFxuICAgIGUubmF0aXZlRXZlbnQuYWx0S2V5ICYmIFwiYWx0XCIsXG4gICAgZS5uYXRpdmVFdmVudC5zaGlmdEtleSAmJiBcInNoaWZ0XCIsXG4gIF0uZmlsdGVyKEJvb2xlYW4pXG5cbmV4cG9ydCBjb25zdCBSZXBvcnRQYWdlID0gKHByb3BzOiB7IGlkOiBzdHJpbmcsIHNsaWRlPzogc3RyaW5nIH0pID0+IHtcbiAgY29uc3QgW3NjYWxlLCBzZXRTY2FsZV0gPSB1c2VTdGF0ZSgxKVxuXG5cbiAgY29uc3QgW3Rvb2wsIHNldFRvb2xdID0gdXNlU3RhdGU8VG9vbD4oXCJzZWxlY3RcIilcbiAgY29uc3QgW3NlbGVjdGlvbiwgc2V0U2VsZWN0aW9uXSA9IHVzZVN0YXRlPFNlbGVjdGlvbltdPihbXSlcbiAgY29uc3QgcmVwb3J0UXVlcnkgPSB1c2VSZXBvcnRHZXRRdWVyeSh7XG4gICAgdmFyaWFibGVzOiB7XG4gICAgICBpZDogcHJvcHMuaWRcbiAgICB9LFxuICAgIG9uQ29tcGxldGVkOiAoeyByZXBvcnQgfSkgPT4ge1xuICAgICAgc2V0U2NhbGUod2luZG93LmlubmVyV2lkdGggKiAwLjggLyByZXBvcnQud2lkdGgpXG4gICAgfVxuICB9KVxuXG4gIGNvbnN0IFtfdXBkYXRlUmVwb3J0LCB1cGRhdGVSZXBvcnRRdWVyeV0gPSB1c2VSZXBvcnRVcGRhdGVNdXRhdGlvbigpXG5cbiAgY29uc3QgdXBkYXRlUmVwb3J0ID0gKHJlcG9ydDogUmVwb3J0VXBkYXRlTXV0YXRpb25WYXJpYWJsZXNbXCJyZXBvcnRcIl0pID0+IHtcbiAgICByZXBvcnRRdWVyeS5jbGllbnQud3JpdGVRdWVyeSh7XG4gICAgICBxdWVyeTogUmVwb3J0R2V0RG9jdW1lbnQsXG4gICAgICB2YXJpYWJsZXM6IHsgaWQ6IHJlcG9ydC5pZCB9LFxuICAgICAgZGF0YToge1xuICAgICAgICByZXBvcnRcbiAgICAgIH1cbiAgICB9KVxuICAgIHJldHVybiBfdXBkYXRlUmVwb3J0KHtcbiAgICAgIHZhcmlhYmxlczoge1xuICAgICAgICByZXBvcnQ6IHJlbW92ZVR5cGVuYW1lKHJlcG9ydCBhcyBSZXBvcnRGcmFnbWVudClcbiAgICAgIH1cbiAgICB9KVxuXG4gIH1cblxuICBjb25zdCByZXBvcnQgPSByZXBvcnRRdWVyeS5kYXRhICYmIHJlcG9ydFF1ZXJ5LmRhdGEucmVwb3J0XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCBoYW5kbGVyID0gKCkgPT4ge1xuICAgICAgaWYgKHJlcG9ydCkge1xuXG4gICAgICAgIHNldFNjYWxlKHdpbmRvdy5pbm5lcldpZHRoICogMC44IC8gcmVwb3J0LndpZHRoKVxuICAgICAgfVxuICAgIH1cbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLCBoYW5kbGVyKTtcbiAgICByZXR1cm4gKCkgPT4gd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIiwgaGFuZGxlcilcbiAgfSwgW3JlcG9ydF0pXG5cbiAgY29uc3Qgc2VsZWN0ZWRTbGlkZSA9IHJlcG9ydCAmJiAocmVwb3J0LnNsaWRlcy5maW5kKHMgPT4gcy5pZCA9PT0gcHJvcHMuc2xpZGUpIHx8IHJlcG9ydC5zbGlkZXNbMF0pO1xuXG4gIGNvbnN0IGdldERyYWdCb3ggPSAocG9zOiBQb3MsIG9yaWdpbjogUG9zKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHg6IE1hdGgubWluKHBvcy54LCBvcmlnaW4ueCkgLyBzY2FsZSxcbiAgICAgIHk6IE1hdGgubWluKHBvcy55LCBvcmlnaW4ueSkgLyBzY2FsZSxcbiAgICAgIHdpZHRoOiBNYXRoLmFicyhwb3MueCAtIG9yaWdpbi54KSAvIHNjYWxlLFxuICAgICAgaGVpZ2h0OiBNYXRoLmFicyhwb3MueSAtIG9yaWdpbi55KSAvIHNjYWxlLFxuICAgIH1cbiAgfVxuXG4gIGNvbnN0IHsgZHJhZ0hhbmRsZXJzLCBkcmFnUG9zLCBkcmFnT3JpZ2luLCBpc0RyYWdnaW5nLCBwYXJlbnRSZWYgfSA9IHVzZU1vdXNlRHJhZyh7XG4gICAgb25EcmFnRW5kOiAocG9zLCBvcmlnaW4pID0+IHtcbiAgICAgIGNvbnN0IGJveCA9IGdldERyYWdCb3gocG9zLCBvcmlnaW4pO1xuICAgICAgc3dpdGNoICh0b29sKSB7XG4gICAgICAgIGNhc2UgXCJpbnNlcnRfY2hhcnRcIjoge1xuXG4gICAgICAgICAgY29uc3QgbmV3Q2hhcnQgPSB7XG4gICAgICAgICAgICBpZDogY3VpZCgpLFxuICAgICAgICAgICAgeDogTWF0aC5yb3VuZChib3gueCksXG4gICAgICAgICAgICB5OiBNYXRoLnJvdW5kKGJveC55KSxcbiAgICAgICAgICAgIHdpZHRoOiBNYXRoLnJvdW5kKGJveC53aWR0aCksXG4gICAgICAgICAgICBoZWlnaHQ6IE1hdGgucm91bmQoYm94LmhlaWdodCksXG4gICAgICAgICAgICBfX3R5cGVuYW1lOiBcIkNoYXJ0XCIgYXMgXCJDaGFydFwiXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29uc3QgbmV3UmVwb3J0ID0ge1xuICAgICAgICAgICAgLi4ucmVwb3J0LFxuICAgICAgICAgICAgc2xpZGVzOiByZXBvcnQuc2xpZGVzLm1hcChzbGlkZSA9PiB7XG4gICAgICAgICAgICAgIGlmIChzbGlkZS5pZCA9PT0gc2VsZWN0ZWRTbGlkZS5pZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAuLi5zbGlkZSxcbiAgICAgICAgICAgICAgICAgIGNoYXJ0czogWy4uLnNsaWRlLmNoYXJ0cywgbmV3Q2hhcnRdXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBzbGlkZVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH1cbiAgICAgICAgICB1cGRhdGVSZXBvcnQobmV3UmVwb3J0KVxuICAgICAgICAgIHNldFRvb2woXCJzZWxlY3RcIik7XG4gICAgICAgICAgc2V0U2VsZWN0aW9uKFtuZXdDaGFydF0pXG4gICAgICAgIH1cblxuICAgICAgfVxuICAgIH1cbiAgfSlcblxuICByZXR1cm4gKFxuICAgIDxMYXlvdXQgdGFiSW5kZXg9ey0xfSBvbktleURvd249e2UgPT4ge1xuICAgICAgY29uc3QgbW9kaWZpZXJzID0gZ2V0TW9kaWZpZXJzKGUpO1xuICAgICAgc3dpdGNoIChlLmtleSkge1xuICAgICAgICBjYXNlIFwiRXNjYXBlXCI6XG4gICAgICAgICAgc2V0VG9vbChcInNlbGVjdFwiKVxuICAgICAgICAgIGlmICh0b29sID09PSBcInNlbGVjdFwiKSB7XG4gICAgICAgICAgICBzZXRTZWxlY3Rpb24oW10pO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBjYXNlIFwiY1wiOlxuICAgICAgICAgIGlmIChtb2RpZmllcnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBzZXRUb29sKFwiaW5zZXJ0X2NoYXJ0XCIpXG4gICAgICAgICAgICByZXR1cm4gZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgY2FzZSBcImlcIjpcbiAgICAgICAgICBpZiAobW9kaWZpZXJzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgc2V0VG9vbChcImluc2VydF9pbWFnZVwiKVxuICAgICAgICAgICAgcmV0dXJuIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICB9XG4gICAgICAgIGNhc2UgXCJ0XCI6XG4gICAgICAgICAgaWYgKG1vZGlmaWVycy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHNldFRvb2woXCJpbnNlcnRfdGV4dFwiKVxuICAgICAgICAgICAgcmV0dXJuIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICB9XG4gICAgICAgIGNhc2UgXCJCYWNrc3BhY2VcIjoge1xuICAgICAgICAgIHVwZGF0ZVJlcG9ydCh7XG4gICAgICAgICAgICAuLi5yZXBvcnQsXG4gICAgICAgICAgICBzbGlkZXM6IHJlcG9ydC5zbGlkZXMubWFwKHNsaWRlID0+ICh7XG4gICAgICAgICAgICAgIC4uLnNsaWRlLFxuICAgICAgICAgICAgICBjaGFydHM6IHNsaWRlLmNoYXJ0cy5maWx0ZXIoY2hhcnQgPT4gc2VsZWN0aW9uLnNvbWUoc2VsZWN0aW9uID0+IHNlbGVjdGlvbi5pZCA9PT0gY2hhcnQuaWQpID09PSBmYWxzZSlcbiAgICAgICAgICAgIH0pKVxuICAgICAgICAgIH0pXG4gICAgICAgIH1cblxuICAgICAgfVxuICAgIH19PlxuICAgICAgeyhyZXBvcnRRdWVyeS5sb2FkaW5nIHx8IHVwZGF0ZVJlcG9ydFF1ZXJ5LmxvYWRpbmcpICYmIDxMb2FkaW5nSW5kaWNhdG9yIC8+fVxuICAgICAgPEhlYWRlcj5cbiAgICAgICAgPEhlYWRlclNlY3Rpb24+XG4gICAgICAgICAgPENydW1icz5cbiAgICAgICAgICAgIDxDcnVtYkxpbmsgaHJlZj1cIi9cIj5Ib21lPC9DcnVtYkxpbms+XG4gICAgICAgICAgICA8Q3J1bWJMaW5rIGhyZWY9XCIvXCI+UmVwb3J0czwvQ3J1bWJMaW5rPlxuICAgICAgICAgICAgPENydW1iVGl0bGU+e3JlcG9ydCA/IHJlcG9ydC50aXRsZSA6IFwiLi4uXCJ9PC9DcnVtYlRpdGxlPlxuICAgICAgICAgIDwvQ3J1bWJzID5cbiAgICAgICAgICA8TmV3RWxlbWVudHM+XG4gICAgICAgICAgICA8RmxhdEJ1dHRvbiBuYW1lPVwiaW5zZXJ0X2NoYXJ0XCIgb25DbGljaz17KCkgPT4gc2V0VG9vbChcImluc2VydF9jaGFydFwiKX0gYWN0aXZlPXt0b29sID09PSBcImluc2VydF9jaGFydFwifT5cbiAgICAgICAgICAgICAgPEljb24gaWNvbj1cImluc2VydF9jaGFydFwiIC8+XG4gICAgICAgICAgICA8L0ZsYXRCdXR0b24+XG4gICAgICAgICAgICA8RmxhdEJ1dHRvbiBuYW1lPVwiaW5zZXJ0X2ltYWdlXCIgb25DbGljaz17KCkgPT4gc2V0VG9vbChcImluc2VydF9pbWFnZVwiKX0gYWN0aXZlPXt0b29sID09PSBcImluc2VydF9pbWFnZVwifT48SWNvbiBpY29uPVwiaW5zZXJ0X3Bob3RvXCIgLz48L0ZsYXRCdXR0b24+XG4gICAgICAgICAgICA8RmxhdEJ1dHRvbiBuYW1lPVwiaW5zZXJ0X3RleHRcIiBvbkNsaWNrPXsoKSA9PiBzZXRUb29sKFwiaW5zZXJ0X3RleHRcIil9IGFjdGl2ZT17dG9vbCA9PT0gXCJpbnNlcnRfdGV4dFwifT48SWNvbiBpY29uPVwiaW5zZXJ0X3RleHRcIiAvPjwvRmxhdEJ1dHRvbj5cbiAgICAgICAgICA8L05ld0VsZW1lbnRzPlxuICAgICAgICA8L0hlYWRlclNlY3Rpb24+XG4gICAgICA8L0hlYWRlciA+XG4gICAgICA8ZGl2IHN0eWxlPXt7IHBvc2l0aW9uOiBcImFic29sdXRlXCIsIGJvdHRvbTogMTYsIHJpZ2h0OiAxNiB9fT57c2NhbGV9PC9kaXY+XG4gICAgICA8U3RhZ2UgdG9vbD17dG9vbH0gc2NhbGU9e3NjYWxlfT5cblxuICAgICAgICB7XG4gICAgICAgICAgc2VsZWN0ZWRTbGlkZSAmJlxuICAgICAgICAgIDxTbGlkZSByZWY9e3BhcmVudFJlZn0gey4uLmRyYWdIYW5kbGVyc30gd2lkdGg9e3JlcG9ydC53aWR0aH0gaGVpZ2h0PXtyZXBvcnQuaGVpZ2h0fT5cbiAgICAgICAgICAgIHtbXCJpbnNlcnRfY2hhcnRcIiwgXCJpbnNlcnRfaW1hZ2VcIiwgXCJpbnNlcnRfdGV4dFwiXS5pbmNsdWRlcyh0b29sKSAmJiBpc0RyYWdnaW5nICYmXG4gICAgICAgICAgICAgIDxEcmFnQm94IHsuLi5nZXREcmFnQm94KGRyYWdQb3MsIGRyYWdPcmlnaW4pfSAvPlxuICAgICAgICAgICAgfVxuICAgICAgICAgICAge3NlbGVjdGVkU2xpZGUuY2hhcnRzLm1hcChjaGFydCA9PiB7XG4gICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgPERyYWdnYWJsZVxuICAgICAgICAgICAgICAgICAga2V5PXtjaGFydC5pZH1cbiAgICAgICAgICAgICAgICAgIGRpc2FibGVkPXt0b29sICE9PSBcInNlbGVjdFwifVxuICAgICAgICAgICAgICAgICAgb2Zmc2V0UGFyZW50PXtwYXJlbnRSZWYuY3VycmVudH1cblxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgIDxDaGFydCBzZWxlY3RlZD17c2VsZWN0aW9uLnNvbWUocyA9PiBzLmlkID09PSBjaGFydC5pZCl9IHsuLi5jaGFydH0gb25DbGljaz17ZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0b29sID09PSBcInNlbGVjdFwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgc2V0U2VsZWN0aW9uKGUubmF0aXZlRXZlbnQuc2hpZnRLZXkgPyBbLi4uc2VsZWN0aW9uLCBjaGFydF0gOiBbY2hhcnRdKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfX0gLz5cbiAgICAgICAgICAgICAgICA8L0RyYWdnYWJsZT5cbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgfSl9XG4gICAgICAgICAgPC9TbGlkZT5cbiAgICAgICAgfVxuICAgICAgICB7cmVwb3J0ICYmICFzZWxlY3RlZFNsaWRlICYmXG4gICAgICAgICAgPENlbnRlcj5cblxuICAgICAgICAgICAgPEJ1dHRvbiBuYW1lPVwiY3JlYXRlIHNsaWRlXCIgb25DbGljaz17KCkgPT4ge1xuICAgICAgICAgICAgICB1cGRhdGVSZXBvcnQoe1xuICAgICAgICAgICAgICAgIC4uLnJlcG9ydCxcbiAgICAgICAgICAgICAgICBzbGlkZXM6IFtcbiAgICAgICAgICAgICAgICAgIC4uLnJlcG9ydC5zbGlkZXMsXG4gICAgICAgICAgICAgICAgICB7IGNoYXJ0czogW10gfVxuICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH19PlxuICAgICAgICAgICAgICBDcmVhdGUgWW91IGZpcnN0IFNsaWRlXG4gICAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgICA8L0NlbnRlcj5cbiAgICAgICAgfVxuICAgICAgICB7cmVwb3J0UXVlcnkuZXJyb3IgJiYgPEVycm9yQm94IGVycm9yPXtyZXBvcnRRdWVyeS5lcnJvcn0gLz59XG4gICAgICA8L1N0YWdlPlxuXG4gICAgPC9MYXlvdXQgPlxuICApXG59XG5cbmNvbnN0IENoYXJ0ID0gc3R5bGVkLmRpdjxDaGFydEZyYWdtZW50ICYgeyBzZWxlY3RlZDogYm9vbGVhbiB9PmBcbiAgcG9zaXRpb246YWJzb2x1dGU7XG4gIGxlZnQ6ICR7cCA9PiBwLnh9cHg7XG4gIHRvcDogJHtwID0+IHAueX1weDtcbiAgd2lkdGg6ICR7cCA9PiBwLndpZHRofXB4O1xuICBoZWlnaHQ6ICR7cCA9PiBwLmhlaWdodH1weDtcbiAgYmFja2dyb3VuZDogI2YwZjBmMDtcbiAgYm9yZGVyOiAxcHggc29saWQgI2RlZGVkZTtcbiAgJHtwID0+IHAuc2VsZWN0ZWQgJiYgY3NzYGJvcmRlcjogMXB4IGRhc2hlZCAke2NvbG9ycy5wcmltYXJ5fTtgfTtcbmBcblxuXG5jb25zdCBDZW50ZXIgPSBzdHlsZWQuZGl2YFxuICBoZWlnaHQ6MTAwJTtcbiAgZGlzcGxheTpncmlkO1xuICBwbGFjZS1jb250ZW50OmNlbnRlciBjZW50ZXI7XG4gIGBcblxuXG50eXBlIERyYWdCb3hQcm9wcyA9IHtcbiAgeDogbnVtYmVyO1xuICB5OiBudW1iZXI7XG4gIHdpZHRoOiBudW1iZXI7XG4gIGhlaWdodDogbnVtYmVyO1xufVxuXG5jb25zdCBEcmFnQm94ID0gc3R5bGVkLmRpdjxEcmFnQm94UHJvcHM+YFxuICBwb3NpdGlvbjphYnNvbHV0ZTtcbiAgd2lkdGg6JHtwID0+IHAud2lkdGh9cHg7XG4gIGhlaWdodDoke3AgPT4gcC5oZWlnaHR9cHg7XG4gIGxlZnQ6JHtwID0+IHAueH1weDtcbiAgdG9wOiR7cCA9PiBwLnl9cHg7XG4gIGJvcmRlcjogMnB4IGRhc2hlZCAke2NvbG9ycy5wcmltYXJ5fTtcbmBcblxuY29uc3QgU2xpZGUgPSBzdHlsZWQuc2VjdGlvbjx7IHdpZHRoOiBudW1iZXIsIGhlaWdodDogbnVtYmVyIH0+YFxuICBwb3NpdGlvbjpyZWxhdGl2ZTtcbiAgYmFja2dyb3VuZDp3aGl0ZTtcbiAgYm94LXNoYWRvdzogMCAxcHggNHB4IHJnYmEoMCwgMCwgMCwgMC40KTtcbiAgd2lkdGg6ICR7cCA9PiBwLndpZHRofXB4O1xuICBoZWlnaHQ6JHtwID0+IHAuaGVpZ2h0fXB4O1xuYFxuXG5jb25zdCBOZXdFbGVtZW50cyA9IHN0eWxlZC5kaXZgXG4gIGRpc3BsYXk6Z3JpZDtcbiAgZ3JpZC1hdXRvLWZsb3c6IGNvbHVtbjtcbiAgZ3JpZC1nYXA6IDRweDtcbiAgcGxhY2UtY29udGVudDogY2VudGVyIHN0YXJ0O1xuYFxuXG5cbmNvbnN0IExheW91dCA9IHN0eWxlZC5kaXZgXG4gIGRpc3BsYXk6Z3JpZDtcbiAgaGVpZ2h0OjEwMCU7XG4gIGdyaWQtZ2FwOiAzMnB4O1xuICBiYWNrZ3JvdW5kOiNmNWY1ZjU7XG4gIGdyaWQtdGVtcGxhdGUtcm93czogYXV0byAxZnI7XG4gIHBsYWNlLWNvbnRlbnQ6IHN0YXJ0IHN0cmV0Y2g7XG4gIG92ZXJmbG93OmhpZGRlbjtcbmBcblxuY29uc3QgU3RhZ2UgPSBzdHlsZWQubWFpbjx7IHRvb2w6IFRvb2wsIHNjYWxlOiBudW1iZXIgfT5gXG4gIGRpc3BsYXk6Z3JpZDtcbiAgd2lkdGg6MTAwJTtcbiAgcGxhY2UtY29udGVudDpjZW50ZXIgY2VudGVyO1xuICBvdmVyZmxvdzpoaWRkZW47XG4gICR7cCA9PiB7XG4gICAgc3dpdGNoIChwLnRvb2wpIHtcbiAgICAgIGNhc2UgXCJpbnNlcnRfY2hhcnRcIjpcbiAgICAgIGNhc2UgXCJpbnNlcnRfaW1hZ2VcIjpcbiAgICAgIGNhc2UgXCJpbnNlcnRfdGV4dFwiOlxuICAgICAgICByZXR1cm4gY3NzYFxuICAgICAgICBjdXJzb3I6IGNyb3NzaGFpcjtcbiAgICAgICAgYFxuICAgIH1cbiAgfX1cbiAgJiA+ICoge1xuICAgIHRyYW5zZm9ybTogc2NhbGUoJHtwID0+IHAuc2NhbGV9KTtcbiAgICB0cmFuc2Zvcm0tb3JpZ2luOiA1MCUgNTAlO1xuICB9XG5gXG5cblxuY29uc3QgTG9hZGluZ0luZGljYXRvciA9ICgpID0+XG4gIDxMb2FkaW5nV3JhcHBlcj5cbiAgICA8TG9hZGluZ0RvdCBkZWxheT17MH0+LjwvTG9hZGluZ0RvdD5cbiAgICA8TG9hZGluZ0RvdCBkZWxheT17MjAwfT4uPC9Mb2FkaW5nRG90PlxuICAgIDxMb2FkaW5nRG90IGRlbGF5PXs0MDB9Pi48L0xvYWRpbmdEb3Q+XG4gIDwvTG9hZGluZ1dyYXBwZXI+XG5cbmNvbnN0IGp1bXBBbmltYXRpb24gPSBrZXlmcmFtZXNgXG4gIGZyb20ge1xuICAgIG9wYWNpdHk6MDtcbiAgfVxuICB0byB7XG4gICAgb3BhY2l0eToxO1xuICB9XG5gXG5cblxuY29uc3QgTG9hZGluZ1dyYXBwZXIgPSBzdHlsZWQuZGl2YFxucG9zaXRpb246YWJzb2x1dGU7XG4gIHRvcDogMzJweDtcbiAgcmlnaHQ6IDMycHg7XG4gIGZvbnQtc2l6ZTogMnJlbTtcbmBcbmNvbnN0IExvYWRpbmdEb3QgPSBzdHlsZWQuc3Bhbjx7IGRlbGF5OiBudW1iZXIgfT5gXG4gIGFuaW1hdGlvbjoke2p1bXBBbmltYXRpb259IDFzIGVhc2UgaW5maW5pdGU7XG4gIGFuaW1hdGlvbi1kZWxheToke3AgPT4gcC5kZWxheX1tcztcbmAiXX0= */"));

/***/ })

})
//# sourceMappingURL=[reportId].js.a7f7564295ad74d60d9d.hot-update.js.map