{"version":3,"file":"static/development/pages/login.js","sources":["webpack:///webpack/bootstrap","webpack:///./client/Login/index.tsx","webpack:///./client/codegen/graphql.ts","webpack:///./client/components/Page.tsx","webpack:///./pages/login.tsx","webpack:///external \"@apollo/react-hooks\"","webpack:///external \"@emotion/core\"","webpack:///external \"@emotion/styled-base\"","webpack:///external \"apollo-boost\"","webpack:///external \"graphql-tag\"","webpack:///external \"isomorphic-fetch\"","webpack:///external \"next/router\"","webpack:///external \"react\""],"sourcesContent":[" \t// The module cache\n \tvar installedModules = require('../../../ssr-module-cache.js');\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tvar threw = true;\n \t\ttry {\n \t\t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n \t\t\tthrew = false;\n \t\t} finally {\n \t\t\tif(threw) delete installedModules[moduleId];\n \t\t}\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 5);\n","import React, { useState } from \"react\"\nimport { useSignInMutation } from \"../codegen/graphql\"\nimport Router from \"next/router\";\nimport styled from \"@emotion/styled\";\n\n\nexport const LoginPage = () => {\n  const [email, setEmail] = useState(\"\")\n  const [login, loginRequest] = useSignInMutation()\n  return (\n    <Layout>\n      <Form\n        onSubmit={async e => {\n          e.preventDefault();\n          await login({\n            variables: {\n              email\n            }\n          })\n          Router.push(\"/check-email\")\n        }}>\n        <EmailInput value={email} onChange={e => setEmail(e.target.value)} />\n        <SendButton disabled={loginRequest.loading} type=\"submit\">\n          {loginRequest.loading ? \"...\" : \"SEND\"}\n        </SendButton>\n      </Form>\n    </Layout>\n  )\n}\n\nconst Layout = styled.div`\n  display:grid;\n  height:100%;\n  place-content:center center;\n  grid-auto-columns: 600px;\n  @media (max-width: 700px) {\n    grid-auto-columns: 80%;\n  }\n`\n\n\n\nconst Form = styled.form`\n  display:grid;\n  grid-template-columns: 1fr auto;\n  background:white;\n  box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.25);\n  border-radius: 2px;\n  @media (max-width: 700px) {\n    width: 100%;\n  }\n`\n\nconst EmailInput = styled.input`\n  height: 50px;\n  padding: 16px;\n  width:auto;\n  font-family: 'Montserrat', sans-serif;\n  color:#4b4b4b;\n  ::placeholder {\n    color:#8C8B8C;\n  }\n  border: 1px solid transparent;\n  :focus {\n    outline:none;\n    border-color: #EF536F;\n  }\n  font-size: 1.5rem;\n  font-family: 'Montserrat', sans-serif;\n  border: 1px solid transparent;\n`\n\nconst SendButton = styled(\"button\")`\ndisplay:block;\nheight:100%;\nbackground: linear-gradient(180deg, #EF536F 0%, #CC475F 100%);\nborder:none;\nborder-radius: 0px 2px 2px 0px;\nwidth: 77px;\ncolor:white;\n:focus {\n  outline:none;\n  box-shadow: 0 0 10px #fb5875;\n}\n\n`\n\n","import gql from 'graphql-tag';\nimport * as ApolloReactCommon from '@apollo/react-common';\nimport * as ApolloReactHooks from '@apollo/react-hooks';\nexport type Maybe<T> = T | null;\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string,\n  String: string,\n  Boolean: boolean,\n  Int: number,\n  Float: number,\n  Date: any,\n};\n\nexport type Chart = {\n   __typename?: 'Chart',\n  id: Scalars['ID'],\n  slide: Slide,\n  x: Scalars['Int'],\n  y: Scalars['Int'],\n  width: Scalars['Int'],\n  height: Scalars['Int'],\n};\n\nexport type ChartInput = {\n  id?: Maybe<Scalars['ID']>,\n  x: Scalars['Int'],\n  y: Scalars['Int'],\n  width: Scalars['Int'],\n  height: Scalars['Int'],\n};\n\n\nexport type Mutation = {\n   __typename?: 'Mutation',\n  signin: Scalars['String'],\n  createReport: Report,\n  updateReport: Report,\n};\n\n\nexport type MutationSigninArgs = {\n  email: Scalars['String']\n};\n\n\nexport type MutationCreateReportArgs = {\n  title: Scalars['String']\n};\n\n\nexport type MutationUpdateReportArgs = {\n  report?: Maybe<ReportInput>\n};\n\nexport type Query = {\n   __typename?: 'Query',\n  currentUser?: Maybe<User>,\n  reports: Array<Report>,\n  report: Report,\n};\n\n\nexport type QueryReportArgs = {\n  id: Scalars['ID']\n};\n\nexport type Report = {\n   __typename?: 'Report',\n  id: Scalars['ID'],\n  owner: User,\n  width: Scalars['Int'],\n  height: Scalars['Int'],\n  title: Scalars['String'],\n  slides: Array<Slide>,\n};\n\nexport type ReportInput = {\n  id: Scalars['ID'],\n  title: Scalars['String'],\n  width: Scalars['Int'],\n  height: Scalars['Int'],\n  slides: Array<SlideInput>,\n};\n\nexport type Slide = {\n   __typename?: 'Slide',\n  id: Scalars['ID'],\n  charts: Array<Chart>,\n};\n\nexport type SlideInput = {\n  id?: Maybe<Scalars['ID']>,\n  charts: Array<ChartInput>,\n};\n\nexport type User = {\n   __typename?: 'User',\n  id: Scalars['ID'],\n  createdAt: Scalars['Date'],\n  email: Scalars['String'],\n  firstName: Scalars['String'],\n  lastName: Scalars['String'],\n  reports: Array<Report>,\n};\nexport type ReportListGetQueryVariables = {};\n\n\nexport type ReportListGetQuery = (\n  { __typename?: 'Query' }\n  & { reports: Array<{ __typename?: 'Report' }\n    & ReportListReportFragment\n  > }\n);\n\nexport type ReportListReportFragment = (\n  { __typename?: 'Report' }\n  & Pick<Report, 'id' | 'title' | 'width' | 'height'>\n);\n\nexport type ReportListCreateReportMutationVariables = {\n  title: Scalars['String']\n};\n\n\nexport type ReportListCreateReportMutation = (\n  { __typename?: 'Mutation' }\n  & { createReport: { __typename?: 'Report' }\n    & ReportListReportFragment\n   }\n);\n\nexport type SignInMutationVariables = {\n  email: Scalars['String']\n};\n\n\nexport type SignInMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'signin'>\n);\n\nexport type ReportFragment = (\n  { __typename?: 'Report' }\n  & Pick<Report, 'id' | 'title' | 'width' | 'height'>\n  & { slides: Array<(\n    { __typename?: 'Slide' }\n    & Pick<Slide, 'id'>\n    & { charts: Array<{ __typename?: 'Chart' }\n      & ChartFragment\n    > }\n  )> }\n);\n\nexport type ChartFragment = (\n  { __typename?: 'Chart' }\n  & Pick<Chart, 'id' | 'x' | 'y' | 'width' | 'height'>\n);\n\nexport type ReportGetQueryVariables = {\n  id: Scalars['ID']\n};\n\n\nexport type ReportGetQuery = (\n  { __typename?: 'Query' }\n  & { report: { __typename?: 'Report' }\n    & ReportFragment\n   }\n);\n\nexport type ReportUpdateMutationVariables = {\n  report: ReportInput\n};\n\n\nexport type ReportUpdateMutation = (\n  { __typename?: 'Mutation' }\n  & { updateReport: (\n    { __typename?: 'Report' }\n    & Pick<Report, 'id'>\n  ) }\n);\nexport const ReportListReportFragmentDoc = gql`\n    fragment ReportListReport on Report {\n  id\n  title\n  width\n  height\n}\n    `;\nexport const ChartFragmentDoc = gql`\n    fragment Chart on Chart {\n  id\n  x\n  y\n  width\n  height\n}\n    `;\nexport const ReportFragmentDoc = gql`\n    fragment Report on Report {\n  id\n  title\n  width\n  height\n  slides {\n    id\n    charts {\n      ...Chart\n    }\n  }\n}\n    ${ChartFragmentDoc}`;\nexport const ReportListGetDocument = gql`\n    query ReportListGet {\n  reports {\n    ...ReportListReport\n  }\n}\n    ${ReportListReportFragmentDoc}`;\n\n    export function useReportListGetQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<ReportListGetQuery, ReportListGetQueryVariables>) {\n      return ApolloReactHooks.useQuery<ReportListGetQuery, ReportListGetQueryVariables>(ReportListGetDocument, baseOptions);\n    }\n      export function useReportListGetLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<ReportListGetQuery, ReportListGetQueryVariables>) {\n        return ApolloReactHooks.useLazyQuery<ReportListGetQuery, ReportListGetQueryVariables>(ReportListGetDocument, baseOptions);\n      }\n      \nexport type ReportListGetQueryHookResult = ReturnType<typeof useReportListGetQuery>;\nexport type ReportListGetQueryResult = ApolloReactCommon.QueryResult<ReportListGetQuery, ReportListGetQueryVariables>;\nexport const ReportListCreateReportDocument = gql`\n    mutation ReportListCreateReport($title: String!) {\n  createReport(title: $title) {\n    ...ReportListReport\n  }\n}\n    ${ReportListReportFragmentDoc}`;\nexport type ReportListCreateReportMutationFn = ApolloReactCommon.MutationFunction<ReportListCreateReportMutation, ReportListCreateReportMutationVariables>;\n\n    export function useReportListCreateReportMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<ReportListCreateReportMutation, ReportListCreateReportMutationVariables>) {\n      return ApolloReactHooks.useMutation<ReportListCreateReportMutation, ReportListCreateReportMutationVariables>(ReportListCreateReportDocument, baseOptions);\n    }\nexport type ReportListCreateReportMutationHookResult = ReturnType<typeof useReportListCreateReportMutation>;\nexport type ReportListCreateReportMutationResult = ApolloReactCommon.MutationResult<ReportListCreateReportMutation>;\nexport type ReportListCreateReportMutationOptions = ApolloReactCommon.BaseMutationOptions<ReportListCreateReportMutation, ReportListCreateReportMutationVariables>;\nexport const SignInDocument = gql`\n    mutation SignIn($email: String!) {\n  signin(email: $email)\n}\n    `;\nexport type SignInMutationFn = ApolloReactCommon.MutationFunction<SignInMutation, SignInMutationVariables>;\n\n    export function useSignInMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SignInMutation, SignInMutationVariables>) {\n      return ApolloReactHooks.useMutation<SignInMutation, SignInMutationVariables>(SignInDocument, baseOptions);\n    }\nexport type SignInMutationHookResult = ReturnType<typeof useSignInMutation>;\nexport type SignInMutationResult = ApolloReactCommon.MutationResult<SignInMutation>;\nexport type SignInMutationOptions = ApolloReactCommon.BaseMutationOptions<SignInMutation, SignInMutationVariables>;\nexport const ReportGetDocument = gql`\n    query ReportGet($id: ID!) {\n  report(id: $id) {\n    ...Report\n  }\n}\n    ${ReportFragmentDoc}`;\n\n    export function useReportGetQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<ReportGetQuery, ReportGetQueryVariables>) {\n      return ApolloReactHooks.useQuery<ReportGetQuery, ReportGetQueryVariables>(ReportGetDocument, baseOptions);\n    }\n      export function useReportGetLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<ReportGetQuery, ReportGetQueryVariables>) {\n        return ApolloReactHooks.useLazyQuery<ReportGetQuery, ReportGetQueryVariables>(ReportGetDocument, baseOptions);\n      }\n      \nexport type ReportGetQueryHookResult = ReturnType<typeof useReportGetQuery>;\nexport type ReportGetQueryResult = ApolloReactCommon.QueryResult<ReportGetQuery, ReportGetQueryVariables>;\nexport const ReportUpdateDocument = gql`\n    mutation ReportUpdate($report: ReportInput!) {\n  updateReport(report: $report) {\n    id\n  }\n}\n    `;\nexport type ReportUpdateMutationFn = ApolloReactCommon.MutationFunction<ReportUpdateMutation, ReportUpdateMutationVariables>;\n\n    export function useReportUpdateMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<ReportUpdateMutation, ReportUpdateMutationVariables>) {\n      return ApolloReactHooks.useMutation<ReportUpdateMutation, ReportUpdateMutationVariables>(ReportUpdateDocument, baseOptions);\n    }\nexport type ReportUpdateMutationHookResult = ReturnType<typeof useReportUpdateMutation>;\nexport type ReportUpdateMutationResult = ApolloReactCommon.MutationResult<ReportUpdateMutation>;\nexport type ReportUpdateMutationOptions = ApolloReactCommon.BaseMutationOptions<ReportUpdateMutation, ReportUpdateMutationVariables>;","import ApolloClient, { Operation, InMemoryCache } from \"apollo-boost\";\nimport fetch from \"isomorphic-fetch\";\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport { ReactChild, useMemo, createContext, useState, useEffect } from \"react\";\nimport React from 'react'\nimport { Global, css } from \"@emotion/core\"\nimport Router from \"next/router\";\n\nconst globalStyles = css`\n  html, body, #__next {\n    margin:0;\n    padding:0;\n    height:100%;\n  }\n  a, a:hover, a:visited {\n    text-decoration:none;\n    color:inherit;\n    \n  }\n  * {\n    box-sizing:border-box;\n  }\n`\n\ntype Props = {\n  children: ReactChild;\n  requireAuth: boolean\n}\n\nconst AuthContext = createContext<string | null>(undefined)\n\n\n\nexport const fetchAuthToken = async () => {\n  const res = await fetch(\"/api/refresh_token\")\n  if (res.status !== 200) {\n    Router.push(\"/login\")\n  }\n  const { auth_token } = await res.json()\n  console.log({ auth_token })\n  return auth_token\n}\n\nconst jwtPromise = fetchAuthToken()\n\nexport const Page = ({ requireAuth, children }: Props) => {\n\n  const [authToken, setAuthToken] = useState<string | null>(null)\n\n  useEffect(() => {\n    jwtPromise\n      .then(setAuthToken)\n    const interval = setInterval(() => {\n      fetchAuthToken()\n        .then(setAuthToken)\n    }, 5 * 60 * 1000)\n    return () => {\n      clearInterval(interval)\n    }\n  }, [])\n\n\n  const apolloClient = useMemo(() => new ApolloClient({\n    uri: \"/api/graphql\",\n    request: async (operation: Operation) => {\n      if (authToken) {\n        operation.setContext({\n          headers: {\n            Authorization: `Bearer ${authToken}`\n          },\n        })\n      } else if (requireAuth) {\n        const authToken = await jwtPromise\n        operation.setContext({\n          headers: {\n            Authorization: `Bearer ${authToken}`\n          },\n        })\n      }\n    },\n    onError: ({ response, operation }) => {\n      if (response && response.errors) {\n        console.error(response, operation);\n      }\n    },\n    cache: new InMemoryCache({\n      dataIdFromObject: object => object.id,\n    }),\n    fetch,\n  }), [authToken])\n  return (\n    <AuthContext.Provider value={authToken}>\n      <ApolloProvider client={apolloClient}>\n        <Global styles={globalStyles} />\n        {children}\n      </ApolloProvider >\n    </AuthContext.Provider>\n  )\n}\n","import { LoginPage } from \"../client/Login\"\nimport { Page } from \"../client/components/Page\";\nexport default () =>\n  <Page requireAuth={false}>\n    <LoginPage />\n  </Page>","module.exports = require(\"@apollo/react-hooks\");","module.exports = require(\"@emotion/core\");","module.exports = require(\"@emotion/styled-base\");","module.exports = require(\"apollo-boost\");","module.exports = require(\"graphql-tag\");","module.exports = require(\"isomorphic-fetch\");","module.exports = require(\"next/router\");","module.exports = require(\"react\");"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxFA;AACA;AACA;AAIA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AADA;AADA;AAKA;AACA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAkBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;ACxEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAqLA;;;;;;;AAAA;AAQA;;;;;;;;AAAA;AASA;;;;;;;;;;;;;AAaA;AACA;;;;;;AAMA;AAEA;AACA;AACA;AACA;AACA;AACA;AAIA;;;;;;AAMA;AAGA;AACA;AACA;AAIA;;;;AAAA;AAOA;AACA;AACA;AAIA;;;;;;AAMA;AAEA;AACA;AACA;AACA;AACA;AACA;AAIA;;;;;;AAAA;AASA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/RA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAqBA;AAIA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AAEA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AADA;AAKA;AACA;AACA;AACA;AACA;AADA;AADA;AAKA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AA1BA;AA4BA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;;;;;;;;;;;;;;;;;;;;;;;AClGA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;ACJA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;A","sourceRoot":""}