{"ast":null,"code":"import gql from 'graphql-tag';\nimport * as ApolloReactHooks from '@apollo/react-hooks';\nexport const ReportListReportFragmentDoc = gql`\n    fragment ReportListReport on Report {\n  id\n  title\n  width\n  height\n}\n    `;\nexport const ChartFragmentDoc = gql`\n    fragment Chart on Chart {\n  id\n  x\n  y\n  width\n  height\n}\n    `;\nexport const ReportFragmentDoc = gql`\n    fragment Report on Report {\n  id\n  title\n  width\n  height\n  slides {\n    id\n    charts {\n      ...Chart\n    }\n  }\n}\n    ${ChartFragmentDoc}`;\nexport const ReportListGetDocument = gql`\n    query ReportListGet {\n  reports {\n    ...ReportListReport\n  }\n}\n    ${ReportListReportFragmentDoc}`;\nexport function useReportListGetQuery(baseOptions) {\n  return ApolloReactHooks.useQuery(ReportListGetDocument, baseOptions);\n}\nexport function useReportListGetLazyQuery(baseOptions) {\n  return ApolloReactHooks.useLazyQuery(ReportListGetDocument, baseOptions);\n}\nexport const ReportListCreateReportDocument = gql`\n    mutation ReportListCreateReport($title: String!) {\n  createReport(title: $title) {\n    ...ReportListReport\n  }\n}\n    ${ReportListReportFragmentDoc}`;\nexport function useReportListCreateReportMutation(baseOptions) {\n  return ApolloReactHooks.useMutation(ReportListCreateReportDocument, baseOptions);\n}\nexport const SignInDocument = gql`\n    mutation SignIn($email: String!) {\n  signin(email: $email)\n}\n    `;\nexport function useSignInMutation(baseOptions) {\n  return ApolloReactHooks.useMutation(SignInDocument, baseOptions);\n}\nexport const ReportGetDocument = gql`\n    query ReportGet($id: ID!) {\n  report(id: $id) {\n    ...Report\n  }\n}\n    ${ReportFragmentDoc}`;\nexport function useReportGetQuery(baseOptions) {\n  return ApolloReactHooks.useQuery(ReportGetDocument, baseOptions);\n}\nexport function useReportGetLazyQuery(baseOptions) {\n  return ApolloReactHooks.useLazyQuery(ReportGetDocument, baseOptions);\n}\nexport const ReportUpdateDocument = gql`\n    mutation ReportUpdate($report: ReportInput!) {\n  updateReport(report: $report) {\n    id\n  }\n}\n    `;\nexport function useReportUpdateMutation(baseOptions) {\n  return ApolloReactHooks.useMutation(ReportUpdateDocument, baseOptions);\n}","map":{"version":3,"sources":["/Users/andreasmoller/code/reports/client/codegen/graphql.ts"],"names":["gql","ApolloReactHooks","ReportListReportFragmentDoc","ChartFragmentDoc","ReportFragmentDoc","ReportListGetDocument","useReportListGetQuery","baseOptions","useQuery","useReportListGetLazyQuery","useLazyQuery","ReportListCreateReportDocument","useReportListCreateReportMutation","useMutation","SignInDocument","useSignInMutation","ReportGetDocument","useReportGetQuery","useReportGetLazyQuery","ReportUpdateDocument","useReportUpdateMutation"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,aAAhB;AAEA,OAAO,KAAKC,gBAAZ,MAAkC,qBAAlC;AAqLA,OAAO,MAAMC,2BAA2B,GAAGF,GAAI;;;;;;;KAAxC;AAQP,OAAO,MAAMG,gBAAgB,GAAGH,GAAI;;;;;;;;KAA7B;AASP,OAAO,MAAMI,iBAAiB,GAAGJ,GAAI;;;;;;;;;;;;;MAa/BG,gBAAiB,EAbhB;AAcP,OAAO,MAAME,qBAAqB,GAAGL,GAAI;;;;;;MAMnCE,2BAA4B,EAN3B;AAQH,OAAO,SAASI,qBAAT,CAA+BC,WAA/B,EAAiI;AACtI,SAAON,gBAAgB,CAACO,QAAjB,CAA2EH,qBAA3E,EAAkGE,WAAlG,CAAP;AACD;AACC,OAAO,SAASE,yBAAT,CAAmCF,WAAnC,EAAyI;AAC9I,SAAON,gBAAgB,CAACS,YAAjB,CAA+EL,qBAA/E,EAAsGE,WAAtG,CAAP;AACD;AAIP,OAAO,MAAMI,8BAA8B,GAAGX,GAAI;;;;;;MAM5CE,2BAA4B,EAN3B;AASH,OAAO,SAASU,iCAAT,CAA2CL,WAA3C,EAAwK;AAC7K,SAAON,gBAAgB,CAACY,WAAjB,CAAsGF,8BAAtG,EAAsIJ,WAAtI,CAAP;AACD;AAIL,OAAO,MAAMO,cAAc,GAAGd,GAAI;;;;KAA3B;AAOH,OAAO,SAASe,iBAAT,CAA2BR,WAA3B,EAAwH;AAC7H,SAAON,gBAAgB,CAACY,WAAjB,CAAsEC,cAAtE,EAAsFP,WAAtF,CAAP;AACD;AAIL,OAAO,MAAMS,iBAAiB,GAAGhB,GAAI;;;;;;MAM/BI,iBAAkB,EANjB;AAQH,OAAO,SAASa,iBAAT,CAA2BV,WAA3B,EAAqH;AAC1H,SAAON,gBAAgB,CAACO,QAAjB,CAAmEQ,iBAAnE,EAAsFT,WAAtF,CAAP;AACD;AACC,OAAO,SAASW,qBAAT,CAA+BX,WAA/B,EAA6H;AAClI,SAAON,gBAAgB,CAACS,YAAjB,CAAuEM,iBAAvE,EAA0FT,WAA1F,CAAP;AACD;AAIP,OAAO,MAAMY,oBAAoB,GAAGnB,GAAI;;;;;;KAAjC;AASH,OAAO,SAASoB,uBAAT,CAAiCb,WAAjC,EAA0I;AAC/I,SAAON,gBAAgB,CAACY,WAAjB,CAAkFM,oBAAlF,EAAwGZ,WAAxG,CAAP;AACD","sourcesContent":["import gql from 'graphql-tag';\nimport * as ApolloReactCommon from '@apollo/react-common';\nimport * as ApolloReactHooks from '@apollo/react-hooks';\nexport type Maybe<T> = T | null;\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string,\n  String: string,\n  Boolean: boolean,\n  Int: number,\n  Float: number,\n  Date: any,\n};\n\nexport type Chart = {\n   __typename?: 'Chart',\n  id: Scalars['ID'],\n  slide: Slide,\n  x: Scalars['Int'],\n  y: Scalars['Int'],\n  width: Scalars['Int'],\n  height: Scalars['Int'],\n};\n\nexport type ChartInput = {\n  id?: Maybe<Scalars['ID']>,\n  x: Scalars['Int'],\n  y: Scalars['Int'],\n  width: Scalars['Int'],\n  height: Scalars['Int'],\n};\n\n\nexport type Mutation = {\n   __typename?: 'Mutation',\n  signin: Scalars['String'],\n  createReport: Report,\n  updateReport: Report,\n};\n\n\nexport type MutationSigninArgs = {\n  email: Scalars['String']\n};\n\n\nexport type MutationCreateReportArgs = {\n  title: Scalars['String']\n};\n\n\nexport type MutationUpdateReportArgs = {\n  report?: Maybe<ReportInput>\n};\n\nexport type Query = {\n   __typename?: 'Query',\n  currentUser?: Maybe<User>,\n  reports: Array<Report>,\n  report: Report,\n};\n\n\nexport type QueryReportArgs = {\n  id: Scalars['ID']\n};\n\nexport type Report = {\n   __typename?: 'Report',\n  id: Scalars['ID'],\n  owner: User,\n  width: Scalars['Int'],\n  height: Scalars['Int'],\n  title: Scalars['String'],\n  slides: Array<Slide>,\n};\n\nexport type ReportInput = {\n  id: Scalars['ID'],\n  title: Scalars['String'],\n  width: Scalars['Int'],\n  height: Scalars['Int'],\n  slides: Array<SlideInput>,\n};\n\nexport type Slide = {\n   __typename?: 'Slide',\n  id: Scalars['ID'],\n  charts: Array<Chart>,\n};\n\nexport type SlideInput = {\n  id?: Maybe<Scalars['ID']>,\n  charts: Array<ChartInput>,\n};\n\nexport type User = {\n   __typename?: 'User',\n  id: Scalars['ID'],\n  createdAt: Scalars['Date'],\n  email: Scalars['String'],\n  firstName: Scalars['String'],\n  lastName: Scalars['String'],\n  reports: Array<Report>,\n};\nexport type ReportListGetQueryVariables = {};\n\n\nexport type ReportListGetQuery = (\n  { __typename?: 'Query' }\n  & { reports: Array<{ __typename?: 'Report' }\n    & ReportListReportFragment\n  > }\n);\n\nexport type ReportListReportFragment = (\n  { __typename?: 'Report' }\n  & Pick<Report, 'id' | 'title' | 'width' | 'height'>\n);\n\nexport type ReportListCreateReportMutationVariables = {\n  title: Scalars['String']\n};\n\n\nexport type ReportListCreateReportMutation = (\n  { __typename?: 'Mutation' }\n  & { createReport: { __typename?: 'Report' }\n    & ReportListReportFragment\n   }\n);\n\nexport type SignInMutationVariables = {\n  email: Scalars['String']\n};\n\n\nexport type SignInMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'signin'>\n);\n\nexport type ReportFragment = (\n  { __typename?: 'Report' }\n  & Pick<Report, 'id' | 'title' | 'width' | 'height'>\n  & { slides: Array<(\n    { __typename?: 'Slide' }\n    & Pick<Slide, 'id'>\n    & { charts: Array<{ __typename?: 'Chart' }\n      & ChartFragment\n    > }\n  )> }\n);\n\nexport type ChartFragment = (\n  { __typename?: 'Chart' }\n  & Pick<Chart, 'id' | 'x' | 'y' | 'width' | 'height'>\n);\n\nexport type ReportGetQueryVariables = {\n  id: Scalars['ID']\n};\n\n\nexport type ReportGetQuery = (\n  { __typename?: 'Query' }\n  & { report: { __typename?: 'Report' }\n    & ReportFragment\n   }\n);\n\nexport type ReportUpdateMutationVariables = {\n  report: ReportInput\n};\n\n\nexport type ReportUpdateMutation = (\n  { __typename?: 'Mutation' }\n  & { updateReport: (\n    { __typename?: 'Report' }\n    & Pick<Report, 'id'>\n  ) }\n);\nexport const ReportListReportFragmentDoc = gql`\n    fragment ReportListReport on Report {\n  id\n  title\n  width\n  height\n}\n    `;\nexport const ChartFragmentDoc = gql`\n    fragment Chart on Chart {\n  id\n  x\n  y\n  width\n  height\n}\n    `;\nexport const ReportFragmentDoc = gql`\n    fragment Report on Report {\n  id\n  title\n  width\n  height\n  slides {\n    id\n    charts {\n      ...Chart\n    }\n  }\n}\n    ${ChartFragmentDoc}`;\nexport const ReportListGetDocument = gql`\n    query ReportListGet {\n  reports {\n    ...ReportListReport\n  }\n}\n    ${ReportListReportFragmentDoc}`;\n\n    export function useReportListGetQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<ReportListGetQuery, ReportListGetQueryVariables>) {\n      return ApolloReactHooks.useQuery<ReportListGetQuery, ReportListGetQueryVariables>(ReportListGetDocument, baseOptions);\n    }\n      export function useReportListGetLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<ReportListGetQuery, ReportListGetQueryVariables>) {\n        return ApolloReactHooks.useLazyQuery<ReportListGetQuery, ReportListGetQueryVariables>(ReportListGetDocument, baseOptions);\n      }\n      \nexport type ReportListGetQueryHookResult = ReturnType<typeof useReportListGetQuery>;\nexport type ReportListGetQueryResult = ApolloReactCommon.QueryResult<ReportListGetQuery, ReportListGetQueryVariables>;\nexport const ReportListCreateReportDocument = gql`\n    mutation ReportListCreateReport($title: String!) {\n  createReport(title: $title) {\n    ...ReportListReport\n  }\n}\n    ${ReportListReportFragmentDoc}`;\nexport type ReportListCreateReportMutationFn = ApolloReactCommon.MutationFunction<ReportListCreateReportMutation, ReportListCreateReportMutationVariables>;\n\n    export function useReportListCreateReportMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<ReportListCreateReportMutation, ReportListCreateReportMutationVariables>) {\n      return ApolloReactHooks.useMutation<ReportListCreateReportMutation, ReportListCreateReportMutationVariables>(ReportListCreateReportDocument, baseOptions);\n    }\nexport type ReportListCreateReportMutationHookResult = ReturnType<typeof useReportListCreateReportMutation>;\nexport type ReportListCreateReportMutationResult = ApolloReactCommon.MutationResult<ReportListCreateReportMutation>;\nexport type ReportListCreateReportMutationOptions = ApolloReactCommon.BaseMutationOptions<ReportListCreateReportMutation, ReportListCreateReportMutationVariables>;\nexport const SignInDocument = gql`\n    mutation SignIn($email: String!) {\n  signin(email: $email)\n}\n    `;\nexport type SignInMutationFn = ApolloReactCommon.MutationFunction<SignInMutation, SignInMutationVariables>;\n\n    export function useSignInMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SignInMutation, SignInMutationVariables>) {\n      return ApolloReactHooks.useMutation<SignInMutation, SignInMutationVariables>(SignInDocument, baseOptions);\n    }\nexport type SignInMutationHookResult = ReturnType<typeof useSignInMutation>;\nexport type SignInMutationResult = ApolloReactCommon.MutationResult<SignInMutation>;\nexport type SignInMutationOptions = ApolloReactCommon.BaseMutationOptions<SignInMutation, SignInMutationVariables>;\nexport const ReportGetDocument = gql`\n    query ReportGet($id: ID!) {\n  report(id: $id) {\n    ...Report\n  }\n}\n    ${ReportFragmentDoc}`;\n\n    export function useReportGetQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<ReportGetQuery, ReportGetQueryVariables>) {\n      return ApolloReactHooks.useQuery<ReportGetQuery, ReportGetQueryVariables>(ReportGetDocument, baseOptions);\n    }\n      export function useReportGetLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<ReportGetQuery, ReportGetQueryVariables>) {\n        return ApolloReactHooks.useLazyQuery<ReportGetQuery, ReportGetQueryVariables>(ReportGetDocument, baseOptions);\n      }\n      \nexport type ReportGetQueryHookResult = ReturnType<typeof useReportGetQuery>;\nexport type ReportGetQueryResult = ApolloReactCommon.QueryResult<ReportGetQuery, ReportGetQueryVariables>;\nexport const ReportUpdateDocument = gql`\n    mutation ReportUpdate($report: ReportInput!) {\n  updateReport(report: $report) {\n    id\n  }\n}\n    `;\nexport type ReportUpdateMutationFn = ApolloReactCommon.MutationFunction<ReportUpdateMutation, ReportUpdateMutationVariables>;\n\n    export function useReportUpdateMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<ReportUpdateMutation, ReportUpdateMutationVariables>) {\n      return ApolloReactHooks.useMutation<ReportUpdateMutation, ReportUpdateMutationVariables>(ReportUpdateDocument, baseOptions);\n    }\nexport type ReportUpdateMutationHookResult = ReturnType<typeof useReportUpdateMutation>;\nexport type ReportUpdateMutationResult = ApolloReactCommon.MutationResult<ReportUpdateMutation>;\nexport type ReportUpdateMutationOptions = ApolloReactCommon.BaseMutationOptions<ReportUpdateMutation, ReportUpdateMutationVariables>;"]},"metadata":{},"sourceType":"module"}