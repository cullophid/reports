{"ast":null,"code":"import { AuthenticationError } from \"apollo-server-core\";\nexport const Query = {\n  currentUser: ({}, {}, ctx) => {\n    if (!ctx.session.user) {\n      throw new AuthenticationError(\"You are not authenticated\");\n    }\n\n    return ctx.photon.users.findOne({\n      where: {\n        id: ctx.session.user.sub\n      }\n    });\n  },\n  reports: (_, {}, ctx) => {\n    if (!ctx.session.user) {\n      throw new AuthenticationError(\"You must be authenticated\");\n    }\n\n    return ctx.photon.users.findOne({\n      where: {\n        id: ctx.session.user.sub\n      }\n    }).reports();\n  }\n};","map":{"version":3,"sources":["/Users/andreasmoller/code/reports/server/resolvers/Query.ts"],"names":["AuthenticationError","Query","currentUser","ctx","session","user","photon","users","findOne","where","id","sub","reports","_"],"mappings":"AACA,SAASA,mBAAT,QAAoC,oBAApC;AAGA,OAAO,MAAMC,KAAqB,GAAG;AACnCC,EAAAA,WAAW,EAAE,CAAC,EAAD,EAAM,EAAN,EAAWC,GAAX,KAAmB;AAC9B,QAAI,CAACA,GAAG,CAACC,OAAJ,CAAYC,IAAjB,EAAuB;AACrB,YAAM,IAAIL,mBAAJ,CAAwB,2BAAxB,CAAN;AACD;;AACD,WAAOG,GAAG,CAACG,MAAJ,CAAWC,KAAX,CAAiBC,OAAjB,CAAyB;AAC9BC,MAAAA,KAAK,EAAE;AACLC,QAAAA,EAAE,EAAEP,GAAG,CAACC,OAAJ,CAAYC,IAAZ,CAAiBM;AADhB;AADuB,KAAzB,CAAP;AAKD,GAVkC;AAWnCC,EAAAA,OAAO,EAAE,CAACC,CAAD,EAAI,EAAJ,EAASV,GAAT,KAAiB;AACxB,QAAI,CAACA,GAAG,CAACC,OAAJ,CAAYC,IAAjB,EAAuB;AACrB,YAAM,IAAIL,mBAAJ,CAAwB,2BAAxB,CAAN;AACD;;AACD,WAAOG,GAAG,CAACG,MAAJ,CAAWC,KAAX,CAAiBC,OAAjB,CAAyB;AAC9BC,MAAAA,KAAK,EAAE;AACLC,QAAAA,EAAE,EAAEP,GAAG,CAACC,OAAJ,CAAYC,IAAZ,CAAiBM;AADhB;AADuB,KAAzB,EAIJC,OAJI,EAAP;AAKD;AApBkC,CAA9B","sourcesContent":["import { QueryResolvers } from \"../codegen/graphql\";\nimport { AuthenticationError } from \"apollo-server-core\";\nimport { encodeXText } from \"nodemailer/lib/shared\";\n\nexport const Query: QueryResolvers = {\n  currentUser: ({ }, { }, ctx) => {\n    if (!ctx.session.user) {\n      throw new AuthenticationError(\"You are not authenticated\")\n    }\n    return ctx.photon.users.findOne({\n      where: {\n        id: ctx.session.user.sub\n      }\n    })\n  },\n  reports: (_, { }, ctx) => {\n    if (!ctx.session.user) {\n      throw new AuthenticationError(\"You must be authenticated\")\n    }\n    return ctx.photon.users.findOne({\n      where: {\n        id: ctx.session.user.sub\n      }\n    }).reports();\n  }\n}"]},"metadata":{},"sourceType":"module"}