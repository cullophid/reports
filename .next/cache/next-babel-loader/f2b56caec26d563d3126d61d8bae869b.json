{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nexport const updateReport = async (_, {\n  report\n}, ctx) => {\n  if (!ctx.session.user) {\n    throw new Error(\"You must be authenticated\");\n  }\n\n  const current = await ctx.photon.reports.findOne({\n    where: {\n      id: report.id\n    },\n    include: {\n      owner: true,\n      slides: {\n        include: {\n          charts: true\n        }\n      }\n    }\n  });\n\n  if (current.owner.id !== ctx.session.user.sub) {\n    throw new Error(\"Report does not exist\");\n  }\n\n  const doNotDelete = [];\n  report.slides.forEach(slide => {\n    if (slide.id) {\n      doNotDelete.push(slide.id);\n    }\n\n    slide.charts.forEach(chart => {\n      if (chart.id) {\n        doNotDelete.push(chart.id);\n      }\n    });\n  });\n  return ctx.photon.reports.update({\n    where: {\n      id: report.id\n    },\n    data: {\n      title: report.title,\n      slides: {\n        // update: report.slides.filter(s => s.id)\n        //   .map(({ id, ...slide }) => ({\n        //     where: {\n        //       id\n        //     },\n        //     data: {\n        //       ...slide,\n        //       charts: slide.charts && {\n        //         update: slide.charts.filter(c => c.id)\n        //           .map(({ id, ...chart }) => ({\n        //             where: { id },\n        //             data: chart\n        //           })),\n        //         create: slide.charts.filter(c => !c.id).map(chart => {\n        //           const id = cuid();\n        //           doNotDelete.push(id)\n        //           return {\n        //             ...chart,\n        //             id\n        //           }\n        //         }),\n        //         deleteMany: {\n        //           id: { notIn: doNotDelete }\n        //         },\n        //       }\n        //     }\n        //   })),\n        upsert: report.slides.map(slide => ({\n          where: {\n            id: slide.id\n          },\n          update: _objectSpread({}, slide, {\n            charts: {\n              upsert: slide.charts.map(chart => ({\n                were: {\n                  id: chart.id,\n                  update: chart,\n                  create: chart\n                }\n              }))\n            }\n          }),\n          create: _objectSpread({}, slide, {\n            charts: {\n              create: slide.charts\n            }\n          })\n        })),\n        // create: report.slides\n        //   .filter(s => !s.id)\n        //   .map(({ charts, ...slide }) => {\n        //     const id = cuid();\n        //     doNotDelete.push(id)\n        //     return {\n        //       ...slide,\n        //       id,\n        //       charts: {\n        //         create: charts\n        //       }\n        //     }\n        //   }),\n        deleteMany: {\n          id: {\n            notIn: doNotDelete\n          }\n        }\n      }\n    }\n  });\n};","map":{"version":3,"sources":["/Users/andreasmoller/code/reports/server/resolvers/Mutation/updateReport.ts"],"names":["updateReport","_","report","ctx","session","user","Error","current","photon","reports","findOne","where","id","include","owner","slides","charts","sub","doNotDelete","forEach","slide","push","chart","update","data","title","upsert","map","were","create","deleteMany","notIn"],"mappings":"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","sourcesContent":["import { MutationResolvers } from \"../../codegen/graphql\";\nimport cuid from \"cuid\"\n\nexport const updateReport: MutationResolvers[\"updateReport\"] = async (_, { report }, ctx) => {\n  if (!ctx.session.user) {\n    throw new Error(\"You must be authenticated\")\n  }\n  const current = await ctx.photon.reports.findOne({\n    where: { id: report.id },\n    include: {\n      owner: true,\n      slides: {\n        include: {\n          charts: true\n        }\n      }\n    }\n  })\n  if (current.owner.id !== ctx.session.user.sub) {\n    throw new Error(\"Report does not exist\")\n  }\n\n  const doNotDelete: string[] = []\n\n  report.slides.forEach(slide => {\n    if (slide.id) {\n      doNotDelete.push(slide.id)\n    }\n    slide.charts.forEach(chart => {\n      if (chart.id) {\n        doNotDelete.push(chart.id)\n      }\n    })\n  })\n\n\n  return ctx.photon.reports.update({\n    where: { id: report.id },\n    data: {\n      title: report.title,\n      slides: {\n        // update: report.slides.filter(s => s.id)\n        //   .map(({ id, ...slide }) => ({\n        //     where: {\n        //       id\n        //     },\n        //     data: {\n        //       ...slide,\n        //       charts: slide.charts && {\n        //         update: slide.charts.filter(c => c.id)\n        //           .map(({ id, ...chart }) => ({\n        //             where: { id },\n        //             data: chart\n        //           })),\n        //         create: slide.charts.filter(c => !c.id).map(chart => {\n        //           const id = cuid();\n        //           doNotDelete.push(id)\n        //           return {\n        //             ...chart,\n        //             id\n        //           }\n        //         }),\n        //         deleteMany: {\n        //           id: { notIn: doNotDelete }\n        //         },\n        //       }\n        //     }\n        //   })),\n        upsert: report.slides.map((slide) => ({\n          where: {\n            id: slide.id\n          },\n          update: {\n            ...slide,\n            charts: {\n              upsert: slide.charts.map(chart => ({\n                were: {\n                  id: chart.id,\n                  update: chart,\n                  create: chart\n                }\n              }))\n            }\n          },\n          create: {\n            ...slide,\n            charts: {\n              create: slide.charts\n            }\n          }\n        })),\n        // create: report.slides\n        //   .filter(s => !s.id)\n        //   .map(({ charts, ...slide }) => {\n        //     const id = cuid();\n        //     doNotDelete.push(id)\n        //     return {\n        //       ...slide,\n        //       id,\n        //       charts: {\n        //         create: charts\n        //       }\n        //     }\n        //   }),\n        deleteMany: {\n          id: {\n            notIn: doNotDelete\n          }\n        }\n      }\n    }\n  })\n}"]},"metadata":{},"sourceType":"module"}