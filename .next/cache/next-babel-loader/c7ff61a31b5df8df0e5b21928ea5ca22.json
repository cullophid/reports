{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nimport _styled from \"@emotion/styled-base\";\nvar _jsxFileName = \"/Users/andreasmoller/code/reports/client/Report/Report.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { jsx as ___EmotionJSX } from \"@emotion/core\";\nimport { useReportGetQuery, useReportUpdateMutation, ReportGetDocument } from \"../codegen/graphql\";\nimport { ErrorBox } from \"../components/ErrorBox\";\nimport { Crumbs, CrumbTitle, CrumbLink } from \"../components/Crumbs\";\nimport { Header, HeaderSection } from \"../components/Header\";\nimport { Icon } from \"../components/Icon\";\nimport { FlatButton, Button } from \"../components/Button\";\nimport { useState, useEffect } from \"react\";\nimport { css, keyframes } from \"@emotion/core\";\nimport { useMouseDrag } from \"../hooks/drag\";\nimport { colors } from \"../theme\";\nimport cuid from \"cuid\";\nimport { Draggable } from \"react-draggable\";\n\nconst removeTypename = report => {\n  const {\n    __typename,\n    slides\n  } = report,\n        reportData = _objectWithoutProperties(report, [\"__typename\", \"slides\"]);\n\n  return _objectSpread({}, reportData, {\n    slides: slides.map((_ref2) => {\n      let {\n        __typename,\n        charts\n      } = _ref2,\n          slideData = _objectWithoutProperties(_ref2, [\"__typename\", \"charts\"]);\n\n      return _objectSpread({}, slideData, {\n        charts: charts.map((_ref3) => {\n          let {\n            __typename\n          } = _ref3,\n              chartData = _objectWithoutProperties(_ref3, [\"__typename\"]);\n\n          return chartData;\n        })\n      });\n    })\n  });\n};\n\nconst getModifiers = e => [e.nativeEvent.metaKey && \"meta\", e.nativeEvent.ctrlKey && \"ctrl\", e.nativeEvent.altKey && \"alt\", e.nativeEvent.shiftKey && \"shift\"].filter(Boolean);\n\nexport const ReportPage = props => {\n  const {\n    0: scale,\n    1: setScale\n  } = useState(1);\n  const {\n    0: tool,\n    1: setTool\n  } = useState(\"select\");\n  const {\n    0: selection,\n    1: setSelection\n  } = useState([]);\n  const reportQuery = useReportGetQuery({\n    variables: {\n      id: props.id\n    },\n    onCompleted: ({\n      report\n    }) => {\n      setScale(window.innerWidth * 0.8 / report.width);\n    }\n  });\n  const [_updateReport, updateReportQuery] = useReportUpdateMutation();\n\n  const updateReport = report => {\n    reportQuery.client.writeQuery({\n      query: ReportGetDocument,\n      variables: {\n        id: report.id\n      },\n      data: {\n        report\n      }\n    });\n    return _updateReport({\n      variables: {\n        report: removeTypename(report)\n      }\n    });\n  };\n\n  const report = reportQuery.data && reportQuery.data.report;\n  useEffect(() => {\n    const handler = () => {\n      if (report) {\n        setScale(window.innerWidth * 0.8 / report.width);\n      }\n    };\n\n    window.addEventListener(\"resize\", handler);\n    return () => window.removeEventListener(\"resize\", handler);\n  }, [report]);\n  const selectedSlide = report && (report.slides.find(s => s.id === props.slide) || report.slides[0]);\n\n  const getDragBox = (pos, origin) => {\n    return {\n      x: Math.min(pos.x, origin.x) / scale,\n      y: Math.min(pos.y, origin.y) / scale,\n      width: Math.abs(pos.x - origin.x) / scale,\n      height: Math.abs(pos.y - origin.y) / scale\n    };\n  };\n\n  const {\n    dragHandlers,\n    dragPos,\n    dragOrigin,\n    isDragging,\n    parentRef\n  } = useMouseDrag({\n    onDragEnd: (pos, origin) => {\n      const box = getDragBox(pos, origin);\n\n      switch (tool) {\n        case \"insert_chart\":\n          {\n            const newChart = {\n              id: cuid(),\n              x: Math.round(box.x),\n              y: Math.round(box.y),\n              width: Math.round(box.width),\n              height: Math.round(box.height),\n              __typename: \"Chart\"\n            };\n\n            const newReport = _objectSpread({}, report, {\n              slides: report.slides.map(slide => {\n                if (slide.id === selectedSlide.id) {\n                  return _objectSpread({}, slide, {\n                    charts: [...slide.charts, newChart]\n                  });\n                } else {\n                  return slide;\n                }\n              })\n            });\n\n            updateReport(newReport);\n            setTool(\"select\");\n            setSelection([newChart]);\n          }\n      }\n    }\n  });\n  return ___EmotionJSX(Layout, {\n    tabIndex: -1,\n    onKeyDown: e => {\n      const modifiers = getModifiers(e);\n\n      switch (e.key) {\n        case \"Escape\":\n          setTool(\"select\");\n\n          if (tool === \"select\") {\n            setSelection([]);\n          }\n\n          return e.preventDefault();\n\n        case \"c\":\n          if (modifiers.length === 0) {\n            setTool(\"insert_chart\");\n            return e.preventDefault();\n          }\n\n        case \"i\":\n          if (modifiers.length === 0) {\n            setTool(\"insert_image\");\n            return e.preventDefault();\n          }\n\n        case \"t\":\n          if (modifiers.length === 0) {\n            setTool(\"insert_text\");\n            return e.preventDefault();\n          }\n\n        case \"Backspace\":\n          {\n            updateReport(_objectSpread({}, report, {\n              slides: report.slides.map(slide => _objectSpread({}, slide, {\n                charts: slide.charts.filter(chart => selection.some(selection => selection.id === chart.id) === false)\n              }))\n            }));\n          }\n      }\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144\n    },\n    __self: this\n  }, (reportQuery.loading || updateReportQuery.loading) && ___EmotionJSX(LoadingIndicator, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180\n    },\n    __self: this\n  }), ___EmotionJSX(Header, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181\n    },\n    __self: this\n  }, ___EmotionJSX(HeaderSection, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182\n    },\n    __self: this\n  }, ___EmotionJSX(Crumbs, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183\n    },\n    __self: this\n  }, ___EmotionJSX(CrumbLink, {\n    href: \"/\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184\n    },\n    __self: this\n  }, \"Home\"), ___EmotionJSX(CrumbLink, {\n    href: \"/\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185\n    },\n    __self: this\n  }, \"Reports\"), ___EmotionJSX(CrumbTitle, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186\n    },\n    __self: this\n  }, report ? report.title : \"...\")), ___EmotionJSX(NewElements, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188\n    },\n    __self: this\n  }, ___EmotionJSX(FlatButton, {\n    name: \"insert_chart\",\n    onClick: () => setTool(\"insert_chart\"),\n    active: tool === \"insert_chart\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189\n    },\n    __self: this\n  }, ___EmotionJSX(Icon, {\n    icon: \"insert_chart\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190\n    },\n    __self: this\n  })), ___EmotionJSX(FlatButton, {\n    name: \"insert_image\",\n    onClick: () => setTool(\"insert_image\"),\n    active: tool === \"insert_image\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192\n    },\n    __self: this\n  }, ___EmotionJSX(Icon, {\n    icon: \"insert_photo\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192\n    },\n    __self: this\n  })), ___EmotionJSX(FlatButton, {\n    name: \"insert_text\",\n    onClick: () => setTool(\"insert_text\"),\n    active: tool === \"insert_text\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193\n    },\n    __self: this\n  }, ___EmotionJSX(Icon, {\n    icon: \"insert_text\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193\n    },\n    __self: this\n  }))))), ___EmotionJSX(\"div\", {\n    style: {\n      position: \"absolute\",\n      bottom: 16,\n      right: 16\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197\n    },\n    __self: this\n  }, scale), ___EmotionJSX(Stage, {\n    tool: tool,\n    scale: scale,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198\n    },\n    __self: this\n  }, selectedSlide && ___EmotionJSX(Slide, _extends({\n    ref: parentRef\n  }, dragHandlers, {\n    width: report.width,\n    height: report.height,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202\n    },\n    __self: this\n  }), [\"insert_chart\", \"insert_image\", \"insert_text\"].includes(tool) && isDragging && ___EmotionJSX(DragBox, _extends({}, getDragBox(dragPos, dragOrigin), {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204\n    },\n    __self: this\n  })), selectedSlide.charts.map(chart => {\n    return ___EmotionJSX(Draggable, {\n      key: chart.id,\n      disabled: tool !== \"select\",\n      offsetParent: parentRef.current,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208\n      },\n      __self: this\n    }, ___EmotionJSX(Chart, _extends({\n      selected: selection.some(s => s.id === chart.id)\n    }, chart, {\n      onClick: e => {\n        if (tool === \"select\") {\n          setSelection(e.nativeEvent.shiftKey ? [...selection, chart] : [chart]);\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214\n      },\n      __self: this\n    })));\n  })), report && !selectedSlide && ___EmotionJSX(Center, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225\n    },\n    __self: this\n  }, ___EmotionJSX(Button, {\n    name: \"create slide\",\n    onClick: () => {\n      updateReport(_objectSpread({}, report, {\n        slides: [...report.slides, {\n          charts: []\n        }]\n      }));\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 227\n    },\n    __self: this\n  }, \"Create You first Slide\")), reportQuery.error && ___EmotionJSX(ErrorBox, {\n    error: reportQuery.error,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240\n    },\n    __self: this\n  })));\n};\n\nconst Chart = _styled(\"div\", {\n  target: \"e1nne1bm0\",\n  label: \"Chart\"\n})(\"position:absolute;left:\", p => p.x, \"px;top:\", p => p.y, \"px;width:\", p => p.width, \"px;height:\", p => p.height, \"px;background:#f0f0f0;border:1px solid #dedede;\", p => p.selected &&\n/*#__PURE__*/\n\n/*#__PURE__*/\ncss(\"border:1px dashed \", colors.primary, \";label:Chart;\" + (process.env.NODE_ENV === \"production\" ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"), \"label:Chart;\"), \";\" + (process.env.NODE_ENV === \"production\" ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));\n\nconst Center = _styled(\"div\", {\n  target: \"e1nne1bm1\",\n  label: \"Center\"\n})(process.env.NODE_ENV === \"production\" ? {\n  name: \"ieltvz\",\n  styles: \"height:100%;display:grid;place-content:center center;\"\n} : {\n  name: \"ieltvz\",\n  styles: \"height:100%;display:grid;place-content:center center;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n});\n\nconst DragBox = _styled(\"div\", {\n  target: \"e1nne1bm2\",\n  label: \"DragBox\"\n})(\"position:absolute;width:\", p => p.width, \"px;height:\", p => p.height, \"px;left:\", p => p.x, \"px;top:\", p => p.y, \"px;border:2px dashed \", colors.primary, \";\" + (process.env.NODE_ENV === \"production\" ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));\n\nconst Slide = _styled(\"section\", {\n  target: \"e1nne1bm3\",\n  label: \"Slide\"\n})(\"position:relative;background:white;box-shadow:0 1px 4px rgba(0,0,0,0.4);width:\", p => p.width, \"px;height:\", p => p.height, \"px;\" + (process.env.NODE_ENV === \"production\" ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));\n\nconst NewElements = _styled(\"div\", {\n  target: \"e1nne1bm4\",\n  label: \"NewElements\"\n})(process.env.NODE_ENV === \"production\" ? {\n  name: \"ecvamz\",\n  styles: \"display:grid;grid-auto-flow:column;grid-gap:4px;place-content:center start;\"\n} : {\n  name: \"ecvamz\",\n  styles: \"display:grid;grid-auto-flow:column;grid-gap:4px;place-content:center start;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n});\n\nconst Layout = _styled(\"div\", {\n  target: \"e1nne1bm5\",\n  label: \"Layout\"\n})(process.env.NODE_ENV === \"production\" ? {\n  name: \"1dsk5u3\",\n  styles: \"display:grid;height:100%;grid-gap:32px;background:#f5f5f5;grid-template-rows:auto 1fr;place-content:start stretch;overflow:hidden;\"\n} : {\n  name: \"1dsk5u3\",\n  styles: \"display:grid;height:100%;grid-gap:32px;background:#f5f5f5;grid-template-rows:auto 1fr;place-content:start stretch;overflow:hidden;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n});\n\nvar _ref = process.env.NODE_ENV === \"production\" ? {\n  name: \"gcwr8i-Stage\",\n  styles: \"cursor:crosshair;label:Stage;\"\n} : {\n  name: \"gcwr8i-Stage\",\n  styles: \"cursor:crosshair;label:Stage;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n};\n\nconst Stage = _styled(\"main\", {\n  target: \"e1nne1bm6\",\n  label: \"Stage\"\n})(\"display:grid;width:100%;place-content:center center;overflow:hidden;\", p => {\n  switch (p.tool) {\n    case \"insert_chart\":\n    case \"insert_image\":\n    case \"insert_text\":\n      return (\n        /*#__PURE__*/\n        _ref\n      );\n  }\n}, \" & > *{transform:scale(\", p => p.scale, \");transform-origin:50% 50%;}\" + (process.env.NODE_ENV === \"production\" ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));\n\nconst LoadingIndicator = () => ___EmotionJSX(LoadingWrapper, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 331\n  },\n  __self: this\n}, ___EmotionJSX(LoadingDot, {\n  delay: 0,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 332\n  },\n  __self: this\n}, \".\"), ___EmotionJSX(LoadingDot, {\n  delay: 200,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 333\n  },\n  __self: this\n}, \".\"), ___EmotionJSX(LoadingDot, {\n  delay: 400,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 334\n  },\n  __self: this\n}, \".\"));\n\nconst jumpAnimation = keyframes`\n  from {\n    opacity:0;\n  }\n  to {\n    opacity:1;\n  }\n`;\n\nconst LoadingWrapper = _styled(\"div\", {\n  target: \"e1nne1bm7\",\n  label: \"LoadingWrapper\"\n})(process.env.NODE_ENV === \"production\" ? {\n  name: \"117pp3l\",\n  styles: \"position:absolute;top:32px;right:32px;font-size:2rem;\"\n} : {\n  name: \"117pp3l\",\n  styles: \"position:absolute;top:32px;right:32px;font-size:2rem;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n});\n\nconst LoadingDot = _styled(\"span\", {\n  target: \"e1nne1bm8\",\n  label: \"LoadingDot\"\n})(\"animation:\", jumpAnimation, \" 1s ease infinite;animation-delay:\", p => p.delay, \"ms;\" + (process.env.NODE_ENV === \"production\" ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));","map":{"version":3,"sources":["/Users/andreasmoller/code/reports/client/Report/Report.tsx"],"names":["useReportGetQuery","useReportUpdateMutation","ReportGetDocument","ErrorBox","Crumbs","CrumbTitle","CrumbLink","Header","HeaderSection","Icon","FlatButton","Button","useState","useEffect","css","keyframes","useMouseDrag","colors","cuid","Draggable","removeTypename","report","__typename","slides","reportData","map","charts","slideData","chartData","getModifiers","e","nativeEvent","metaKey","ctrlKey","altKey","shiftKey","filter","Boolean","ReportPage","props","scale","setScale","tool","setTool","selection","setSelection","reportQuery","variables","id","onCompleted","window","innerWidth","width","_updateReport","updateReportQuery","updateReport","client","writeQuery","query","data","handler","addEventListener","removeEventListener","selectedSlide","find","s","slide","getDragBox","pos","origin","x","Math","min","y","abs","height","dragHandlers","dragPos","dragOrigin","isDragging","parentRef","onDragEnd","box","newChart","round","newReport","modifiers","key","preventDefault","length","chart","some","loading","title","position","bottom","right","includes","current","error","Chart","p","selected","primary","Center","DragBox","Slide","NewElements","Layout","Stage","LoadingIndicator","jumpAnimation","LoadingWrapper","LoadingDot","delay"],"mappings":"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","sourcesContent":["\nimport { useReportGetQuery, useReportUpdateMutation, ChartFragment, ReportUpdateMutationVariables, ReportFragment, ReportGetDocument } from \"../codegen/graphql\";\nimport styled from \"@emotion/styled\";\nimport { ErrorBox } from \"../components/ErrorBox\";\nimport { Crumbs, CrumbTitle, CrumbLink } from \"../components/Crumbs\";\nimport { Header, HeaderSection } from \"../components/Header\";\nimport { Icon } from \"../components/Icon\";\nimport { FlatButton, Button } from \"../components/Button\";\nimport { useState, KeyboardEvent, useEffect } from \"react\";\nimport { css, keyframes } from \"@emotion/core\";\nimport { useMouseDrag, Pos } from \"../hooks/drag\";\nimport { colors } from \"../theme\";\nimport cuid from \"cuid\"\nimport { Draggable } from \"react-draggable\"\n\ntype Tool =\n  | \"insert_chart\"\n  | \"insert_image\"\n  | \"insert_text\"\n  | \"select\"\n\n\ntype Selection = ChartFragment\n\n\nconst removeTypename = (report: ReportFragment): ReportUpdateMutationVariables[\"report\"] => {\n  const { __typename, slides, ...reportData } = report;\n  return {\n    ...reportData,\n    slides: slides.map(({ __typename, charts, ...slideData }) => {\n      return {\n        ...slideData,\n        charts: charts.map(({ __typename, ...chartData }) => {\n          return chartData\n        })\n      }\n    })\n  }\n}\n\nconst getModifiers = (e: KeyboardEvent) =>\n  [\n    e.nativeEvent.metaKey && \"meta\",\n    e.nativeEvent.ctrlKey && \"ctrl\",\n    e.nativeEvent.altKey && \"alt\",\n    e.nativeEvent.shiftKey && \"shift\",\n  ].filter(Boolean)\n\nexport const ReportPage = (props: { id: string, slide?: string }) => {\n  const [scale, setScale] = useState(1)\n\n\n  const [tool, setTool] = useState<Tool>(\"select\")\n  const [selection, setSelection] = useState<Selection[]>([])\n  const reportQuery = useReportGetQuery({\n    variables: {\n      id: props.id\n    },\n    onCompleted: ({ report }) => {\n      setScale(window.innerWidth * 0.8 / report.width)\n    }\n  })\n\n  const [_updateReport, updateReportQuery] = useReportUpdateMutation()\n\n  const updateReport = (report: ReportUpdateMutationVariables[\"report\"]) => {\n    reportQuery.client.writeQuery({\n      query: ReportGetDocument,\n      variables: { id: report.id },\n      data: {\n        report\n      }\n    })\n    return _updateReport({\n      variables: {\n        report: removeTypename(report as ReportFragment)\n      }\n    })\n\n  }\n\n  const report = reportQuery.data && reportQuery.data.report\n\n  useEffect(() => {\n    const handler = () => {\n      if (report) {\n\n        setScale(window.innerWidth * 0.8 / report.width)\n      }\n    }\n    window.addEventListener(\"resize\", handler);\n    return () => window.removeEventListener(\"resize\", handler)\n  }, [report])\n\n  const selectedSlide = report && (report.slides.find(s => s.id === props.slide) || report.slides[0]);\n\n  const getDragBox = (pos: Pos, origin: Pos) => {\n    return {\n      x: Math.min(pos.x, origin.x) / scale,\n      y: Math.min(pos.y, origin.y) / scale,\n      width: Math.abs(pos.x - origin.x) / scale,\n      height: Math.abs(pos.y - origin.y) / scale,\n    }\n  }\n\n  const { dragHandlers, dragPos, dragOrigin, isDragging, parentRef } = useMouseDrag({\n    onDragEnd: (pos, origin) => {\n      const box = getDragBox(pos, origin);\n      switch (tool) {\n        case \"insert_chart\": {\n\n          const newChart = {\n            id: cuid(),\n            x: Math.round(box.x),\n            y: Math.round(box.y),\n            width: Math.round(box.width),\n            height: Math.round(box.height),\n            __typename: \"Chart\" as \"Chart\"\n          }\n\n          const newReport = {\n            ...report,\n            slides: report.slides.map(slide => {\n              if (slide.id === selectedSlide.id) {\n                return {\n                  ...slide,\n                  charts: [...slide.charts, newChart]\n                }\n              } else {\n                return slide\n              }\n            })\n          }\n          updateReport(newReport)\n          setTool(\"select\");\n          setSelection([newChart])\n        }\n\n      }\n    }\n  })\n\n  return (\n    <Layout tabIndex={-1} onKeyDown={e => {\n      const modifiers = getModifiers(e);\n      switch (e.key) {\n        case \"Escape\":\n          setTool(\"select\")\n          if (tool === \"select\") {\n            setSelection([]);\n          }\n          return e.preventDefault();\n        case \"c\":\n          if (modifiers.length === 0) {\n            setTool(\"insert_chart\")\n            return e.preventDefault();\n          }\n        case \"i\":\n          if (modifiers.length === 0) {\n            setTool(\"insert_image\")\n            return e.preventDefault();\n          }\n        case \"t\":\n          if (modifiers.length === 0) {\n            setTool(\"insert_text\")\n            return e.preventDefault();\n          }\n        case \"Backspace\": {\n          updateReport({\n            ...report,\n            slides: report.slides.map(slide => ({\n              ...slide,\n              charts: slide.charts.filter(chart => selection.some(selection => selection.id === chart.id) === false)\n            }))\n          })\n        }\n\n      }\n    }}>\n      {(reportQuery.loading || updateReportQuery.loading) && <LoadingIndicator />}\n      <Header>\n        <HeaderSection>\n          <Crumbs>\n            <CrumbLink href=\"/\">Home</CrumbLink>\n            <CrumbLink href=\"/\">Reports</CrumbLink>\n            <CrumbTitle>{report ? report.title : \"...\"}</CrumbTitle>\n          </Crumbs >\n          <NewElements>\n            <FlatButton name=\"insert_chart\" onClick={() => setTool(\"insert_chart\")} active={tool === \"insert_chart\"}>\n              <Icon icon=\"insert_chart\" />\n            </FlatButton>\n            <FlatButton name=\"insert_image\" onClick={() => setTool(\"insert_image\")} active={tool === \"insert_image\"}><Icon icon=\"insert_photo\" /></FlatButton>\n            <FlatButton name=\"insert_text\" onClick={() => setTool(\"insert_text\")} active={tool === \"insert_text\"}><Icon icon=\"insert_text\" /></FlatButton>\n          </NewElements>\n        </HeaderSection>\n      </Header >\n      <div style={{ position: \"absolute\", bottom: 16, right: 16 }}>{scale}</div>\n      <Stage tool={tool} scale={scale}>\n\n        {\n          selectedSlide &&\n          <Slide ref={parentRef} {...dragHandlers} width={report.width} height={report.height}>\n            {[\"insert_chart\", \"insert_image\", \"insert_text\"].includes(tool) && isDragging &&\n              <DragBox {...getDragBox(dragPos, dragOrigin)} />\n            }\n            {selectedSlide.charts.map(chart => {\n              return (\n                <Draggable\n                  key={chart.id}\n                  disabled={tool !== \"select\"}\n                  offsetParent={parentRef.current}\n\n                >\n                  <Chart selected={selection.some(s => s.id === chart.id)} {...chart} onClick={e => {\n                    if (tool === \"select\") {\n                      setSelection(e.nativeEvent.shiftKey ? [...selection, chart] : [chart]);\n                    }\n                  }} />\n                </Draggable>\n              )\n            })}\n          </Slide>\n        }\n        {report && !selectedSlide &&\n          <Center>\n\n            <Button name=\"create slide\" onClick={() => {\n              updateReport({\n                ...report,\n                slides: [\n                  ...report.slides,\n                  { charts: [] }\n                ]\n              })\n            }}>\n              Create You first Slide\n            </Button>\n          </Center>\n        }\n        {reportQuery.error && <ErrorBox error={reportQuery.error} />}\n      </Stage>\n\n    </Layout >\n  )\n}\n\nconst Chart = styled.div<ChartFragment & { selected: boolean }>`\n  position:absolute;\n  left: ${p => p.x}px;\n  top: ${p => p.y}px;\n  width: ${p => p.width}px;\n  height: ${p => p.height}px;\n  background: #f0f0f0;\n  border: 1px solid #dedede;\n  ${p => p.selected && css`border: 1px dashed ${colors.primary};`};\n`\n\n\nconst Center = styled.div`\n  height:100%;\n  display:grid;\n  place-content:center center;\n  `\n\n\ntype DragBoxProps = {\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n}\n\nconst DragBox = styled.div<DragBoxProps>`\n  position:absolute;\n  width:${p => p.width}px;\n  height:${p => p.height}px;\n  left:${p => p.x}px;\n  top:${p => p.y}px;\n  border: 2px dashed ${colors.primary};\n`\n\nconst Slide = styled.section<{ width: number, height: number }>`\n  position:relative;\n  background:white;\n  box-shadow: 0 1px 4px rgba(0, 0, 0, 0.4);\n  width: ${p => p.width}px;\n  height:${p => p.height}px;\n`\n\nconst NewElements = styled.div`\n  display:grid;\n  grid-auto-flow: column;\n  grid-gap: 4px;\n  place-content: center start;\n`\n\n\nconst Layout = styled.div`\n  display:grid;\n  height:100%;\n  grid-gap: 32px;\n  background:#f5f5f5;\n  grid-template-rows: auto 1fr;\n  place-content: start stretch;\n  overflow:hidden;\n`\n\nconst Stage = styled.main<{ tool: Tool, scale: number }>`\n  display:grid;\n  width:100%;\n  place-content:center center;\n  overflow:hidden;\n  ${p => {\n    switch (p.tool) {\n      case \"insert_chart\":\n      case \"insert_image\":\n      case \"insert_text\":\n        return css`\n        cursor: crosshair;\n        `\n    }\n  }}\n  & > * {\n    transform: scale(${p => p.scale});\n    transform-origin: 50% 50%;\n  }\n`\n\n\nconst LoadingIndicator = () =>\n  <LoadingWrapper>\n    <LoadingDot delay={0}>.</LoadingDot>\n    <LoadingDot delay={200}>.</LoadingDot>\n    <LoadingDot delay={400}>.</LoadingDot>\n  </LoadingWrapper>\n\nconst jumpAnimation = keyframes`\n  from {\n    opacity:0;\n  }\n  to {\n    opacity:1;\n  }\n`\n\n\nconst LoadingWrapper = styled.div`\nposition:absolute;\n  top: 32px;\n  right: 32px;\n  font-size: 2rem;\n`\nconst LoadingDot = styled.span<{ delay: number }>`\n  animation:${jumpAnimation} 1s ease infinite;\n  animation-delay:${p => p.delay}ms;\n`"]},"metadata":{},"sourceType":"module"}