{"ast":null,"code":"import _Date$now from \"@babel/runtime-corejs2/core-js/date/now\";\nimport _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport jwt from \"jsonwebtoken\";\nimport { JWT_SECRET } from \"./config\";\n\nconst sign = (payload, options) => new _Promise((resolve, reject) => {\n  if (!JWT_SECRET) {\n    throw new Error(\"MISSING JWT SECRET\");\n  }\n\n  jwt.sign(payload, JWT_SECRET, options, (err, token) => err ? reject(err) : resolve(token));\n});\n\nconst verify = token => {\n  if (!JWT_SECRET) {\n    throw new Error(\"MISSING JWT SECRET\");\n  }\n\n  return new _Promise((resolve, reject) => {\n    jwt.verify(token, JWT_SECRET, (err, res) => err ? reject(err) : resolve(res));\n  });\n};\n\nexport const createAuthToken = user => sign({\n  sub: user.id,\n  email: user.email,\n  iat: _Date$now() / 1000\n}, {\n  expiresIn: \"15m\"\n});\nexport const verifyAuthToken = token => verify(token);\nexport const createRefreshToken = user => sign({\n  userId: user.id\n}, {\n  expiresIn: \"30d\"\n});\nexport const verifyRefreshToken = token => verify(token);\nexport const createSigninToken = email => sign({\n  email\n}, {\n  expiresIn: \"5m\"\n});\nexport const verifySigninToken = token => verify(token);","map":{"version":3,"sources":["/Users/andreasmoller/code/reports/server/helpers/jwt.ts"],"names":["jwt","JWT_SECRET","sign","payload","options","resolve","reject","Error","err","token","verify","res","createAuthToken","user","sub","id","email","iat","expiresIn","verifyAuthToken","createRefreshToken","userId","verifyRefreshToken","createSigninToken","verifySigninToken"],"mappings":";;AAAA,OAAOA,GAAP,MAAiC,cAAjC;AACA,SAASC,UAAT,QAA2B,UAA3B;;AAGA,MAAMC,IAAI,GAAG,CAACC,OAAD,EAAeC,OAAf,KAAyD,aAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACrG,MAAI,CAACL,UAAL,EAAiB;AACf,UAAM,IAAIM,KAAJ,CAAU,oBAAV,CAAN;AACD;;AACDP,EAAAA,GAAG,CAACE,IAAJ,CAASC,OAAT,EAAkBF,UAAlB,EAA8BG,OAA9B,EAAuC,CAACI,GAAD,EAAMC,KAAN,KAAgBD,GAAG,GAAGF,MAAM,CAACE,GAAD,CAAT,GAAiBH,OAAO,CAACI,KAAD,CAAlF;AACD,CALqE,CAAtE;;AAQA,MAAMC,MAAM,GAAID,KAAD,IAAmB;AAChC,MAAI,CAACR,UAAL,EAAiB;AACf,UAAM,IAAIM,KAAJ,CAAU,oBAAV,CAAN;AACD;;AACD,SAAO,aAAY,CAACF,OAAD,EAAUC,MAAV,KAAqB;AACtCN,IAAAA,GAAG,CAACU,MAAJ,CAAWD,KAAX,EAAkBR,UAAlB,EAA8B,CAACO,GAAD,EAAMG,GAAN,KAAcH,GAAG,GAAGF,MAAM,CAACE,GAAD,CAAT,GAAiBH,OAAO,CAACM,GAAD,CAAvE;AACD,GAFM,CAAP;AAGD,CAPD;;AAgBA,OAAO,MAAMC,eAAe,GAAIC,IAAD,IAAgBX,IAAI,CAAC;AAClDY,EAAAA,GAAG,EAAED,IAAI,CAACE,EADwC;AAElDC,EAAAA,KAAK,EAAEH,IAAI,CAACG,KAFsC;AAGlDC,EAAAA,GAAG,EAAE,cAAa;AAHgC,CAAD,EAIhD;AAAEC,EAAAA,SAAS,EAAE;AAAb,CAJgD,CAA5C;AAKP,OAAO,MAAMC,eAAe,GAAIV,KAAD,IAAmBC,MAAM,CAACD,KAAD,CAAjD;AAEP,OAAO,MAAMW,kBAAkB,GAAIP,IAAD,IAAgBX,IAAI,CAAC;AAAEmB,EAAAA,MAAM,EAAER,IAAI,CAACE;AAAf,CAAD,EAAsB;AAAEG,EAAAA,SAAS,EAAE;AAAb,CAAtB,CAA/C;AACP,OAAO,MAAMI,kBAAkB,GAAIb,KAAD,IAAmBC,MAAM,CAACD,KAAD,CAApD;AAGP,OAAO,MAAMc,iBAAiB,GAAIP,KAAD,IAAmBd,IAAI,CAAC;AAAEc,EAAAA;AAAF,CAAD,EAAY;AAAEE,EAAAA,SAAS,EAAE;AAAb,CAAZ,CAAjD;AACP,OAAO,MAAMM,iBAAiB,GAAIf,KAAD,IAAmBC,MAAM,CAACD,KAAD,CAAnD","sourcesContent":["import jwt, { SignOptions } from \"jsonwebtoken\"\nimport { JWT_SECRET } from \"./config\"\nimport { User } from \"@generated/photon\";\n\nconst sign = (payload: any, options: SignOptions): Promise<string> => new Promise((resolve, reject) => {\n  if (!JWT_SECRET) {\n    throw new Error(\"MISSING JWT SECRET\")\n  }\n  jwt.sign(payload, JWT_SECRET, options, (err, token) => err ? reject(err) : resolve(token))\n});\n\n\nconst verify = (token: string) => {\n  if (!JWT_SECRET) {\n    throw new Error(\"MISSING JWT SECRET\")\n  }\n  return new Promise((resolve, reject) => {\n    jwt.verify(token, JWT_SECRET, (err, res) => err ? reject(err) : resolve(res))\n  });\n}\n\n\nexport type AuthToken = {\n  sub: string;\n  email: string;\n  iat: number;\n}\n\nexport const createAuthToken = (user: User) => sign({\n  sub: user.id,\n  email: user.email,\n  iat: Date.now() / 1000\n}, { expiresIn: \"15m\" })\nexport const verifyAuthToken = (token: string) => verify(token) as Promise<AuthToken>\n\nexport const createRefreshToken = (user: User) => sign({ userId: user.id }, { expiresIn: \"30d\" })\nexport const verifyRefreshToken = (token: string) => verify(token) as Promise<{ userId: string }>\n\n\nexport const createSigninToken = (email: string) => sign({ email }, { expiresIn: \"5m\" })\nexport const verifySigninToken = (token: string) => verify(token) as Promise<{ email: string }>"]},"metadata":{},"sourceType":"module"}