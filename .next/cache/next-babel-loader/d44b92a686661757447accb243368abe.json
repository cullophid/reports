{"ast":null,"code":"import { useState, useEffect, useRef } from \"react\";\nexport var useMouseDrag = function useMouseDrag() {\n  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var _config$parentRef = config.parentRef,\n      parentRef = _config$parentRef === void 0 ? useRef() : _config$parentRef;\n\n  var calculatePos = function calculatePos(e) {\n    var box = parentRef.current && parentRef.current.getBoundingClientRect();\n    return {\n      x: e.clientX - (box ? box.left : 0),\n      y: e.clientY - (box ? box.top : 0)\n    };\n  };\n\n  var _useState = useState(),\n      dragOrigin = _useState[0],\n      setDragOrigin = _useState[1];\n\n  var _useState2 = useState(),\n      dragPos = _useState2[0],\n      setDragPos = _useState2[1];\n\n  useEffect(function () {\n    var handler = function handler() {\n      if (dragPos && config.onDragEnd) {\n        config.onDragEnd(dragPos, dragOrigin);\n      }\n\n      setDragPos(undefined);\n      setDragOrigin(undefined);\n    };\n\n    window.addEventListener(\"mouseup\", handler);\n    return function () {\n      return window.removeEventListener(\"mouseup\", handler);\n    };\n  }, [dragPos, config.onDragEnd]);\n  return {\n    dragHandlers: {\n      onMouseDown: function onMouseDown(e) {\n        setDragOrigin(calculatePos(e));\n      },\n      onMouseMove: function onMouseMove(e) {\n        if (dragOrigin) {\n          setDragPos(calculatePos(e));\n\n          if (dragPos) {\n            config.onDragStart && config.onDragStart(dragPos, dragOrigin);\n          }\n\n          config.onDrag && config.onDrag(dragPos, dragOrigin);\n        }\n      }\n    },\n    isDragging: !!dragPos,\n    dragPos: dragPos,\n    dragOrigin: dragPos && dragOrigin,\n    parentRef: parentRef\n  };\n};","map":{"version":3,"sources":["/Users/andreasmoller/code/reports/client/hooks/drag.ts"],"names":["useState","useEffect","useRef","useMouseDrag","config","parentRef","calculatePos","e","box","current","getBoundingClientRect","x","clientX","left","y","clientY","top","dragOrigin","setDragOrigin","dragPos","setDragPos","handler","onDragEnd","undefined","window","addEventListener","removeEventListener","dragHandlers","onMouseDown","onMouseMove","onDragStart","onDrag","isDragging"],"mappings":"AAAA,SAAqBA,QAArB,EAAiDC,SAAjD,EAA4DC,MAA5D,QAA0E,OAA1E;AAUA,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,GAAyB;AAAA,MAAxBC,MAAwB,uEAAP,EAAO;AAAA,0BAClBA,MADkB,CAC3CC,SAD2C;AAAA,MAC3CA,SAD2C,kCAC/BH,MAAM,EADyB;;AAGnD,MAAMI,YAAY,GAAG,SAAfA,YAAe,CAACC,CAAD,EAAmB;AACtC,QAAMC,GAAG,GAAGH,SAAS,CAACI,OAAV,IAAqBJ,SAAS,CAACI,OAAV,CAAkBC,qBAAlB,EAAjC;AACA,WAAO;AACLC,MAAAA,CAAC,EAAEJ,CAAC,CAACK,OAAF,IAAaJ,GAAG,GAAGA,GAAG,CAACK,IAAP,GAAc,CAA9B,CADE;AAELC,MAAAA,CAAC,EAAEP,CAAC,CAACQ,OAAF,IAAaP,GAAG,GAAGA,GAAG,CAACQ,GAAP,GAAa,CAA7B;AAFE,KAAP;AAID,GAND;;AAHmD,kBAUfhB,QAAQ,EAVO;AAAA,MAU5CiB,UAV4C;AAAA,MAUhCC,aAVgC;;AAAA,mBAWrBlB,QAAQ,EAXa;AAAA,MAW5CmB,OAX4C;AAAA,MAWnCC,UAXmC;;AAanDnB,EAAAA,SAAS,CAAC,YAAM;AACd,QAAMoB,OAAO,GAAG,SAAVA,OAAU,GAAM;AACpB,UAAIF,OAAO,IAAIf,MAAM,CAACkB,SAAtB,EAAiC;AAC/BlB,QAAAA,MAAM,CAACkB,SAAP,CAAiBH,OAAjB,EAA0BF,UAA1B;AACD;;AACDG,MAAAA,UAAU,CAACG,SAAD,CAAV;AACAL,MAAAA,aAAa,CAACK,SAAD,CAAb;AACD,KAND;;AAOAC,IAAAA,MAAM,CAACC,gBAAP,CAAwB,SAAxB,EAAmCJ,OAAnC;AACA,WAAO;AAAA,aAAMG,MAAM,CAACE,mBAAP,CAA2B,SAA3B,EAAsCL,OAAtC,CAAN;AAAA,KAAP;AACD,GAVQ,EAUN,CAACF,OAAD,EAAUf,MAAM,CAACkB,SAAjB,CAVM,CAAT;AAcA,SAAO;AACLK,IAAAA,YAAY,EAAE;AAEZC,MAAAA,WAAW,EAAE,qBAACrB,CAAD,EAAmB;AAC9BW,QAAAA,aAAa,CAACZ,YAAY,CAACC,CAAD,CAAb,CAAb;AACD,OAJW;AAKZsB,MAAAA,WAAW,EAAE,qBAACtB,CAAD,EAAmB;AAC9B,YAAIU,UAAJ,EAAgB;AACdG,UAAAA,UAAU,CAACd,YAAY,CAACC,CAAD,CAAb,CAAV;;AACA,cAAIY,OAAJ,EAAa;AACXf,YAAAA,MAAM,CAAC0B,WAAP,IAAsB1B,MAAM,CAAC0B,WAAP,CAAmBX,OAAnB,EAA4BF,UAA5B,CAAtB;AACD;;AACDb,UAAAA,MAAM,CAAC2B,MAAP,IAAiB3B,MAAM,CAAC2B,MAAP,CAAcZ,OAAd,EAAuBF,UAAvB,CAAjB;AACD;AACF;AAbW,KADT;AAgBLe,IAAAA,UAAU,EAAE,CAAC,CAACb,OAhBT;AAiBLA,IAAAA,OAAO,EAAPA,OAjBK;AAkBLF,IAAAA,UAAU,EAAEE,OAAO,IAAIF,UAlBlB;AAmBLZ,IAAAA,SAAS,EAATA;AAnBK,GAAP;AAsBD,CAjDM","sourcesContent":["import { MouseEvent, useState, MutableRefObject, useEffect, useRef } from \"react\"\n\nexport type Pos = { x: number, y: number }\ntype Config = {\n  parentRef?: MutableRefObject<HTMLDivElement>,\n  onDrag?: (pos: Pos, origin: Pos) => void;\n  onDragStart?: (pos: Pos, origin: Pos) => void;\n  onDragEnd?: (pos: Pos, origin: Pos) => void;\n}\n\nexport const useMouseDrag = (config: Config = {}) => {\n  const { parentRef = useRef() } = config\n\n  const calculatePos = (e: MouseEvent) => {\n    const box = parentRef.current && parentRef.current.getBoundingClientRect()\n    return {\n      x: e.clientX - (box ? box.left : 0),\n      y: e.clientY - (box ? box.top : 0)\n    }\n  }\n  const [dragOrigin, setDragOrigin] = useState<Pos | undefined>()\n  const [dragPos, setDragPos] = useState<Pos | undefined>()\n\n  useEffect(() => {\n    const handler = () => {\n      if (dragPos && config.onDragEnd) {\n        config.onDragEnd(dragPos, dragOrigin)\n      }\n      setDragPos(undefined);\n      setDragOrigin(undefined);\n    }\n    window.addEventListener(\"mouseup\", handler)\n    return () => window.removeEventListener(\"mouseup\", handler)\n  }, [dragPos, config.onDragEnd])\n\n\n\n  return {\n    dragHandlers: {\n\n      onMouseDown: (e: MouseEvent) => {\n        setDragOrigin(calculatePos(e))\n      },\n      onMouseMove: (e: MouseEvent) => {\n        if (dragOrigin) {\n          setDragPos(calculatePos(e))\n          if (dragPos) {\n            config.onDragStart && config.onDragStart(dragPos, dragOrigin)\n          }\n          config.onDrag && config.onDrag(dragPos, dragOrigin)\n        }\n      },\n    },\n    isDragging: !!dragPos,\n    dragPos,\n    dragOrigin: dragPos && dragOrigin,\n    parentRef\n  }\n\n}"]},"metadata":{},"sourceType":"module"}