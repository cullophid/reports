{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nvar _jsxFileName = \"/Users/andreasmoller/code/reports/client/components/Apollo.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport ApolloClient, { InMemoryCache } from \"apollo-boost\";\nimport fetch from \"isomorphic-fetch\";\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport { useMemo } from \"react\";\nimport { useAuth } from \"./Auth\";\nexport var Apollo = function Apollo(_ref) {\n  var children = _ref.children;\n  var jwt = useAuth();\n  var client = useMemo(function () {\n    return new ApolloClient({\n      uri: \"/api/graphql\",\n      request: function () {\n        var _request = _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee(operation) {\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  operation.setContext({\n                    headers: jwt ? {\n                      Authorization: \"Bearer \".concat(jwt)\n                    } : {}\n                  });\n\n                case 1:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n\n        function request(_x) {\n          return _request.apply(this, arguments);\n        }\n\n        return request;\n      }(),\n      onError: function onError(_ref2) {\n        var response = _ref2.response,\n            operation = _ref2.operation;\n\n        if (response && response.errors) {\n          console.error(response, operation);\n        }\n      },\n      cache: new InMemoryCache({\n        dataIdFromObject: function dataIdFromObject(object) {\n          return object.id;\n        }\n      }),\n      fetch: fetch\n    });\n  }, [jwt]);\n  return __jsx(ApolloProvider, {\n    client: client,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, children);\n};","map":{"version":3,"sources":["/Users/andreasmoller/code/reports/client/components/Apollo.tsx"],"names":["ApolloClient","InMemoryCache","fetch","ApolloProvider","useMemo","useAuth","Apollo","children","jwt","client","uri","request","operation","setContext","headers","Authorization","onError","response","errors","console","error","cache","dataIdFromObject","object","id"],"mappings":";;;;;AAAA,OAAOA,YAAP,IAAkCC,aAAlC,QAAuD,cAAvD;AACA,OAAOC,KAAP,MAAkB,kBAAlB;AAEA,SAASC,cAAT,QAA+B,qBAA/B;AACA,SAAqBC,OAArB,QAAoC,OAApC;AACA,SAASC,OAAT,QAAwB,QAAxB;AAEA,OAAO,IAAMC,MAAM,GAAG,SAATA,MAAS,OAA4C;AAAA,MAAzCC,QAAyC,QAAzCA,QAAyC;AAChE,MAAMC,GAAG,GAAGH,OAAO,EAAnB;AACA,MAAMI,MAAM,GAAGL,OAAO,CAAC;AAAA,WAAM,IAAIJ,YAAJ,CAAiB;AAC5CU,MAAAA,GAAG,EAAE,cADuC;AAE5CC,MAAAA,OAAO;AAAA;AAAA;AAAA,iCAAE,iBAAOC,SAAP;AAAA;AAAA;AAAA;AAAA;AACPA,kBAAAA,SAAS,CAACC,UAAV,CAAqB;AACnBC,oBAAAA,OAAO,EAAEN,GAAG,GAAG;AACbO,sBAAAA,aAAa,mBAAYP,GAAZ;AADA,qBAAH,GAER;AAHe,mBAArB;;AADO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA,SAFqC;AAS5CQ,MAAAA,OAAO,EAAE,wBAA6B;AAAA,YAA1BC,QAA0B,SAA1BA,QAA0B;AAAA,YAAhBL,SAAgB,SAAhBA,SAAgB;;AACpC,YAAIK,QAAQ,IAAIA,QAAQ,CAACC,MAAzB,EAAiC;AAC/BC,UAAAA,OAAO,CAACC,KAAR,CAAcH,QAAd,EAAwBL,SAAxB;AACD;AACF,OAb2C;AAc5CS,MAAAA,KAAK,EAAE,IAAIpB,aAAJ,CAAkB;AACvBqB,QAAAA,gBAAgB,EAAE,0BAAAC,MAAM;AAAA,iBAAIA,MAAM,CAACC,EAAX;AAAA;AADD,OAAlB,CAdqC;AAiB5CtB,MAAAA,KAAK,EAALA;AAjB4C,KAAjB,CAAN;AAAA,GAAD,EAkBlB,CAACM,GAAD,CAlBkB,CAAtB;AAoBA,SACE,MAAC,cAAD;AAAgB,IAAA,MAAM,EAAEC,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGF,QADH,CADF;AAKD,CA3BM","sourcesContent":["import ApolloClient, { Operation, InMemoryCache } from \"apollo-boost\";\nimport fetch from \"isomorphic-fetch\";\n\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport { ReactChild, useMemo } from \"react\";\nimport { useAuth } from \"./Auth\";\n\nexport const Apollo = ({ children }: { children: ReactChild }) => {\n  const jwt = useAuth()\n  const client = useMemo(() => new ApolloClient({\n    uri: \"/api/graphql\",\n    request: async (operation: Operation) => {\n      operation.setContext({\n        headers: jwt ? {\n          Authorization: `Bearer ${jwt}`\n        } : {},\n      });\n    },\n    onError: ({ response, operation }) => {\n      if (response && response.errors) {\n        console.error(response, operation);\n      }\n    },\n    cache: new InMemoryCache({\n      dataIdFromObject: object => object.id,\n    }),\n    fetch,\n  }), [jwt])\n\n  return (\n    <ApolloProvider client={client} >\n      {children}\n    </ApolloProvider>\n  )\n}"]},"metadata":{},"sourceType":"module"}