{"ast":null,"code":"var _jsxFileName = \"/Users/andreasmoller/code/reports/client/components/Apollo.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport ApolloClient, { InMemoryCache } from \"apollo-boost\";\nimport fetch from \"isomorphic-fetch\";\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport { useMemo } from \"react\";\nimport { useAuth } from \"./Auth\";\nexport const Apollo = ({\n  children\n}) => {\n  const jwt = useAuth();\n  const client = useMemo(() => new ApolloClient({\n    uri: \"/api/graphql\",\n    request: async operation => {\n      operation.setContext({\n        headers: jwt ? {\n          Authorization: `Bearer ${jwt}`\n        } : {}\n      });\n    },\n    onError: ({\n      response,\n      operation\n    }) => {\n      if (response && response.errors) {\n        console.error(response, operation);\n      }\n    },\n    cache: new InMemoryCache({\n      dataIdFromObject: object => object.id\n    }),\n    fetch\n  }), [jwt]);\n  return __jsx(ApolloProvider, {\n    client: client,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, children);\n};","map":{"version":3,"sources":["/Users/andreasmoller/code/reports/client/components/Apollo.tsx"],"names":["ApolloClient","InMemoryCache","fetch","ApolloProvider","useMemo","useAuth","Apollo","children","jwt","client","uri","request","operation","setContext","headers","Authorization","onError","response","errors","console","error","cache","dataIdFromObject","object","id"],"mappings":";;;AAAA,OAAOA,YAAP,IAAkCC,aAAlC,QAAuD,cAAvD;AACA,OAAOC,KAAP,MAAkB,kBAAlB;AAEA,SAASC,cAAT,QAA+B,qBAA/B;AACA,SAAqBC,OAArB,QAAoC,OAApC;AACA,SAASC,OAAT,QAAwB,QAAxB;AAEA,OAAO,MAAMC,MAAM,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAA4C;AAChE,QAAMC,GAAG,GAAGH,OAAO,EAAnB;AACA,QAAMI,MAAM,GAAGL,OAAO,CAAC,MAAM,IAAIJ,YAAJ,CAAiB;AAC5CU,IAAAA,GAAG,EAAE,cADuC;AAE5CC,IAAAA,OAAO,EAAE,MAAOC,SAAP,IAAgC;AACvCA,MAAAA,SAAS,CAACC,UAAV,CAAqB;AACnBC,QAAAA,OAAO,EAAEN,GAAG,GAAG;AACbO,UAAAA,aAAa,EAAG,UAASP,GAAI;AADhB,SAAH,GAER;AAHe,OAArB;AAKD,KAR2C;AAS5CQ,IAAAA,OAAO,EAAE,CAAC;AAAEC,MAAAA,QAAF;AAAYL,MAAAA;AAAZ,KAAD,KAA6B;AACpC,UAAIK,QAAQ,IAAIA,QAAQ,CAACC,MAAzB,EAAiC;AAC/BC,QAAAA,OAAO,CAACC,KAAR,CAAcH,QAAd,EAAwBL,SAAxB;AACD;AACF,KAb2C;AAc5CS,IAAAA,KAAK,EAAE,IAAIpB,aAAJ,CAAkB;AACvBqB,MAAAA,gBAAgB,EAAEC,MAAM,IAAIA,MAAM,CAACC;AADZ,KAAlB,CAdqC;AAiB5CtB,IAAAA;AAjB4C,GAAjB,CAAP,EAkBlB,CAACM,GAAD,CAlBkB,CAAtB;AAoBA,SACE,MAAC,cAAD;AAAgB,IAAA,MAAM,EAAEC,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGF,QADH,CADF;AAKD,CA3BM","sourcesContent":["import ApolloClient, { Operation, InMemoryCache } from \"apollo-boost\";\nimport fetch from \"isomorphic-fetch\";\n\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport { ReactChild, useMemo } from \"react\";\nimport { useAuth } from \"./Auth\";\n\nexport const Apollo = ({ children }: { children: ReactChild }) => {\n  const jwt = useAuth()\n  const client = useMemo(() => new ApolloClient({\n    uri: \"/api/graphql\",\n    request: async (operation: Operation) => {\n      operation.setContext({\n        headers: jwt ? {\n          Authorization: `Bearer ${jwt}`\n        } : {},\n      });\n    },\n    onError: ({ response, operation }) => {\n      if (response && response.errors) {\n        console.error(response, operation);\n      }\n    },\n    cache: new InMemoryCache({\n      dataIdFromObject: object => object.id,\n    }),\n    fetch,\n  }), [jwt])\n\n  return (\n    <ApolloProvider client={client} >\n      {children}\n    </ApolloProvider>\n  )\n}"]},"metadata":{},"sourceType":"module"}