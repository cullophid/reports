{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nimport cuid from \"cuid\";\nexport const updateReport = async (_, {\n  report\n}, ctx) => {\n  if (!ctx.session.user) {\n    throw new Error(\"You must be authenticated\");\n  }\n\n  const current = await ctx.photon.reports.findOne({\n    where: {\n      id: report.id\n    },\n    include: {\n      owner: true,\n      slides: {\n        include: {\n          charts: true\n        }\n      }\n    }\n  });\n\n  if (current.owner.id !== ctx.session.user.sub) {\n    throw new Error(\"Report does not exist\");\n  }\n\n  const doNotDelete = [];\n  report.slides.forEach(slide => {\n    if (slide.id) {\n      doNotDelete.push(slide.id);\n    }\n\n    slide.charts.forEach(chart => {\n      if (chart.id) {\n        doNotDelete.push(chart.id);\n      }\n    });\n  });\n  return ctx.photon.reports.update({\n    where: {\n      id: report.id\n    },\n    data: {\n      title: report.title,\n      slides: {\n        update: report.slides.filter(s => s.id).map((_ref) => {\n          let {\n            id\n          } = _ref,\n              slide = _objectWithoutProperties(_ref, [\"id\"]);\n\n          return {\n            where: {\n              id\n            },\n            data: _objectSpread({}, slide, {\n              charts: slide.charts && {\n                update: slide.charts.filter(c => c.id).map((_ref2) => {\n                  let {\n                    id\n                  } = _ref2,\n                      chart = _objectWithoutProperties(_ref2, [\"id\"]);\n\n                  return {\n                    where: {\n                      id\n                    },\n                    data: chart\n                  };\n                }),\n                create: slide.charts.filter(c => !c.id).map(chart => {\n                  const id = cuid();\n                  doNotDelete.push(id);\n                  return _objectSpread({}, chart, {\n                    id\n                  });\n                }),\n                deleteMany: {\n                  id: {\n                    notIn: doNotDelete\n                  }\n                }\n              }\n            })\n          };\n        }),\n        upsert: report.slides.map(slide => ({\n          where: {\n            id: slide.id\n          },\n          update: slide,\n          create: slide\n        })),\n        create: report.slides.filter(s => !s.id).map((_ref3) => {\n          let {\n            charts\n          } = _ref3,\n              slide = _objectWithoutProperties(_ref3, [\"charts\"]);\n\n          const id = cuid();\n          doNotDelete.push(id);\n          return _objectSpread({}, slide, {\n            id,\n            charts: {\n              create: charts\n            }\n          });\n        }),\n        deleteMany: {\n          id: {\n            notIn: doNotDelete\n          }\n        }\n      }\n    }\n  });\n};","map":{"version":3,"sources":["/Users/andreasmoller/code/reports/server/resolvers/Mutation/updateReport.ts"],"names":["cuid","updateReport","_","report","ctx","session","user","Error","current","photon","reports","findOne","where","id","include","owner","slides","charts","sub","doNotDelete","forEach","slide","push","chart","update","data","title","filter","s","map","c","create","deleteMany","notIn","upsert"],"mappings":"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","sourcesContent":["import { MutationResolvers } from \"../../codegen/graphql\";\nimport cuid from \"cuid\"\n\nexport const updateReport: MutationResolvers[\"updateReport\"] = async (_, { report }, ctx) => {\n  if (!ctx.session.user) {\n    throw new Error(\"You must be authenticated\")\n  }\n  const current = await ctx.photon.reports.findOne({\n    where: { id: report.id },\n    include: {\n      owner: true,\n      slides: {\n        include: {\n          charts: true\n        }\n      }\n    }\n  })\n  if (current.owner.id !== ctx.session.user.sub) {\n    throw new Error(\"Report does not exist\")\n  }\n\n  const doNotDelete: string[] = []\n\n  report.slides.forEach(slide => {\n    if (slide.id) {\n      doNotDelete.push(slide.id)\n    }\n    slide.charts.forEach(chart => {\n      if (chart.id) {\n        doNotDelete.push(chart.id)\n      }\n    })\n  })\n\n\n  return ctx.photon.reports.update({\n    where: { id: report.id },\n    data: {\n      title: report.title,\n      slides: {\n        update: report.slides.filter(s => s.id)\n          .map(({ id, ...slide }) => ({\n            where: {\n              id\n            },\n            data: {\n              ...slide,\n              charts: slide.charts && {\n                update: slide.charts.filter(c => c.id)\n                  .map(({ id, ...chart }) => ({\n                    where: { id },\n                    data: chart\n                  })),\n                create: slide.charts.filter(c => !c.id).map(chart => {\n                  const id = cuid();\n                  doNotDelete.push(id)\n                  return {\n                    ...chart,\n                    id\n                  }\n                }),\n                deleteMany: {\n                  id: { notIn: doNotDelete }\n                },\n              }\n            }\n          })),\n        upsert: report.slides.map((slide) => ({\n          where: {\n            id: slide.id\n          },\n          update: slide,\n          create: slide\n        })),\n        create: report.slides\n          .filter(s => !s.id)\n          .map(({ charts, ...slide }) => {\n            const id = cuid();\n            doNotDelete.push(id)\n            return {\n              ...slide,\n              id,\n              charts: {\n                create: charts\n              }\n            }\n          }),\n        deleteMany: {\n          id: {\n            notIn: doNotDelete\n          }\n        }\n      }\n    }\n  })\n}"]},"metadata":{},"sourceType":"module"}