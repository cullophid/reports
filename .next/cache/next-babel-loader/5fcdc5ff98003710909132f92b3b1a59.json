{"ast":null,"code":"import gql from 'graphql-tag';\nimport * as ApolloReactHooks from '@apollo/react-hooks';\nexport const ReportFragmentDoc = gql`\n    fragment Report on Report {\n  id\n  title\n  width\n  height\n  slides {\n    id\n  }\n}\n    `;\nexport const ReportListReportFragmentDoc = gql`\n    fragment ReportListReport on Report {\n  id\n  title\n  width\n  height\n}\n    `;\nexport const SignInDocument = gql`\n    mutation SignIn($email: String!) {\n  signin(email: $email)\n}\n    `;\nexport function useSignInMutation(baseOptions) {\n  return ApolloReactHooks.useMutation(SignInDocument, baseOptions);\n}\nexport const ReportGetDocument = gql`\n    query ReportGet($id: ID!) {\n  report(id: $id) {\n    ...Report\n  }\n}\n    ${ReportFragmentDoc}`;\nexport function useReportGetQuery(baseOptions) {\n  return ApolloReactHooks.useQuery(ReportGetDocument, baseOptions);\n}\nexport function useReportGetLazyQuery(baseOptions) {\n  return ApolloReactHooks.useLazyQuery(ReportGetDocument, baseOptions);\n}\nexport const ReportListGetDocument = gql`\n    query ReportListGet {\n  reports {\n    ...ReportListReport\n  }\n}\n    ${ReportListReportFragmentDoc}`;\nexport function useReportListGetQuery(baseOptions) {\n  return ApolloReactHooks.useQuery(ReportListGetDocument, baseOptions);\n}\nexport function useReportListGetLazyQuery(baseOptions) {\n  return ApolloReactHooks.useLazyQuery(ReportListGetDocument, baseOptions);\n}\nexport const ReportListCreateReportDocument = gql`\n    mutation ReportListCreateReport($title: String!) {\n  createReport(title: $title) {\n    ...ReportListReport\n  }\n}\n    ${ReportListReportFragmentDoc}`;\nexport function useReportListCreateReportMutation(baseOptions) {\n  return ApolloReactHooks.useMutation(ReportListCreateReportDocument, baseOptions);\n}","map":{"version":3,"sources":["/Users/andreasmoller/code/reports/client/codegen/graphql.ts"],"names":["gql","ApolloReactHooks","ReportFragmentDoc","ReportListReportFragmentDoc","SignInDocument","useSignInMutation","baseOptions","useMutation","ReportGetDocument","useReportGetQuery","useQuery","useReportGetLazyQuery","useLazyQuery","ReportListGetDocument","useReportListGetQuery","useReportListGetLazyQuery","ReportListCreateReportDocument","useReportListCreateReportMutation"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,aAAhB;AAEA,OAAO,KAAKC,gBAAZ,MAAkC,qBAAlC;AAgIA,OAAO,MAAMC,iBAAiB,GAAGF,GAAI;;;;;;;;;;KAA9B;AAWP,OAAO,MAAMG,2BAA2B,GAAGH,GAAI;;;;;;;KAAxC;AAQP,OAAO,MAAMI,cAAc,GAAGJ,GAAI;;;;KAA3B;AAOP,OAAO,SAASK,iBAAT,CAA2BC,WAA3B,EAAwH;AAC7H,SAAOL,gBAAgB,CAACM,WAAjB,CAAsEH,cAAtE,EAAsFE,WAAtF,CAAP;AACD;AAID,OAAO,MAAME,iBAAiB,GAAGR,GAAI;;;;;;MAM/BE,iBAAkB,EANjB;AAQP,OAAO,SAASO,iBAAT,CAA2BH,WAA3B,EAAqH;AAC1H,SAAOL,gBAAgB,CAACS,QAAjB,CAAmEF,iBAAnE,EAAsFF,WAAtF,CAAP;AACD;AACD,OAAO,SAASK,qBAAT,CAA+BL,WAA/B,EAA6H;AAClI,SAAOL,gBAAgB,CAACW,YAAjB,CAAuEJ,iBAAvE,EAA0FF,WAA1F,CAAP;AACD;AAID,OAAO,MAAMO,qBAAqB,GAAGb,GAAI;;;;;;MAMnCG,2BAA4B,EAN3B;AAQP,OAAO,SAASW,qBAAT,CAA+BR,WAA/B,EAAiI;AACtI,SAAOL,gBAAgB,CAACS,QAAjB,CAA2EG,qBAA3E,EAAkGP,WAAlG,CAAP;AACD;AACD,OAAO,SAASS,yBAAT,CAAmCT,WAAnC,EAAyI;AAC9I,SAAOL,gBAAgB,CAACW,YAAjB,CAA+EC,qBAA/E,EAAsGP,WAAtG,CAAP;AACD;AAID,OAAO,MAAMU,8BAA8B,GAAGhB,GAAI;;;;;;MAM5CG,2BAA4B,EAN3B;AASP,OAAO,SAASc,iCAAT,CAA2CX,WAA3C,EAAwK;AAC7K,SAAOL,gBAAgB,CAACM,WAAjB,CAAsGS,8BAAtG,EAAsIV,WAAtI,CAAP;AACD","sourcesContent":["import gql from 'graphql-tag';\nimport * as ApolloReactCommon from '@apollo/react-common';\nimport * as ApolloReactHooks from '@apollo/react-hooks';\nexport type Maybe<T> = T | null;\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string,\n  String: string,\n  Boolean: boolean,\n  Int: number,\n  Float: number,\n  Date: any,\n};\n\n\nexport type Mutation = {\n  __typename?: 'Mutation',\n  signin: Scalars['String'],\n  createReport: Report,\n};\n\n\nexport type MutationSigninArgs = {\n  email: Scalars['String']\n};\n\n\nexport type MutationCreateReportArgs = {\n  title: Scalars['String']\n};\n\nexport type Query = {\n  __typename?: 'Query',\n  currentUser?: Maybe<User>,\n  reports: Array<Report>,\n  report: Report,\n};\n\n\nexport type QueryReportArgs = {\n  id: Scalars['ID']\n};\n\nexport type Report = {\n  __typename?: 'Report',\n  id: Scalars['ID'],\n  owner: User,\n  width: Scalars['Int'],\n  height: Scalars['Int'],\n  title: Scalars['String'],\n  slides: Array<Slide>,\n};\n\nexport type Slide = {\n  __typename?: 'Slide',\n  id: Scalars['ID'],\n};\n\nexport type User = {\n  __typename?: 'User',\n  id: Scalars['ID'],\n  createdAt: Scalars['Date'],\n  email: Scalars['String'],\n  firstName: Scalars['String'],\n  lastName: Scalars['String'],\n  reports: Array<Report>,\n};\nexport type SignInMutationVariables = {\n  email: Scalars['String']\n};\n\n\nexport type SignInMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'signin'>\n);\n\nexport type ReportFragment = (\n  { __typename?: 'Report' }\n  & Pick<Report, 'id' | 'title' | 'width' | 'height'>\n  & {\n    slides: Array<(\n      { __typename?: 'Slide' }\n      & Pick<Slide, 'id'>\n    )>\n  }\n);\n\nexport type ReportGetQueryVariables = {\n  id: Scalars['ID']\n};\n\n\nexport type ReportGetQuery = (\n  { __typename?: 'Query' }\n  & {\n    report: { __typename?: 'Report' }\n    & ReportFragment\n  }\n);\n\nexport type ReportListGetQueryVariables = {};\n\n\nexport type ReportListGetQuery = (\n  { __typename?: 'Query' }\n  & {\n    reports: Array<{ __typename?: 'Report' }\n      & ReportListReportFragment\n    >\n  }\n);\n\nexport type ReportListReportFragment = (\n  { __typename?: 'Report' }\n  & Pick<Report, 'id' | 'title' | 'width' | 'height'>\n);\n\nexport type ReportListCreateReportMutationVariables = {\n  title: Scalars['String']\n};\n\n\nexport type ReportListCreateReportMutation = (\n  { __typename?: 'Mutation' }\n  & {\n    createReport: { __typename?: 'Report' }\n    & ReportListReportFragment\n  }\n);\nexport const ReportFragmentDoc = gql`\n    fragment Report on Report {\n  id\n  title\n  width\n  height\n  slides {\n    id\n  }\n}\n    `;\nexport const ReportListReportFragmentDoc = gql`\n    fragment ReportListReport on Report {\n  id\n  title\n  width\n  height\n}\n    `;\nexport const SignInDocument = gql`\n    mutation SignIn($email: String!) {\n  signin(email: $email)\n}\n    `;\nexport type SignInMutationFn = ApolloReactCommon.MutationFunction<SignInMutation, SignInMutationVariables>;\n\nexport function useSignInMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SignInMutation, SignInMutationVariables>) {\n  return ApolloReactHooks.useMutation<SignInMutation, SignInMutationVariables>(SignInDocument, baseOptions);\n}\nexport type SignInMutationHookResult = ReturnType<typeof useSignInMutation>;\nexport type SignInMutationResult = ApolloReactCommon.MutationResult<SignInMutation>;\nexport type SignInMutationOptions = ApolloReactCommon.BaseMutationOptions<SignInMutation, SignInMutationVariables>;\nexport const ReportGetDocument = gql`\n    query ReportGet($id: ID!) {\n  report(id: $id) {\n    ...Report\n  }\n}\n    ${ReportFragmentDoc}`;\n\nexport function useReportGetQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<ReportGetQuery, ReportGetQueryVariables>) {\n  return ApolloReactHooks.useQuery<ReportGetQuery, ReportGetQueryVariables>(ReportGetDocument, baseOptions);\n}\nexport function useReportGetLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<ReportGetQuery, ReportGetQueryVariables>) {\n  return ApolloReactHooks.useLazyQuery<ReportGetQuery, ReportGetQueryVariables>(ReportGetDocument, baseOptions);\n}\n\nexport type ReportGetQueryHookResult = ReturnType<typeof useReportGetQuery>;\nexport type ReportGetQueryResult = ApolloReactCommon.QueryResult<ReportGetQuery, ReportGetQueryVariables>;\nexport const ReportListGetDocument = gql`\n    query ReportListGet {\n  reports {\n    ...ReportListReport\n  }\n}\n    ${ReportListReportFragmentDoc}`;\n\nexport function useReportListGetQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<ReportListGetQuery, ReportListGetQueryVariables>) {\n  return ApolloReactHooks.useQuery<ReportListGetQuery, ReportListGetQueryVariables>(ReportListGetDocument, baseOptions);\n}\nexport function useReportListGetLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<ReportListGetQuery, ReportListGetQueryVariables>) {\n  return ApolloReactHooks.useLazyQuery<ReportListGetQuery, ReportListGetQueryVariables>(ReportListGetDocument, baseOptions);\n}\n\nexport type ReportListGetQueryHookResult = ReturnType<typeof useReportListGetQuery>;\nexport type ReportListGetQueryResult = ApolloReactCommon.QueryResult<ReportListGetQuery, ReportListGetQueryVariables>;\nexport const ReportListCreateReportDocument = gql`\n    mutation ReportListCreateReport($title: String!) {\n  createReport(title: $title) {\n    ...ReportListReport\n  }\n}\n    ${ReportListReportFragmentDoc}`;\nexport type ReportListCreateReportMutationFn = ApolloReactCommon.MutationFunction<ReportListCreateReportMutation, ReportListCreateReportMutationVariables>;\n\nexport function useReportListCreateReportMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<ReportListCreateReportMutation, ReportListCreateReportMutationVariables>) {\n  return ApolloReactHooks.useMutation<ReportListCreateReportMutation, ReportListCreateReportMutationVariables>(ReportListCreateReportDocument, baseOptions);\n}\nexport type ReportListCreateReportMutationHookResult = ReturnType<typeof useReportListCreateReportMutation>;\nexport type ReportListCreateReportMutationResult = ApolloReactCommon.MutationResult<ReportListCreateReportMutation>;\nexport type ReportListCreateReportMutationOptions = ApolloReactCommon.BaseMutationOptions<ReportListCreateReportMutation, ReportListCreateReportMutationVariables>;"]},"metadata":{},"sourceType":"module"}