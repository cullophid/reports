{"ast":null,"code":"import gql from 'graphql-tag';\nimport * as ApolloReactHooks from '@apollo/react-hooks';\nexport const SignInDocument = gql`\n    mutation SignIn($email: String!) {\n  signin(email: $email)\n}\n    `;\nexport function useSignInMutation(baseOptions) {\n  return ApolloReactHooks.useMutation(SignInDocument, baseOptions);\n}\nexport const ReportListGetDocument = gql`\n    query ReportListGet {\n  reports {\n    id\n    title\n  }\n}\n    `;\nexport function useReportListGetQuery(baseOptions) {\n  return ApolloReactHooks.useQuery(ReportListGetDocument, baseOptions);\n}\nexport function useReportListGetLazyQuery(baseOptions) {\n  return ApolloReactHooks.useLazyQuery(ReportListGetDocument, baseOptions);\n}","map":{"version":3,"sources":["/Users/andreasmoller/code/reports/client/codegen/graphql.ts"],"names":["gql","ApolloReactHooks","SignInDocument","useSignInMutation","baseOptions","useMutation","ReportListGetDocument","useReportListGetQuery","useQuery","useReportListGetLazyQuery","useLazyQuery"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,aAAhB;AAEA,OAAO,KAAKC,gBAAZ,MAAkC,qBAAlC;AAkEA,OAAO,MAAMC,cAAc,GAAGF,GAAI;;;;KAA3B;AAOH,OAAO,SAASG,iBAAT,CAA2BC,WAA3B,EAAwH;AAC7H,SAAOH,gBAAgB,CAACI,WAAjB,CAAsEH,cAAtE,EAAsFE,WAAtF,CAAP;AACD;AAIL,OAAO,MAAME,qBAAqB,GAAGN,GAAI;;;;;;;KAAlC;AASH,OAAO,SAASO,qBAAT,CAA+BH,WAA/B,EAAiI;AACtI,SAAOH,gBAAgB,CAACO,QAAjB,CAA2EF,qBAA3E,EAAkGF,WAAlG,CAAP;AACD;AACC,OAAO,SAASK,yBAAT,CAAmCL,WAAnC,EAAyI;AAC9I,SAAOH,gBAAgB,CAACS,YAAjB,CAA+EJ,qBAA/E,EAAsGF,WAAtG,CAAP;AACD","sourcesContent":["import gql from 'graphql-tag';\nimport * as ApolloReactCommon from '@apollo/react-common';\nimport * as ApolloReactHooks from '@apollo/react-hooks';\nexport type Maybe<T> = T | null;\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string,\n  String: string,\n  Boolean: boolean,\n  Int: number,\n  Float: number,\n  Date: any,\n};\n\n\nexport type Mutation = {\n   __typename?: 'Mutation',\n  signin: Scalars['String'],\n};\n\n\nexport type MutationSigninArgs = {\n  email: Scalars['String']\n};\n\nexport type Query = {\n   __typename?: 'Query',\n  currentUser?: Maybe<User>,\n  reports: Array<Report>,\n};\n\nexport type Report = {\n   __typename?: 'Report',\n  id: Scalars['ID'],\n  owner: User,\n  title: Scalars['String'],\n};\n\nexport type User = {\n   __typename?: 'User',\n  id: Scalars['ID'],\n  createdAt: Scalars['Date'],\n  email: Scalars['String'],\n  firstName: Scalars['String'],\n  lastName: Scalars['String'],\n  reports: Array<Report>,\n};\nexport type SignInMutationVariables = {\n  email: Scalars['String']\n};\n\n\nexport type SignInMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'signin'>\n);\n\nexport type ReportListGetQueryVariables = {};\n\n\nexport type ReportListGetQuery = (\n  { __typename?: 'Query' }\n  & { reports: Array<(\n    { __typename?: 'Report' }\n    & Pick<Report, 'id' | 'title'>\n  )> }\n);\n\nexport const SignInDocument = gql`\n    mutation SignIn($email: String!) {\n  signin(email: $email)\n}\n    `;\nexport type SignInMutationFn = ApolloReactCommon.MutationFunction<SignInMutation, SignInMutationVariables>;\n\n    export function useSignInMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SignInMutation, SignInMutationVariables>) {\n      return ApolloReactHooks.useMutation<SignInMutation, SignInMutationVariables>(SignInDocument, baseOptions);\n    }\nexport type SignInMutationHookResult = ReturnType<typeof useSignInMutation>;\nexport type SignInMutationResult = ApolloReactCommon.MutationResult<SignInMutation>;\nexport type SignInMutationOptions = ApolloReactCommon.BaseMutationOptions<SignInMutation, SignInMutationVariables>;\nexport const ReportListGetDocument = gql`\n    query ReportListGet {\n  reports {\n    id\n    title\n  }\n}\n    `;\n\n    export function useReportListGetQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<ReportListGetQuery, ReportListGetQueryVariables>) {\n      return ApolloReactHooks.useQuery<ReportListGetQuery, ReportListGetQueryVariables>(ReportListGetDocument, baseOptions);\n    }\n      export function useReportListGetLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<ReportListGetQuery, ReportListGetQueryVariables>) {\n        return ApolloReactHooks.useLazyQuery<ReportListGetQuery, ReportListGetQueryVariables>(ReportListGetDocument, baseOptions);\n      }\n      \nexport type ReportListGetQueryHookResult = ReturnType<typeof useReportListGetQuery>;\nexport type ReportListGetQueryResult = ApolloReactCommon.QueryResult<ReportListGetQuery, ReportListGetQueryVariables>;"]},"metadata":{},"sourceType":"module"}