{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs2/helpers/interopRequireDefault\");\n\nvar _apolloServerMicro = require(\"apollo-server-micro\");\n\nvar _scema = _interopRequireDefault(require(\"../../scema.graphql\"));\n\nvar _photon = _interopRequireDefault(require(\"@generated/photon\"));\n\nconst resolvers = {\n  Query: {\n    users: (_, {}, {\n      photon\n    }) => photon.users.findMany()\n  }\n};\nconst apolloServer = new _apolloServerMicro.ApolloServer({\n  typeDefs: _scema.default,\n  resolvers,\n  context: () => {\n    const photon = new _photon.default();\n    photon.connect();\n    return {\n      photon\n    };\n  }\n});\nmodule.exports = apolloServer.createHandler({\n  path: \"/api/graphql\"\n});","map":{"version":3,"sources":["/Users/andreasmoller/code/reports/pages/api/graphql.ts"],"names":["resolvers","Query","users","_","photon","findMany","apolloServer","ApolloServer","typeDefs","context","Photon","connect","module","exports","createHandler","path"],"mappings":";;;;AAAA;;AACA;;AAEA;;AAMA,MAAMA,SAAoB,GAAG;AAC3BC,EAAAA,KAAK,EAAE;AACLC,IAAAA,KAAK,EAAE,CAACC,CAAD,EAAI,EAAJ,EAAS;AAAEC,MAAAA;AAAF,KAAT,KAAwBA,MAAM,CAACF,KAAP,CAAaG,QAAb;AAD1B;AADoB,CAA7B;AAMA,MAAMC,YAAY,GAAG,IAAIC,+BAAJ,CAAiB;AACpCC,EAAAA,QAAQ,EAARA,cADoC;AAEpCR,EAAAA,SAFoC;AAGpCS,EAAAA,OAAO,EAAE,MAAM;AACb,UAAML,MAAM,GAAG,IAAIM,eAAJ,EAAf;AACAN,IAAAA,MAAM,CAACO,OAAP;AACA,WAAO;AACLP,MAAAA;AADK,KAAP;AAGD;AATmC,CAAjB,CAArB;AAWAQ,MAAM,CAACC,OAAP,GAAiBP,YAAY,CAACQ,aAAb,CAA2B;AAAEC,EAAAA,IAAI,EAAE;AAAR,CAA3B,CAAjB","sourcesContent":["import { ApolloServer } from 'apollo-server-micro'\nimport typeDefs from \"../../scema.graphql\"\nimport { Resolvers } from \"@generated/graphql\"\nimport Photon from '@generated/photon'\n\nexport type Context = {\n  photon: Photon\n}\n\nconst resolvers: Resolvers = {\n  Query: {\n    users: (_, { }, { photon }) => photon.users.findMany()\n  },\n};\n\nconst apolloServer = new ApolloServer({\n  typeDefs,\n  resolvers,\n  context: () => {\n    const photon = new Photon()\n    photon.connect();\n    return {\n      photon\n    }\n  }\n});\nmodule.exports = apolloServer.createHandler({ path: \"/api/graphql\" });"]},"metadata":{},"sourceType":"script"}