{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nimport _styled from \"@emotion/styled-base\";\nvar _jsxFileName = \"/Users/andreasmoller/code/reports/client/Report/Report.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { jsx as ___EmotionJSX } from \"@emotion/core\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  from {\\n    opacity:0;\\n  }\\n  to {\\n    opacity:1;\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { useReportGetQuery, useReportUpdateMutation, ReportGetDocument } from \"../codegen/graphql\";\nimport { ErrorBox } from \"../components/ErrorBox\";\nimport { Crumbs, CrumbTitle, CrumbLink } from \"../components/Crumbs\";\nimport { Header, HeaderSection } from \"../components/Header\";\nimport { Icon } from \"../components/Icon\";\nimport { FlatButton, Button } from \"../components/Button\";\nimport { useState, useEffect } from \"react\";\nimport { css, keyframes } from \"@emotion/core\";\nimport { useMouseDrag } from \"../hooks/drag\";\nimport { colors } from \"../theme\";\nimport cuid from \"cuid\";\n\nvar removeTypename = function removeTypename(report) {\n  var __typename = report.__typename,\n      slides = report.slides,\n      reportData = _objectWithoutProperties(report, [\"__typename\", \"slides\"]);\n\n  return _objectSpread({}, reportData, {\n    slides: slides.map(function (_ref2) {\n      var __typename = _ref2.__typename,\n          charts = _ref2.charts,\n          slideData = _objectWithoutProperties(_ref2, [\"__typename\", \"charts\"]);\n\n      return _objectSpread({}, slideData, {\n        charts: charts.map(function (_ref3) {\n          var __typename = _ref3.__typename,\n              chartData = _objectWithoutProperties(_ref3, [\"__typename\"]);\n\n          return chartData;\n        })\n      });\n    })\n  });\n};\n\nvar getModifiers = function getModifiers(e) {\n  return [e.nativeEvent.metaKey && \"meta\", e.nativeEvent.ctrlKey && \"ctrl\", e.nativeEvent.altKey && \"alt\", e.nativeEvent.shiftKey && \"shift\"].filter(Boolean);\n};\n\nexport var ReportPage = function ReportPage(props) {\n  var _useState = useState(1),\n      scale = _useState[0],\n      setScale = _useState[1];\n\n  var _useState2 = useState(\"select\"),\n      tool = _useState2[0],\n      setTool = _useState2[1];\n\n  var _useState3 = useState([]),\n      selection = _useState3[0],\n      setSelection = _useState3[1];\n\n  var reportQuery = useReportGetQuery({\n    variables: {\n      id: props.id\n    },\n    onCompleted: function onCompleted(_ref4) {\n      var report = _ref4.report;\n      setScale(window.innerWidth * 0.8 / report.width);\n    }\n  });\n\n  var _useReportUpdateMutat = useReportUpdateMutation(),\n      _useReportUpdateMutat2 = _slicedToArray(_useReportUpdateMutat, 2),\n      _updateReport = _useReportUpdateMutat2[0],\n      updateReportQuery = _useReportUpdateMutat2[1];\n\n  var updateReport = function updateReport(report) {\n    reportQuery.client.writeQuery({\n      query: ReportGetDocument,\n      variables: {\n        id: report.id\n      },\n      data: {\n        report: report\n      }\n    });\n    return _updateReport({\n      variables: {\n        report: removeTypename(report)\n      }\n    });\n  };\n\n  var report = reportQuery.data && reportQuery.data.report;\n  useEffect(function () {\n    var handler = function handler() {\n      if (report) {\n        setScale(window.innerWidth * 0.8 / report.width);\n      }\n    };\n\n    window.addEventListener(\"resize\", handler);\n    return function () {\n      return window.removeEventListener(\"resize\", handler);\n    };\n  }, [report]);\n  var selectedSlide = report && (report.slides.find(function (s) {\n    return s.id === props.slide;\n  }) || report.slides[0]);\n\n  var getDragBox = function getDragBox(pos, origin) {\n    return {\n      x: Math.min(pos.x, origin.x) / scale,\n      y: Math.min(pos.y, origin.y) / scale,\n      width: Math.abs(pos.x - origin.x) / scale,\n      height: Math.abs(pos.y - origin.y) / scale\n    };\n  };\n\n  var _useMouseDrag = useMouseDrag({\n    onDragEnd: function onDragEnd(pos, origin) {\n      var box = getDragBox(pos, origin);\n\n      switch (tool) {\n        case \"insert_chart\":\n          {\n            var newChart = {\n              id: cuid(),\n              x: Math.round(box.x),\n              y: Math.round(box.y),\n              width: Math.round(box.width),\n              height: Math.round(box.height),\n              __typename: \"Chart\"\n            };\n\n            var newReport = _objectSpread({}, report, {\n              slides: report.slides.map(function (slide) {\n                if (slide.id === selectedSlide.id) {\n                  return _objectSpread({}, slide, {\n                    charts: [].concat(_toConsumableArray(slide.charts), [newChart])\n                  });\n                } else {\n                  return slide;\n                }\n              })\n            });\n\n            updateReport(newReport);\n            setTool(\"select\");\n            setSelection([newChart]);\n          }\n      }\n    }\n  }),\n      dragHandlers = _useMouseDrag.dragHandlers,\n      dragPos = _useMouseDrag.dragPos,\n      dragOrigin = _useMouseDrag.dragOrigin,\n      isDragging = _useMouseDrag.isDragging,\n      parentRef = _useMouseDrag.parentRef;\n\n  return ___EmotionJSX(Layout, {\n    tabIndex: -1,\n    onKeyDown: function onKeyDown(e) {\n      var modifiers = getModifiers(e);\n\n      switch (e.key) {\n        case \"Escape\":\n          setTool(\"select\");\n\n          if (tool === \"select\") {\n            setSelection([]);\n          }\n\n          return e.preventDefault();\n\n        case \"c\":\n          if (modifiers.length === 0) {\n            setTool(\"insert_chart\");\n            return e.preventDefault();\n          }\n\n        case \"i\":\n          if (modifiers.length === 0) {\n            setTool(\"insert_image\");\n            return e.preventDefault();\n          }\n\n        case \"t\":\n          if (modifiers.length === 0) {\n            setTool(\"insert_text\");\n            return e.preventDefault();\n          }\n\n        case \"Backspace\":\n          {\n            updateReport(_objectSpread({}, report, {\n              slides: report.slides.map(function (slide) {\n                return _objectSpread({}, slide, {\n                  charts: slide.charts.filter(function (chart) {\n                    return selection.some(function (selection) {\n                      return selection.id === chart.id;\n                    }) === false;\n                  })\n                });\n              })\n            }));\n          }\n      }\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143\n    },\n    __self: this\n  }, (reportQuery.loading || updateReportQuery.loading) && ___EmotionJSX(LoadingIndicator, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179\n    },\n    __self: this\n  }), ___EmotionJSX(Header, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180\n    },\n    __self: this\n  }, ___EmotionJSX(HeaderSection, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181\n    },\n    __self: this\n  }, ___EmotionJSX(Crumbs, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182\n    },\n    __self: this\n  }, ___EmotionJSX(CrumbLink, {\n    href: \"/\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183\n    },\n    __self: this\n  }, \"Home\"), ___EmotionJSX(CrumbLink, {\n    href: \"/\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184\n    },\n    __self: this\n  }, \"Reports\"), ___EmotionJSX(CrumbTitle, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185\n    },\n    __self: this\n  }, report ? report.title : \"...\")), ___EmotionJSX(NewElements, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187\n    },\n    __self: this\n  }, ___EmotionJSX(FlatButton, {\n    name: \"insert_chart\",\n    onClick: function onClick() {\n      return setTool(\"insert_chart\");\n    },\n    active: tool === \"insert_chart\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188\n    },\n    __self: this\n  }, ___EmotionJSX(Icon, {\n    icon: \"insert_chart\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189\n    },\n    __self: this\n  })), ___EmotionJSX(FlatButton, {\n    name: \"insert_image\",\n    onClick: function onClick() {\n      return setTool(\"insert_image\");\n    },\n    active: tool === \"insert_image\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191\n    },\n    __self: this\n  }, ___EmotionJSX(Icon, {\n    icon: \"insert_photo\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191\n    },\n    __self: this\n  })), ___EmotionJSX(FlatButton, {\n    name: \"insert_text\",\n    onClick: function onClick() {\n      return setTool(\"insert_text\");\n    },\n    active: tool === \"insert_text\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192\n    },\n    __self: this\n  }, ___EmotionJSX(Icon, {\n    icon: \"insert_text\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192\n    },\n    __self: this\n  }))))), ___EmotionJSX(\"div\", {\n    style: {\n      position: \"absolute\",\n      bottom: 16,\n      right: 16\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196\n    },\n    __self: this\n  }, scale), ___EmotionJSX(Stage, {\n    tool: tool,\n    scale: scale,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197\n    },\n    __self: this\n  }, selectedSlide && ___EmotionJSX(Slide, _extends({\n    ref: parentRef\n  }, dragHandlers, {\n    width: report.width,\n    height: report.height,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201\n    },\n    __self: this\n  }), [\"insert_chart\", \"insert_image\", \"insert_text\"].includes(tool) && isDragging && ___EmotionJSX(DragBox, _extends({}, getDragBox(dragPos, dragOrigin), {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203\n    },\n    __self: this\n  })), selectedSlide.charts.map(function (chart) {\n    return ___EmotionJSX(Chart, _extends({\n      key: chart.id,\n      selected: selection.some(function (s) {\n        return s.id === chart.id;\n      })\n    }, chart, {\n      onClick: function onClick(e) {\n        if (tool === \"select\") {\n          setSelection(e.nativeEvent.shiftKey ? [].concat(_toConsumableArray(selection), [chart]) : [chart]);\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208\n      },\n      __self: this\n    }));\n  })), report && !selectedSlide && ___EmotionJSX(Center, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218\n    },\n    __self: this\n  }, ___EmotionJSX(Button, {\n    name: \"create slide\",\n    onClick: function onClick() {\n      updateReport(_objectSpread({}, report, {\n        slides: [].concat(_toConsumableArray(report.slides), [{\n          id: cuid(),\n          charts: []\n        }])\n      }));\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219\n    },\n    __self: this\n  }, \"Create You first Slide\")), reportQuery.error && ___EmotionJSX(ErrorBox, {\n    error: reportQuery.error,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 232\n    },\n    __self: this\n  })));\n};\n\nvar Chart = _styled(\"div\", {\n  target: \"e1nne1bm0\",\n  label: \"Chart\"\n})(\"position:absolute;left:\", function (p) {\n  return p.x;\n}, \"px;top:\", function (p) {\n  return p.y;\n}, \"px;width:\", function (p) {\n  return p.width;\n}, \"px;height:\", function (p) {\n  return p.height;\n}, \"px;background:#f0f0f0;border:1px solid #dedede;\", function (p) {\n  return p.selected &&\n  /*#__PURE__*/\n\n  /*#__PURE__*/\n  css(\"border:1px dashed \", colors.primary, \";label:Chart;\" + (process.env.NODE_ENV === \"production\" ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"), \"label:Chart;\");\n}, \";\" + (process.env.NODE_ENV === \"production\" ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));\n\nvar Center = _styled(\"div\", {\n  target: \"e1nne1bm1\",\n  label: \"Center\"\n})(process.env.NODE_ENV === \"production\" ? {\n  name: \"ieltvz\",\n  styles: \"height:100%;display:grid;place-content:center center;\"\n} : {\n  name: \"ieltvz\",\n  styles: \"height:100%;display:grid;place-content:center center;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n});\n\nvar DragBox = _styled(\"div\", {\n  target: \"e1nne1bm2\",\n  label: \"DragBox\"\n})(\"position:absolute;width:\", function (p) {\n  return p.width;\n}, \"px;height:\", function (p) {\n  return p.height;\n}, \"px;left:\", function (p) {\n  return p.x;\n}, \"px;top:\", function (p) {\n  return p.y;\n}, \"px;border:2px dashed \", colors.primary, \";\" + (process.env.NODE_ENV === \"production\" ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9hbmRyZWFzbW9sbGVyL2NvZGUvcmVwb3J0cy9jbGllbnQvUmVwb3J0L1JlcG9ydC50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBd1F3QyIsImZpbGUiOiIvVXNlcnMvYW5kcmVhc21vbGxlci9jb2RlL3JlcG9ydHMvY2xpZW50L1JlcG9ydC9SZXBvcnQudHN4Iiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgeyB1c2VSZXBvcnRHZXRRdWVyeSwgdXNlUmVwb3J0VXBkYXRlTXV0YXRpb24sIENoYXJ0RnJhZ21lbnQsIFJlcG9ydFVwZGF0ZU11dGF0aW9uVmFyaWFibGVzLCBSZXBvcnRGcmFnbWVudCwgUmVwb3J0R2V0RG9jdW1lbnQgfSBmcm9tIFwiLi4vY29kZWdlbi9ncmFwaHFsXCI7XG5pbXBvcnQgc3R5bGVkIGZyb20gXCJAZW1vdGlvbi9zdHlsZWRcIjtcbmltcG9ydCB7IEVycm9yQm94IH0gZnJvbSBcIi4uL2NvbXBvbmVudHMvRXJyb3JCb3hcIjtcbmltcG9ydCB7IENydW1icywgQ3J1bWJUaXRsZSwgQ3J1bWJMaW5rIH0gZnJvbSBcIi4uL2NvbXBvbmVudHMvQ3J1bWJzXCI7XG5pbXBvcnQgeyBIZWFkZXIsIEhlYWRlclNlY3Rpb24gfSBmcm9tIFwiLi4vY29tcG9uZW50cy9IZWFkZXJcIjtcbmltcG9ydCB7IEljb24gfSBmcm9tIFwiLi4vY29tcG9uZW50cy9JY29uXCI7XG5pbXBvcnQgeyBGbGF0QnV0dG9uLCBCdXR0b24gfSBmcm9tIFwiLi4vY29tcG9uZW50cy9CdXR0b25cIjtcbmltcG9ydCB7IHVzZVN0YXRlLCBLZXlib2FyZEV2ZW50LCB1c2VFZmZlY3QgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IGNzcywga2V5ZnJhbWVzIH0gZnJvbSBcIkBlbW90aW9uL2NvcmVcIjtcbmltcG9ydCB7IHVzZU1vdXNlRHJhZywgUG9zIH0gZnJvbSBcIi4uL2hvb2tzL2RyYWdcIjtcbmltcG9ydCB7IGNvbG9ycyB9IGZyb20gXCIuLi90aGVtZVwiO1xuaW1wb3J0IGN1aWQgZnJvbSBcImN1aWRcIlxuXG50eXBlIFRvb2wgPVxuICB8IFwiaW5zZXJ0X2NoYXJ0XCJcbiAgfCBcImluc2VydF9pbWFnZVwiXG4gIHwgXCJpbnNlcnRfdGV4dFwiXG4gIHwgXCJzZWxlY3RcIlxuXG5cbnR5cGUgU2VsZWN0aW9uID0gQ2hhcnRGcmFnbWVudFxuXG5cbmNvbnN0IHJlbW92ZVR5cGVuYW1lID0gKHJlcG9ydDogUmVwb3J0RnJhZ21lbnQpOiBSZXBvcnRVcGRhdGVNdXRhdGlvblZhcmlhYmxlc1tcInJlcG9ydFwiXSA9PiB7XG4gIGNvbnN0IHsgX190eXBlbmFtZSwgc2xpZGVzLCAuLi5yZXBvcnREYXRhIH0gPSByZXBvcnQ7XG4gIHJldHVybiB7XG4gICAgLi4ucmVwb3J0RGF0YSxcbiAgICBzbGlkZXM6IHNsaWRlcy5tYXAoKHsgX190eXBlbmFtZSwgY2hhcnRzLCAuLi5zbGlkZURhdGEgfSkgPT4ge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4uc2xpZGVEYXRhLFxuICAgICAgICBjaGFydHM6IGNoYXJ0cy5tYXAoKHsgX190eXBlbmFtZSwgLi4uY2hhcnREYXRhIH0pID0+IHtcbiAgICAgICAgICByZXR1cm4gY2hhcnREYXRhXG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgfSlcbiAgfVxufVxuXG5jb25zdCBnZXRNb2RpZmllcnMgPSAoZTogS2V5Ym9hcmRFdmVudCkgPT5cbiAgW1xuICAgIGUubmF0aXZlRXZlbnQubWV0YUtleSAmJiBcIm1ldGFcIixcbiAgICBlLm5hdGl2ZUV2ZW50LmN0cmxLZXkgJiYgXCJjdHJsXCIsXG4gICAgZS5uYXRpdmVFdmVudC5hbHRLZXkgJiYgXCJhbHRcIixcbiAgICBlLm5hdGl2ZUV2ZW50LnNoaWZ0S2V5ICYmIFwic2hpZnRcIixcbiAgXS5maWx0ZXIoQm9vbGVhbilcblxuZXhwb3J0IGNvbnN0IFJlcG9ydFBhZ2UgPSAocHJvcHM6IHsgaWQ6IHN0cmluZywgc2xpZGU/OiBzdHJpbmcgfSkgPT4ge1xuICBjb25zdCBbc2NhbGUsIHNldFNjYWxlXSA9IHVzZVN0YXRlKDEpXG5cblxuICBjb25zdCBbdG9vbCwgc2V0VG9vbF0gPSB1c2VTdGF0ZTxUb29sPihcInNlbGVjdFwiKVxuICBjb25zdCBbc2VsZWN0aW9uLCBzZXRTZWxlY3Rpb25dID0gdXNlU3RhdGU8U2VsZWN0aW9uW10+KFtdKVxuICBjb25zdCByZXBvcnRRdWVyeSA9IHVzZVJlcG9ydEdldFF1ZXJ5KHtcbiAgICB2YXJpYWJsZXM6IHtcbiAgICAgIGlkOiBwcm9wcy5pZFxuICAgIH0sXG4gICAgb25Db21wbGV0ZWQ6ICh7IHJlcG9ydCB9KSA9PiB7XG4gICAgICBzZXRTY2FsZSh3aW5kb3cuaW5uZXJXaWR0aCAqIDAuOCAvIHJlcG9ydC53aWR0aClcbiAgICB9XG4gIH0pXG5cbiAgY29uc3QgW191cGRhdGVSZXBvcnQsIHVwZGF0ZVJlcG9ydFF1ZXJ5XSA9IHVzZVJlcG9ydFVwZGF0ZU11dGF0aW9uKClcblxuICBjb25zdCB1cGRhdGVSZXBvcnQgPSAocmVwb3J0OiBSZXBvcnRVcGRhdGVNdXRhdGlvblZhcmlhYmxlc1tcInJlcG9ydFwiXSkgPT4ge1xuICAgIHJlcG9ydFF1ZXJ5LmNsaWVudC53cml0ZVF1ZXJ5KHtcbiAgICAgIHF1ZXJ5OiBSZXBvcnRHZXREb2N1bWVudCxcbiAgICAgIHZhcmlhYmxlczogeyBpZDogcmVwb3J0LmlkIH0sXG4gICAgICBkYXRhOiB7XG4gICAgICAgIHJlcG9ydFxuICAgICAgfVxuICAgIH0pXG4gICAgcmV0dXJuIF91cGRhdGVSZXBvcnQoe1xuICAgICAgdmFyaWFibGVzOiB7XG4gICAgICAgIHJlcG9ydDogcmVtb3ZlVHlwZW5hbWUocmVwb3J0IGFzIFJlcG9ydEZyYWdtZW50KVxuICAgICAgfVxuICAgIH0pXG5cbiAgfVxuXG4gIGNvbnN0IHJlcG9ydCA9IHJlcG9ydFF1ZXJ5LmRhdGEgJiYgcmVwb3J0UXVlcnkuZGF0YS5yZXBvcnRcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGNvbnN0IGhhbmRsZXIgPSAoKSA9PiB7XG4gICAgICBpZiAocmVwb3J0KSB7XG5cbiAgICAgICAgc2V0U2NhbGUod2luZG93LmlubmVyV2lkdGggKiAwLjggLyByZXBvcnQud2lkdGgpXG4gICAgICB9XG4gICAgfVxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwicmVzaXplXCIsIGhhbmRsZXIpO1xuICAgIHJldHVybiAoKSA9PiB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLCBoYW5kbGVyKVxuICB9LCBbcmVwb3J0XSlcblxuICBjb25zdCBzZWxlY3RlZFNsaWRlID0gcmVwb3J0ICYmIChyZXBvcnQuc2xpZGVzLmZpbmQocyA9PiBzLmlkID09PSBwcm9wcy5zbGlkZSkgfHwgcmVwb3J0LnNsaWRlc1swXSk7XG5cbiAgY29uc3QgZ2V0RHJhZ0JveCA9IChwb3M6IFBvcywgb3JpZ2luOiBQb3MpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgeDogTWF0aC5taW4ocG9zLngsIG9yaWdpbi54KSAvIHNjYWxlLFxuICAgICAgeTogTWF0aC5taW4ocG9zLnksIG9yaWdpbi55KSAvIHNjYWxlLFxuICAgICAgd2lkdGg6IE1hdGguYWJzKHBvcy54IC0gb3JpZ2luLngpIC8gc2NhbGUsXG4gICAgICBoZWlnaHQ6IE1hdGguYWJzKHBvcy55IC0gb3JpZ2luLnkpIC8gc2NhbGUsXG4gICAgfVxuICB9XG5cbiAgY29uc3QgeyBkcmFnSGFuZGxlcnMsIGRyYWdQb3MsIGRyYWdPcmlnaW4sIGlzRHJhZ2dpbmcsIHBhcmVudFJlZiB9ID0gdXNlTW91c2VEcmFnKHtcbiAgICBvbkRyYWdFbmQ6IChwb3MsIG9yaWdpbikgPT4ge1xuICAgICAgY29uc3QgYm94ID0gZ2V0RHJhZ0JveChwb3MsIG9yaWdpbik7XG4gICAgICBzd2l0Y2ggKHRvb2wpIHtcbiAgICAgICAgY2FzZSBcImluc2VydF9jaGFydFwiOiB7XG5cbiAgICAgICAgICBjb25zdCBuZXdDaGFydCA9IHtcbiAgICAgICAgICAgIGlkOiBjdWlkKCksXG4gICAgICAgICAgICB4OiBNYXRoLnJvdW5kKGJveC54KSxcbiAgICAgICAgICAgIHk6IE1hdGgucm91bmQoYm94LnkpLFxuICAgICAgICAgICAgd2lkdGg6IE1hdGgucm91bmQoYm94LndpZHRoKSxcbiAgICAgICAgICAgIGhlaWdodDogTWF0aC5yb3VuZChib3guaGVpZ2h0KSxcbiAgICAgICAgICAgIF9fdHlwZW5hbWU6IFwiQ2hhcnRcIiBhcyBcIkNoYXJ0XCJcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb25zdCBuZXdSZXBvcnQgPSB7XG4gICAgICAgICAgICAuLi5yZXBvcnQsXG4gICAgICAgICAgICBzbGlkZXM6IHJlcG9ydC5zbGlkZXMubWFwKHNsaWRlID0+IHtcbiAgICAgICAgICAgICAgaWYgKHNsaWRlLmlkID09PSBzZWxlY3RlZFNsaWRlLmlkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgIC4uLnNsaWRlLFxuICAgICAgICAgICAgICAgICAgY2hhcnRzOiBbLi4uc2xpZGUuY2hhcnRzLCBuZXdDaGFydF1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNsaWRlXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfVxuICAgICAgICAgIHVwZGF0ZVJlcG9ydChuZXdSZXBvcnQpXG4gICAgICAgICAgc2V0VG9vbChcInNlbGVjdFwiKTtcbiAgICAgICAgICBzZXRTZWxlY3Rpb24oW25ld0NoYXJ0XSlcbiAgICAgICAgfVxuXG4gICAgICB9XG4gICAgfVxuICB9KVxuXG4gIHJldHVybiAoXG4gICAgPExheW91dCB0YWJJbmRleD17LTF9IG9uS2V5RG93bj17ZSA9PiB7XG4gICAgICBjb25zdCBtb2RpZmllcnMgPSBnZXRNb2RpZmllcnMoZSk7XG4gICAgICBzd2l0Y2ggKGUua2V5KSB7XG4gICAgICAgIGNhc2UgXCJFc2NhcGVcIjpcbiAgICAgICAgICBzZXRUb29sKFwic2VsZWN0XCIpXG4gICAgICAgICAgaWYgKHRvb2wgPT09IFwic2VsZWN0XCIpIHtcbiAgICAgICAgICAgIHNldFNlbGVjdGlvbihbXSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGNhc2UgXCJjXCI6XG4gICAgICAgICAgaWYgKG1vZGlmaWVycy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHNldFRvb2woXCJpbnNlcnRfY2hhcnRcIilcbiAgICAgICAgICAgIHJldHVybiBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgfVxuICAgICAgICBjYXNlIFwiaVwiOlxuICAgICAgICAgIGlmIChtb2RpZmllcnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBzZXRUb29sKFwiaW5zZXJ0X2ltYWdlXCIpXG4gICAgICAgICAgICByZXR1cm4gZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgY2FzZSBcInRcIjpcbiAgICAgICAgICBpZiAobW9kaWZpZXJzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgc2V0VG9vbChcImluc2VydF90ZXh0XCIpXG4gICAgICAgICAgICByZXR1cm4gZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgY2FzZSBcIkJhY2tzcGFjZVwiOiB7XG4gICAgICAgICAgdXBkYXRlUmVwb3J0KHtcbiAgICAgICAgICAgIC4uLnJlcG9ydCxcbiAgICAgICAgICAgIHNsaWRlczogcmVwb3J0LnNsaWRlcy5tYXAoc2xpZGUgPT4gKHtcbiAgICAgICAgICAgICAgLi4uc2xpZGUsXG4gICAgICAgICAgICAgIGNoYXJ0czogc2xpZGUuY2hhcnRzLmZpbHRlcihjaGFydCA9PiBzZWxlY3Rpb24uc29tZShzZWxlY3Rpb24gPT4gc2VsZWN0aW9uLmlkID09PSBjaGFydC5pZCkgPT09IGZhbHNlKVxuICAgICAgICAgICAgfSkpXG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuXG4gICAgICB9XG4gICAgfX0+XG4gICAgICB7KHJlcG9ydFF1ZXJ5LmxvYWRpbmcgfHwgdXBkYXRlUmVwb3J0UXVlcnkubG9hZGluZykgJiYgPExvYWRpbmdJbmRpY2F0b3IgLz59XG4gICAgICA8SGVhZGVyPlxuICAgICAgICA8SGVhZGVyU2VjdGlvbj5cbiAgICAgICAgICA8Q3J1bWJzPlxuICAgICAgICAgICAgPENydW1iTGluayBocmVmPVwiL1wiPkhvbWU8L0NydW1iTGluaz5cbiAgICAgICAgICAgIDxDcnVtYkxpbmsgaHJlZj1cIi9cIj5SZXBvcnRzPC9DcnVtYkxpbms+XG4gICAgICAgICAgICA8Q3J1bWJUaXRsZT57cmVwb3J0ID8gcmVwb3J0LnRpdGxlIDogXCIuLi5cIn08L0NydW1iVGl0bGU+XG4gICAgICAgICAgPC9DcnVtYnMgPlxuICAgICAgICAgIDxOZXdFbGVtZW50cz5cbiAgICAgICAgICAgIDxGbGF0QnV0dG9uIG5hbWU9XCJpbnNlcnRfY2hhcnRcIiBvbkNsaWNrPXsoKSA9PiBzZXRUb29sKFwiaW5zZXJ0X2NoYXJ0XCIpfSBhY3RpdmU9e3Rvb2wgPT09IFwiaW5zZXJ0X2NoYXJ0XCJ9PlxuICAgICAgICAgICAgICA8SWNvbiBpY29uPVwiaW5zZXJ0X2NoYXJ0XCIgLz5cbiAgICAgICAgICAgIDwvRmxhdEJ1dHRvbj5cbiAgICAgICAgICAgIDxGbGF0QnV0dG9uIG5hbWU9XCJpbnNlcnRfaW1hZ2VcIiBvbkNsaWNrPXsoKSA9PiBzZXRUb29sKFwiaW5zZXJ0X2ltYWdlXCIpfSBhY3RpdmU9e3Rvb2wgPT09IFwiaW5zZXJ0X2ltYWdlXCJ9PjxJY29uIGljb249XCJpbnNlcnRfcGhvdG9cIiAvPjwvRmxhdEJ1dHRvbj5cbiAgICAgICAgICAgIDxGbGF0QnV0dG9uIG5hbWU9XCJpbnNlcnRfdGV4dFwiIG9uQ2xpY2s9eygpID0+IHNldFRvb2woXCJpbnNlcnRfdGV4dFwiKX0gYWN0aXZlPXt0b29sID09PSBcImluc2VydF90ZXh0XCJ9PjxJY29uIGljb249XCJpbnNlcnRfdGV4dFwiIC8+PC9GbGF0QnV0dG9uPlxuICAgICAgICAgIDwvTmV3RWxlbWVudHM+XG4gICAgICAgIDwvSGVhZGVyU2VjdGlvbj5cbiAgICAgIDwvSGVhZGVyID5cbiAgICAgIDxkaXYgc3R5bGU9e3sgcG9zaXRpb246IFwiYWJzb2x1dGVcIiwgYm90dG9tOiAxNiwgcmlnaHQ6IDE2IH19PntzY2FsZX08L2Rpdj5cbiAgICAgIDxTdGFnZSB0b29sPXt0b29sfSBzY2FsZT17c2NhbGV9PlxuXG4gICAgICAgIHtcbiAgICAgICAgICBzZWxlY3RlZFNsaWRlICYmXG4gICAgICAgICAgPFNsaWRlIHJlZj17cGFyZW50UmVmfSB7Li4uZHJhZ0hhbmRsZXJzfSB3aWR0aD17cmVwb3J0LndpZHRofSBoZWlnaHQ9e3JlcG9ydC5oZWlnaHR9PlxuICAgICAgICAgICAge1tcImluc2VydF9jaGFydFwiLCBcImluc2VydF9pbWFnZVwiLCBcImluc2VydF90ZXh0XCJdLmluY2x1ZGVzKHRvb2wpICYmIGlzRHJhZ2dpbmcgJiZcbiAgICAgICAgICAgICAgPERyYWdCb3ggey4uLmdldERyYWdCb3goZHJhZ1BvcywgZHJhZ09yaWdpbil9IC8+XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB7c2VsZWN0ZWRTbGlkZS5jaGFydHMubWFwKGNoYXJ0ID0+IHtcbiAgICAgICAgICAgICAgcmV0dXJuIChcblxuICAgICAgICAgICAgICAgIDxDaGFydCBrZXk9e2NoYXJ0LmlkfSBzZWxlY3RlZD17c2VsZWN0aW9uLnNvbWUocyA9PiBzLmlkID09PSBjaGFydC5pZCl9IHsuLi5jaGFydH0gb25DbGljaz17ZSA9PiB7XG4gICAgICAgICAgICAgICAgICBpZiAodG9vbCA9PT0gXCJzZWxlY3RcIikge1xuICAgICAgICAgICAgICAgICAgICBzZXRTZWxlY3Rpb24oZS5uYXRpdmVFdmVudC5zaGlmdEtleSA/IFsuLi5zZWxlY3Rpb24sIGNoYXJ0XSA6IFtjaGFydF0pO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH19IC8+XG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgIH0pfVxuICAgICAgICAgIDwvU2xpZGU+XG4gICAgICAgIH1cbiAgICAgICAge3JlcG9ydCAmJiAhc2VsZWN0ZWRTbGlkZSAmJlxuICAgICAgICAgIDxDZW50ZXI+XG4gICAgICAgICAgICA8QnV0dG9uIG5hbWU9XCJjcmVhdGUgc2xpZGVcIiBvbkNsaWNrPXsoKSA9PiB7XG4gICAgICAgICAgICAgIHVwZGF0ZVJlcG9ydCh7XG4gICAgICAgICAgICAgICAgLi4ucmVwb3J0LFxuICAgICAgICAgICAgICAgIHNsaWRlczogW1xuICAgICAgICAgICAgICAgICAgLi4ucmVwb3J0LnNsaWRlcyxcbiAgICAgICAgICAgICAgICAgIHsgaWQ6IGN1aWQoKSwgY2hhcnRzOiBbXSB9XG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfX0+XG4gICAgICAgICAgICAgIENyZWF0ZSBZb3UgZmlyc3QgU2xpZGVcbiAgICAgICAgICAgIDwvQnV0dG9uPlxuICAgICAgICAgIDwvQ2VudGVyPlxuICAgICAgICB9XG4gICAgICAgIHtyZXBvcnRRdWVyeS5lcnJvciAmJiA8RXJyb3JCb3ggZXJyb3I9e3JlcG9ydFF1ZXJ5LmVycm9yfSAvPn1cbiAgICAgIDwvU3RhZ2U+XG5cbiAgICA8L0xheW91dCA+XG4gIClcbn1cblxuY29uc3QgQ2hhcnQgPSBzdHlsZWQuZGl2PENoYXJ0RnJhZ21lbnQgJiB7IHNlbGVjdGVkOiBib29sZWFuIH0+YFxuICBwb3NpdGlvbjphYnNvbHV0ZTtcbiAgbGVmdDogJHtwID0+IHAueH1weDtcbiAgdG9wOiAke3AgPT4gcC55fXB4O1xuICB3aWR0aDogJHtwID0+IHAud2lkdGh9cHg7XG4gIGhlaWdodDogJHtwID0+IHAuaGVpZ2h0fXB4O1xuICBiYWNrZ3JvdW5kOiAjZjBmMGYwO1xuICBib3JkZXI6IDFweCBzb2xpZCAjZGVkZWRlO1xuICAke3AgPT4gcC5zZWxlY3RlZCAmJiBjc3NgYm9yZGVyOiAxcHggZGFzaGVkICR7Y29sb3JzLnByaW1hcnl9O2B9O1xuYFxuXG5cbmNvbnN0IENlbnRlciA9IHN0eWxlZC5kaXZgXG4gIGhlaWdodDoxMDAlO1xuICBkaXNwbGF5OmdyaWQ7XG4gIHBsYWNlLWNvbnRlbnQ6Y2VudGVyIGNlbnRlcjtcbiAgYFxuXG5cbnR5cGUgRHJhZ0JveFByb3BzID0ge1xuICB4OiBudW1iZXI7XG4gIHk6IG51bWJlcjtcbiAgd2lkdGg6IG51bWJlcjtcbiAgaGVpZ2h0OiBudW1iZXI7XG59XG5cbmNvbnN0IERyYWdCb3ggPSBzdHlsZWQuZGl2PERyYWdCb3hQcm9wcz5gXG4gIHBvc2l0aW9uOmFic29sdXRlO1xuICB3aWR0aDoke3AgPT4gcC53aWR0aH1weDtcbiAgaGVpZ2h0OiR7cCA9PiBwLmhlaWdodH1weDtcbiAgbGVmdDoke3AgPT4gcC54fXB4O1xuICB0b3A6JHtwID0+IHAueX1weDtcbiAgYm9yZGVyOiAycHggZGFzaGVkICR7Y29sb3JzLnByaW1hcnl9O1xuYFxuXG5jb25zdCBTbGlkZSA9IHN0eWxlZC5zZWN0aW9uPHsgd2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIgfT5gXG4gIHBvc2l0aW9uOnJlbGF0aXZlO1xuICBiYWNrZ3JvdW5kOndoaXRlO1xuICBib3gtc2hhZG93OiAwIDFweCA0cHggcmdiYSgwLCAwLCAwLCAwLjQpO1xuICB3aWR0aDogJHtwID0+IHAud2lkdGh9cHg7XG4gIGhlaWdodDoke3AgPT4gcC5oZWlnaHR9cHg7XG5gXG5cbmNvbnN0IE5ld0VsZW1lbnRzID0gc3R5bGVkLmRpdmBcbiAgZGlzcGxheTpncmlkO1xuICBncmlkLWF1dG8tZmxvdzogY29sdW1uO1xuICBncmlkLWdhcDogNHB4O1xuICBwbGFjZS1jb250ZW50OiBjZW50ZXIgc3RhcnQ7XG5gXG5cblxuY29uc3QgTGF5b3V0ID0gc3R5bGVkLmRpdmBcbiAgZGlzcGxheTpncmlkO1xuICBoZWlnaHQ6MTAwJTtcbiAgZ3JpZC1nYXA6IDMycHg7XG4gIGJhY2tncm91bmQ6I2Y1ZjVmNTtcbiAgZ3JpZC10ZW1wbGF0ZS1yb3dzOiBhdXRvIDFmcjtcbiAgcGxhY2UtY29udGVudDogc3RhcnQgc3RyZXRjaDtcbiAgb3ZlcmZsb3c6aGlkZGVuO1xuYFxuXG5jb25zdCBTdGFnZSA9IHN0eWxlZC5tYWluPHsgdG9vbDogVG9vbCwgc2NhbGU6IG51bWJlciB9PmBcbiAgZGlzcGxheTpncmlkO1xuICB3aWR0aDoxMDAlO1xuICBwbGFjZS1jb250ZW50OmNlbnRlciBjZW50ZXI7XG4gIG92ZXJmbG93OmhpZGRlbjtcbiAgJHtwID0+IHtcbiAgICBzd2l0Y2ggKHAudG9vbCkge1xuICAgICAgY2FzZSBcImluc2VydF9jaGFydFwiOlxuICAgICAgY2FzZSBcImluc2VydF9pbWFnZVwiOlxuICAgICAgY2FzZSBcImluc2VydF90ZXh0XCI6XG4gICAgICAgIHJldHVybiBjc3NgXG4gICAgICAgIGN1cnNvcjogY3Jvc3NoYWlyO1xuICAgICAgICBgXG4gICAgfVxuICB9fVxuICAmID4gKiB7XG4gICAgdHJhbnNmb3JtOiBzY2FsZSgke3AgPT4gcC5zY2FsZX0pO1xuICAgIHRyYW5zZm9ybS1vcmlnaW46IDUwJSA1MCU7XG4gIH1cbmBcblxuXG5jb25zdCBMb2FkaW5nSW5kaWNhdG9yID0gKCkgPT5cbiAgPExvYWRpbmdXcmFwcGVyPlxuICAgIDxMb2FkaW5nRG90IGRlbGF5PXswfT4uPC9Mb2FkaW5nRG90PlxuICAgIDxMb2FkaW5nRG90IGRlbGF5PXsyMDB9Pi48L0xvYWRpbmdEb3Q+XG4gICAgPExvYWRpbmdEb3QgZGVsYXk9ezQwMH0+LjwvTG9hZGluZ0RvdD5cbiAgPC9Mb2FkaW5nV3JhcHBlcj5cblxuY29uc3QganVtcEFuaW1hdGlvbiA9IGtleWZyYW1lc2BcbiAgZnJvbSB7XG4gICAgb3BhY2l0eTowO1xuICB9XG4gIHRvIHtcbiAgICBvcGFjaXR5OjE7XG4gIH1cbmBcblxuXG5jb25zdCBMb2FkaW5nV3JhcHBlciA9IHN0eWxlZC5kaXZgXG5wb3NpdGlvbjphYnNvbHV0ZTtcbiAgdG9wOiAwcHg7XG4gIHJpZ2h0OiAzMnB4O1xuICBmb250LXNpemU6IDIuNXJlbTtcbmBcbmNvbnN0IExvYWRpbmdEb3QgPSBzdHlsZWQuc3Bhbjx7IGRlbGF5OiBudW1iZXIgfT5gXG4gIGFuaW1hdGlvbjoke2p1bXBBbmltYXRpb259IDFzIGVhc2UgaW5maW5pdGU7XG4gIGFuaW1hdGlvbi1kZWxheToke3AgPT4gcC5kZWxheX1tcztcbmAiXX0= */\"));\n\nvar Slide = _styled(\"section\", {\n  target: \"e1nne1bm3\",\n  label: \"Slide\"\n})(\"position:relative;background:white;box-shadow:0 1px 4px rgba(0,0,0,0.4);width:\", function (p) {\n  return p.width;\n}, \"px;height:\", function (p) {\n  return p.height;\n}, \"px;\" + (process.env.NODE_ENV === \"production\" ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));\n\nvar NewElements = _styled(\"div\", {\n  target: \"e1nne1bm4\",\n  label: \"NewElements\"\n})(process.env.NODE_ENV === \"production\" ? {\n  name: \"ecvamz\",\n  styles: \"display:grid;grid-auto-flow:column;grid-gap:4px;place-content:center start;\"\n} : {\n  name: \"ecvamz\",\n  styles: \"display:grid;grid-auto-flow:column;grid-gap:4px;place-content:center start;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n});\n\nvar Layout = _styled(\"div\", {\n  target: \"e1nne1bm5\",\n  label: \"Layout\"\n})(process.env.NODE_ENV === \"production\" ? {\n  name: \"1dsk5u3\",\n  styles: \"display:grid;height:100%;grid-gap:32px;background:#f5f5f5;grid-template-rows:auto 1fr;place-content:start stretch;overflow:hidden;\"\n} : {\n  name: \"1dsk5u3\",\n  styles: \"display:grid;height:100%;grid-gap:32px;background:#f5f5f5;grid-template-rows:auto 1fr;place-content:start stretch;overflow:hidden;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n});\n\nvar _ref = process.env.NODE_ENV === \"production\" ? {\n  name: \"gcwr8i-Stage\",\n  styles: \"cursor:crosshair;label:Stage;\"\n} : {\n  name: \"gcwr8i-Stage\",\n  styles: \"cursor:crosshair;label:Stage;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n};\n\nvar Stage = _styled(\"main\", {\n  target: \"e1nne1bm6\",\n  label: \"Stage\"\n})(\"display:grid;width:100%;place-content:center center;overflow:hidden;\", function (p) {\n  switch (p.tool) {\n    case \"insert_chart\":\n    case \"insert_image\":\n    case \"insert_text\":\n      return (\n        /*#__PURE__*/\n        _ref\n      );\n  }\n}, \" & > *{transform:scale(\", function (p) {\n  return p.scale;\n}, \");transform-origin:50% 50%;}\" + (process.env.NODE_ENV === \"production\" ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));\n\nvar LoadingIndicator = function LoadingIndicator() {\n  return ___EmotionJSX(LoadingWrapper, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 323\n    },\n    __self: this\n  }, ___EmotionJSX(LoadingDot, {\n    delay: 0,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 324\n    },\n    __self: this\n  }, \".\"), ___EmotionJSX(LoadingDot, {\n    delay: 200,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 325\n    },\n    __self: this\n  }, \".\"), ___EmotionJSX(LoadingDot, {\n    delay: 400,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 326\n    },\n    __self: this\n  }, \".\"));\n};\n\nvar jumpAnimation = keyframes(_templateObject());\n\nvar LoadingWrapper = _styled(\"div\", {\n  target: \"e1nne1bm7\",\n  label: \"LoadingWrapper\"\n})(process.env.NODE_ENV === \"production\" ? {\n  name: \"qabk88\",\n  styles: \"position:absolute;top:0px;right:32px;font-size:2.5rem;\"\n} : {\n  name: \"qabk88\",\n  styles: \"position:absolute;top:0px;right:32px;font-size:2.5rem;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n});\n\nvar LoadingDot = _styled(\"span\", {\n  target: \"e1nne1bm8\",\n  label: \"LoadingDot\"\n})(\"animation:\", jumpAnimation, \" 1s ease infinite;animation-delay:\", function (p) {\n  return p.delay;\n}, \"ms;\" + (process.env.NODE_ENV === \"production\" ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9hbmRyZWFzbW9sbGVyL2NvZGUvcmVwb3J0cy9jbGllbnQvUmVwb3J0L1JlcG9ydC50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBd1ZpRCIsImZpbGUiOiIvVXNlcnMvYW5kcmVhc21vbGxlci9jb2RlL3JlcG9ydHMvY2xpZW50L1JlcG9ydC9SZXBvcnQudHN4Iiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgeyB1c2VSZXBvcnRHZXRRdWVyeSwgdXNlUmVwb3J0VXBkYXRlTXV0YXRpb24sIENoYXJ0RnJhZ21lbnQsIFJlcG9ydFVwZGF0ZU11dGF0aW9uVmFyaWFibGVzLCBSZXBvcnRGcmFnbWVudCwgUmVwb3J0R2V0RG9jdW1lbnQgfSBmcm9tIFwiLi4vY29kZWdlbi9ncmFwaHFsXCI7XG5pbXBvcnQgc3R5bGVkIGZyb20gXCJAZW1vdGlvbi9zdHlsZWRcIjtcbmltcG9ydCB7IEVycm9yQm94IH0gZnJvbSBcIi4uL2NvbXBvbmVudHMvRXJyb3JCb3hcIjtcbmltcG9ydCB7IENydW1icywgQ3J1bWJUaXRsZSwgQ3J1bWJMaW5rIH0gZnJvbSBcIi4uL2NvbXBvbmVudHMvQ3J1bWJzXCI7XG5pbXBvcnQgeyBIZWFkZXIsIEhlYWRlclNlY3Rpb24gfSBmcm9tIFwiLi4vY29tcG9uZW50cy9IZWFkZXJcIjtcbmltcG9ydCB7IEljb24gfSBmcm9tIFwiLi4vY29tcG9uZW50cy9JY29uXCI7XG5pbXBvcnQgeyBGbGF0QnV0dG9uLCBCdXR0b24gfSBmcm9tIFwiLi4vY29tcG9uZW50cy9CdXR0b25cIjtcbmltcG9ydCB7IHVzZVN0YXRlLCBLZXlib2FyZEV2ZW50LCB1c2VFZmZlY3QgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IGNzcywga2V5ZnJhbWVzIH0gZnJvbSBcIkBlbW90aW9uL2NvcmVcIjtcbmltcG9ydCB7IHVzZU1vdXNlRHJhZywgUG9zIH0gZnJvbSBcIi4uL2hvb2tzL2RyYWdcIjtcbmltcG9ydCB7IGNvbG9ycyB9IGZyb20gXCIuLi90aGVtZVwiO1xuaW1wb3J0IGN1aWQgZnJvbSBcImN1aWRcIlxuXG50eXBlIFRvb2wgPVxuICB8IFwiaW5zZXJ0X2NoYXJ0XCJcbiAgfCBcImluc2VydF9pbWFnZVwiXG4gIHwgXCJpbnNlcnRfdGV4dFwiXG4gIHwgXCJzZWxlY3RcIlxuXG5cbnR5cGUgU2VsZWN0aW9uID0gQ2hhcnRGcmFnbWVudFxuXG5cbmNvbnN0IHJlbW92ZVR5cGVuYW1lID0gKHJlcG9ydDogUmVwb3J0RnJhZ21lbnQpOiBSZXBvcnRVcGRhdGVNdXRhdGlvblZhcmlhYmxlc1tcInJlcG9ydFwiXSA9PiB7XG4gIGNvbnN0IHsgX190eXBlbmFtZSwgc2xpZGVzLCAuLi5yZXBvcnREYXRhIH0gPSByZXBvcnQ7XG4gIHJldHVybiB7XG4gICAgLi4ucmVwb3J0RGF0YSxcbiAgICBzbGlkZXM6IHNsaWRlcy5tYXAoKHsgX190eXBlbmFtZSwgY2hhcnRzLCAuLi5zbGlkZURhdGEgfSkgPT4ge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4uc2xpZGVEYXRhLFxuICAgICAgICBjaGFydHM6IGNoYXJ0cy5tYXAoKHsgX190eXBlbmFtZSwgLi4uY2hhcnREYXRhIH0pID0+IHtcbiAgICAgICAgICByZXR1cm4gY2hhcnREYXRhXG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgfSlcbiAgfVxufVxuXG5jb25zdCBnZXRNb2RpZmllcnMgPSAoZTogS2V5Ym9hcmRFdmVudCkgPT5cbiAgW1xuICAgIGUubmF0aXZlRXZlbnQubWV0YUtleSAmJiBcIm1ldGFcIixcbiAgICBlLm5hdGl2ZUV2ZW50LmN0cmxLZXkgJiYgXCJjdHJsXCIsXG4gICAgZS5uYXRpdmVFdmVudC5hbHRLZXkgJiYgXCJhbHRcIixcbiAgICBlLm5hdGl2ZUV2ZW50LnNoaWZ0S2V5ICYmIFwic2hpZnRcIixcbiAgXS5maWx0ZXIoQm9vbGVhbilcblxuZXhwb3J0IGNvbnN0IFJlcG9ydFBhZ2UgPSAocHJvcHM6IHsgaWQ6IHN0cmluZywgc2xpZGU/OiBzdHJpbmcgfSkgPT4ge1xuICBjb25zdCBbc2NhbGUsIHNldFNjYWxlXSA9IHVzZVN0YXRlKDEpXG5cblxuICBjb25zdCBbdG9vbCwgc2V0VG9vbF0gPSB1c2VTdGF0ZTxUb29sPihcInNlbGVjdFwiKVxuICBjb25zdCBbc2VsZWN0aW9uLCBzZXRTZWxlY3Rpb25dID0gdXNlU3RhdGU8U2VsZWN0aW9uW10+KFtdKVxuICBjb25zdCByZXBvcnRRdWVyeSA9IHVzZVJlcG9ydEdldFF1ZXJ5KHtcbiAgICB2YXJpYWJsZXM6IHtcbiAgICAgIGlkOiBwcm9wcy5pZFxuICAgIH0sXG4gICAgb25Db21wbGV0ZWQ6ICh7IHJlcG9ydCB9KSA9PiB7XG4gICAgICBzZXRTY2FsZSh3aW5kb3cuaW5uZXJXaWR0aCAqIDAuOCAvIHJlcG9ydC53aWR0aClcbiAgICB9XG4gIH0pXG5cbiAgY29uc3QgW191cGRhdGVSZXBvcnQsIHVwZGF0ZVJlcG9ydFF1ZXJ5XSA9IHVzZVJlcG9ydFVwZGF0ZU11dGF0aW9uKClcblxuICBjb25zdCB1cGRhdGVSZXBvcnQgPSAocmVwb3J0OiBSZXBvcnRVcGRhdGVNdXRhdGlvblZhcmlhYmxlc1tcInJlcG9ydFwiXSkgPT4ge1xuICAgIHJlcG9ydFF1ZXJ5LmNsaWVudC53cml0ZVF1ZXJ5KHtcbiAgICAgIHF1ZXJ5OiBSZXBvcnRHZXREb2N1bWVudCxcbiAgICAgIHZhcmlhYmxlczogeyBpZDogcmVwb3J0LmlkIH0sXG4gICAgICBkYXRhOiB7XG4gICAgICAgIHJlcG9ydFxuICAgICAgfVxuICAgIH0pXG4gICAgcmV0dXJuIF91cGRhdGVSZXBvcnQoe1xuICAgICAgdmFyaWFibGVzOiB7XG4gICAgICAgIHJlcG9ydDogcmVtb3ZlVHlwZW5hbWUocmVwb3J0IGFzIFJlcG9ydEZyYWdtZW50KVxuICAgICAgfVxuICAgIH0pXG5cbiAgfVxuXG4gIGNvbnN0IHJlcG9ydCA9IHJlcG9ydFF1ZXJ5LmRhdGEgJiYgcmVwb3J0UXVlcnkuZGF0YS5yZXBvcnRcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGNvbnN0IGhhbmRsZXIgPSAoKSA9PiB7XG4gICAgICBpZiAocmVwb3J0KSB7XG5cbiAgICAgICAgc2V0U2NhbGUod2luZG93LmlubmVyV2lkdGggKiAwLjggLyByZXBvcnQud2lkdGgpXG4gICAgICB9XG4gICAgfVxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwicmVzaXplXCIsIGhhbmRsZXIpO1xuICAgIHJldHVybiAoKSA9PiB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLCBoYW5kbGVyKVxuICB9LCBbcmVwb3J0XSlcblxuICBjb25zdCBzZWxlY3RlZFNsaWRlID0gcmVwb3J0ICYmIChyZXBvcnQuc2xpZGVzLmZpbmQocyA9PiBzLmlkID09PSBwcm9wcy5zbGlkZSkgfHwgcmVwb3J0LnNsaWRlc1swXSk7XG5cbiAgY29uc3QgZ2V0RHJhZ0JveCA9IChwb3M6IFBvcywgb3JpZ2luOiBQb3MpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgeDogTWF0aC5taW4ocG9zLngsIG9yaWdpbi54KSAvIHNjYWxlLFxuICAgICAgeTogTWF0aC5taW4ocG9zLnksIG9yaWdpbi55KSAvIHNjYWxlLFxuICAgICAgd2lkdGg6IE1hdGguYWJzKHBvcy54IC0gb3JpZ2luLngpIC8gc2NhbGUsXG4gICAgICBoZWlnaHQ6IE1hdGguYWJzKHBvcy55IC0gb3JpZ2luLnkpIC8gc2NhbGUsXG4gICAgfVxuICB9XG5cbiAgY29uc3QgeyBkcmFnSGFuZGxlcnMsIGRyYWdQb3MsIGRyYWdPcmlnaW4sIGlzRHJhZ2dpbmcsIHBhcmVudFJlZiB9ID0gdXNlTW91c2VEcmFnKHtcbiAgICBvbkRyYWdFbmQ6IChwb3MsIG9yaWdpbikgPT4ge1xuICAgICAgY29uc3QgYm94ID0gZ2V0RHJhZ0JveChwb3MsIG9yaWdpbik7XG4gICAgICBzd2l0Y2ggKHRvb2wpIHtcbiAgICAgICAgY2FzZSBcImluc2VydF9jaGFydFwiOiB7XG5cbiAgICAgICAgICBjb25zdCBuZXdDaGFydCA9IHtcbiAgICAgICAgICAgIGlkOiBjdWlkKCksXG4gICAgICAgICAgICB4OiBNYXRoLnJvdW5kKGJveC54KSxcbiAgICAgICAgICAgIHk6IE1hdGgucm91bmQoYm94LnkpLFxuICAgICAgICAgICAgd2lkdGg6IE1hdGgucm91bmQoYm94LndpZHRoKSxcbiAgICAgICAgICAgIGhlaWdodDogTWF0aC5yb3VuZChib3guaGVpZ2h0KSxcbiAgICAgICAgICAgIF9fdHlwZW5hbWU6IFwiQ2hhcnRcIiBhcyBcIkNoYXJ0XCJcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb25zdCBuZXdSZXBvcnQgPSB7XG4gICAgICAgICAgICAuLi5yZXBvcnQsXG4gICAgICAgICAgICBzbGlkZXM6IHJlcG9ydC5zbGlkZXMubWFwKHNsaWRlID0+IHtcbiAgICAgICAgICAgICAgaWYgKHNsaWRlLmlkID09PSBzZWxlY3RlZFNsaWRlLmlkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgIC4uLnNsaWRlLFxuICAgICAgICAgICAgICAgICAgY2hhcnRzOiBbLi4uc2xpZGUuY2hhcnRzLCBuZXdDaGFydF1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNsaWRlXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfVxuICAgICAgICAgIHVwZGF0ZVJlcG9ydChuZXdSZXBvcnQpXG4gICAgICAgICAgc2V0VG9vbChcInNlbGVjdFwiKTtcbiAgICAgICAgICBzZXRTZWxlY3Rpb24oW25ld0NoYXJ0XSlcbiAgICAgICAgfVxuXG4gICAgICB9XG4gICAgfVxuICB9KVxuXG4gIHJldHVybiAoXG4gICAgPExheW91dCB0YWJJbmRleD17LTF9IG9uS2V5RG93bj17ZSA9PiB7XG4gICAgICBjb25zdCBtb2RpZmllcnMgPSBnZXRNb2RpZmllcnMoZSk7XG4gICAgICBzd2l0Y2ggKGUua2V5KSB7XG4gICAgICAgIGNhc2UgXCJFc2NhcGVcIjpcbiAgICAgICAgICBzZXRUb29sKFwic2VsZWN0XCIpXG4gICAgICAgICAgaWYgKHRvb2wgPT09IFwic2VsZWN0XCIpIHtcbiAgICAgICAgICAgIHNldFNlbGVjdGlvbihbXSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGNhc2UgXCJjXCI6XG4gICAgICAgICAgaWYgKG1vZGlmaWVycy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHNldFRvb2woXCJpbnNlcnRfY2hhcnRcIilcbiAgICAgICAgICAgIHJldHVybiBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgfVxuICAgICAgICBjYXNlIFwiaVwiOlxuICAgICAgICAgIGlmIChtb2RpZmllcnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBzZXRUb29sKFwiaW5zZXJ0X2ltYWdlXCIpXG4gICAgICAgICAgICByZXR1cm4gZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgY2FzZSBcInRcIjpcbiAgICAgICAgICBpZiAobW9kaWZpZXJzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgc2V0VG9vbChcImluc2VydF90ZXh0XCIpXG4gICAgICAgICAgICByZXR1cm4gZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgY2FzZSBcIkJhY2tzcGFjZVwiOiB7XG4gICAgICAgICAgdXBkYXRlUmVwb3J0KHtcbiAgICAgICAgICAgIC4uLnJlcG9ydCxcbiAgICAgICAgICAgIHNsaWRlczogcmVwb3J0LnNsaWRlcy5tYXAoc2xpZGUgPT4gKHtcbiAgICAgICAgICAgICAgLi4uc2xpZGUsXG4gICAgICAgICAgICAgIGNoYXJ0czogc2xpZGUuY2hhcnRzLmZpbHRlcihjaGFydCA9PiBzZWxlY3Rpb24uc29tZShzZWxlY3Rpb24gPT4gc2VsZWN0aW9uLmlkID09PSBjaGFydC5pZCkgPT09IGZhbHNlKVxuICAgICAgICAgICAgfSkpXG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuXG4gICAgICB9XG4gICAgfX0+XG4gICAgICB7KHJlcG9ydFF1ZXJ5LmxvYWRpbmcgfHwgdXBkYXRlUmVwb3J0UXVlcnkubG9hZGluZykgJiYgPExvYWRpbmdJbmRpY2F0b3IgLz59XG4gICAgICA8SGVhZGVyPlxuICAgICAgICA8SGVhZGVyU2VjdGlvbj5cbiAgICAgICAgICA8Q3J1bWJzPlxuICAgICAgICAgICAgPENydW1iTGluayBocmVmPVwiL1wiPkhvbWU8L0NydW1iTGluaz5cbiAgICAgICAgICAgIDxDcnVtYkxpbmsgaHJlZj1cIi9cIj5SZXBvcnRzPC9DcnVtYkxpbms+XG4gICAgICAgICAgICA8Q3J1bWJUaXRsZT57cmVwb3J0ID8gcmVwb3J0LnRpdGxlIDogXCIuLi5cIn08L0NydW1iVGl0bGU+XG4gICAgICAgICAgPC9DcnVtYnMgPlxuICAgICAgICAgIDxOZXdFbGVtZW50cz5cbiAgICAgICAgICAgIDxGbGF0QnV0dG9uIG5hbWU9XCJpbnNlcnRfY2hhcnRcIiBvbkNsaWNrPXsoKSA9PiBzZXRUb29sKFwiaW5zZXJ0X2NoYXJ0XCIpfSBhY3RpdmU9e3Rvb2wgPT09IFwiaW5zZXJ0X2NoYXJ0XCJ9PlxuICAgICAgICAgICAgICA8SWNvbiBpY29uPVwiaW5zZXJ0X2NoYXJ0XCIgLz5cbiAgICAgICAgICAgIDwvRmxhdEJ1dHRvbj5cbiAgICAgICAgICAgIDxGbGF0QnV0dG9uIG5hbWU9XCJpbnNlcnRfaW1hZ2VcIiBvbkNsaWNrPXsoKSA9PiBzZXRUb29sKFwiaW5zZXJ0X2ltYWdlXCIpfSBhY3RpdmU9e3Rvb2wgPT09IFwiaW5zZXJ0X2ltYWdlXCJ9PjxJY29uIGljb249XCJpbnNlcnRfcGhvdG9cIiAvPjwvRmxhdEJ1dHRvbj5cbiAgICAgICAgICAgIDxGbGF0QnV0dG9uIG5hbWU9XCJpbnNlcnRfdGV4dFwiIG9uQ2xpY2s9eygpID0+IHNldFRvb2woXCJpbnNlcnRfdGV4dFwiKX0gYWN0aXZlPXt0b29sID09PSBcImluc2VydF90ZXh0XCJ9PjxJY29uIGljb249XCJpbnNlcnRfdGV4dFwiIC8+PC9GbGF0QnV0dG9uPlxuICAgICAgICAgIDwvTmV3RWxlbWVudHM+XG4gICAgICAgIDwvSGVhZGVyU2VjdGlvbj5cbiAgICAgIDwvSGVhZGVyID5cbiAgICAgIDxkaXYgc3R5bGU9e3sgcG9zaXRpb246IFwiYWJzb2x1dGVcIiwgYm90dG9tOiAxNiwgcmlnaHQ6IDE2IH19PntzY2FsZX08L2Rpdj5cbiAgICAgIDxTdGFnZSB0b29sPXt0b29sfSBzY2FsZT17c2NhbGV9PlxuXG4gICAgICAgIHtcbiAgICAgICAgICBzZWxlY3RlZFNsaWRlICYmXG4gICAgICAgICAgPFNsaWRlIHJlZj17cGFyZW50UmVmfSB7Li4uZHJhZ0hhbmRsZXJzfSB3aWR0aD17cmVwb3J0LndpZHRofSBoZWlnaHQ9e3JlcG9ydC5oZWlnaHR9PlxuICAgICAgICAgICAge1tcImluc2VydF9jaGFydFwiLCBcImluc2VydF9pbWFnZVwiLCBcImluc2VydF90ZXh0XCJdLmluY2x1ZGVzKHRvb2wpICYmIGlzRHJhZ2dpbmcgJiZcbiAgICAgICAgICAgICAgPERyYWdCb3ggey4uLmdldERyYWdCb3goZHJhZ1BvcywgZHJhZ09yaWdpbil9IC8+XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB7c2VsZWN0ZWRTbGlkZS5jaGFydHMubWFwKGNoYXJ0ID0+IHtcbiAgICAgICAgICAgICAgcmV0dXJuIChcblxuICAgICAgICAgICAgICAgIDxDaGFydCBrZXk9e2NoYXJ0LmlkfSBzZWxlY3RlZD17c2VsZWN0aW9uLnNvbWUocyA9PiBzLmlkID09PSBjaGFydC5pZCl9IHsuLi5jaGFydH0gb25DbGljaz17ZSA9PiB7XG4gICAgICAgICAgICAgICAgICBpZiAodG9vbCA9PT0gXCJzZWxlY3RcIikge1xuICAgICAgICAgICAgICAgICAgICBzZXRTZWxlY3Rpb24oZS5uYXRpdmVFdmVudC5zaGlmdEtleSA/IFsuLi5zZWxlY3Rpb24sIGNoYXJ0XSA6IFtjaGFydF0pO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH19IC8+XG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgIH0pfVxuICAgICAgICAgIDwvU2xpZGU+XG4gICAgICAgIH1cbiAgICAgICAge3JlcG9ydCAmJiAhc2VsZWN0ZWRTbGlkZSAmJlxuICAgICAgICAgIDxDZW50ZXI+XG4gICAgICAgICAgICA8QnV0dG9uIG5hbWU9XCJjcmVhdGUgc2xpZGVcIiBvbkNsaWNrPXsoKSA9PiB7XG4gICAgICAgICAgICAgIHVwZGF0ZVJlcG9ydCh7XG4gICAgICAgICAgICAgICAgLi4ucmVwb3J0LFxuICAgICAgICAgICAgICAgIHNsaWRlczogW1xuICAgICAgICAgICAgICAgICAgLi4ucmVwb3J0LnNsaWRlcyxcbiAgICAgICAgICAgICAgICAgIHsgaWQ6IGN1aWQoKSwgY2hhcnRzOiBbXSB9XG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfX0+XG4gICAgICAgICAgICAgIENyZWF0ZSBZb3UgZmlyc3QgU2xpZGVcbiAgICAgICAgICAgIDwvQnV0dG9uPlxuICAgICAgICAgIDwvQ2VudGVyPlxuICAgICAgICB9XG4gICAgICAgIHtyZXBvcnRRdWVyeS5lcnJvciAmJiA8RXJyb3JCb3ggZXJyb3I9e3JlcG9ydFF1ZXJ5LmVycm9yfSAvPn1cbiAgICAgIDwvU3RhZ2U+XG5cbiAgICA8L0xheW91dCA+XG4gIClcbn1cblxuY29uc3QgQ2hhcnQgPSBzdHlsZWQuZGl2PENoYXJ0RnJhZ21lbnQgJiB7IHNlbGVjdGVkOiBib29sZWFuIH0+YFxuICBwb3NpdGlvbjphYnNvbHV0ZTtcbiAgbGVmdDogJHtwID0+IHAueH1weDtcbiAgdG9wOiAke3AgPT4gcC55fXB4O1xuICB3aWR0aDogJHtwID0+IHAud2lkdGh9cHg7XG4gIGhlaWdodDogJHtwID0+IHAuaGVpZ2h0fXB4O1xuICBiYWNrZ3JvdW5kOiAjZjBmMGYwO1xuICBib3JkZXI6IDFweCBzb2xpZCAjZGVkZWRlO1xuICAke3AgPT4gcC5zZWxlY3RlZCAmJiBjc3NgYm9yZGVyOiAxcHggZGFzaGVkICR7Y29sb3JzLnByaW1hcnl9O2B9O1xuYFxuXG5cbmNvbnN0IENlbnRlciA9IHN0eWxlZC5kaXZgXG4gIGhlaWdodDoxMDAlO1xuICBkaXNwbGF5OmdyaWQ7XG4gIHBsYWNlLWNvbnRlbnQ6Y2VudGVyIGNlbnRlcjtcbiAgYFxuXG5cbnR5cGUgRHJhZ0JveFByb3BzID0ge1xuICB4OiBudW1iZXI7XG4gIHk6IG51bWJlcjtcbiAgd2lkdGg6IG51bWJlcjtcbiAgaGVpZ2h0OiBudW1iZXI7XG59XG5cbmNvbnN0IERyYWdCb3ggPSBzdHlsZWQuZGl2PERyYWdCb3hQcm9wcz5gXG4gIHBvc2l0aW9uOmFic29sdXRlO1xuICB3aWR0aDoke3AgPT4gcC53aWR0aH1weDtcbiAgaGVpZ2h0OiR7cCA9PiBwLmhlaWdodH1weDtcbiAgbGVmdDoke3AgPT4gcC54fXB4O1xuICB0b3A6JHtwID0+IHAueX1weDtcbiAgYm9yZGVyOiAycHggZGFzaGVkICR7Y29sb3JzLnByaW1hcnl9O1xuYFxuXG5jb25zdCBTbGlkZSA9IHN0eWxlZC5zZWN0aW9uPHsgd2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIgfT5gXG4gIHBvc2l0aW9uOnJlbGF0aXZlO1xuICBiYWNrZ3JvdW5kOndoaXRlO1xuICBib3gtc2hhZG93OiAwIDFweCA0cHggcmdiYSgwLCAwLCAwLCAwLjQpO1xuICB3aWR0aDogJHtwID0+IHAud2lkdGh9cHg7XG4gIGhlaWdodDoke3AgPT4gcC5oZWlnaHR9cHg7XG5gXG5cbmNvbnN0IE5ld0VsZW1lbnRzID0gc3R5bGVkLmRpdmBcbiAgZGlzcGxheTpncmlkO1xuICBncmlkLWF1dG8tZmxvdzogY29sdW1uO1xuICBncmlkLWdhcDogNHB4O1xuICBwbGFjZS1jb250ZW50OiBjZW50ZXIgc3RhcnQ7XG5gXG5cblxuY29uc3QgTGF5b3V0ID0gc3R5bGVkLmRpdmBcbiAgZGlzcGxheTpncmlkO1xuICBoZWlnaHQ6MTAwJTtcbiAgZ3JpZC1nYXA6IDMycHg7XG4gIGJhY2tncm91bmQ6I2Y1ZjVmNTtcbiAgZ3JpZC10ZW1wbGF0ZS1yb3dzOiBhdXRvIDFmcjtcbiAgcGxhY2UtY29udGVudDogc3RhcnQgc3RyZXRjaDtcbiAgb3ZlcmZsb3c6aGlkZGVuO1xuYFxuXG5jb25zdCBTdGFnZSA9IHN0eWxlZC5tYWluPHsgdG9vbDogVG9vbCwgc2NhbGU6IG51bWJlciB9PmBcbiAgZGlzcGxheTpncmlkO1xuICB3aWR0aDoxMDAlO1xuICBwbGFjZS1jb250ZW50OmNlbnRlciBjZW50ZXI7XG4gIG92ZXJmbG93OmhpZGRlbjtcbiAgJHtwID0+IHtcbiAgICBzd2l0Y2ggKHAudG9vbCkge1xuICAgICAgY2FzZSBcImluc2VydF9jaGFydFwiOlxuICAgICAgY2FzZSBcImluc2VydF9pbWFnZVwiOlxuICAgICAgY2FzZSBcImluc2VydF90ZXh0XCI6XG4gICAgICAgIHJldHVybiBjc3NgXG4gICAgICAgIGN1cnNvcjogY3Jvc3NoYWlyO1xuICAgICAgICBgXG4gICAgfVxuICB9fVxuICAmID4gKiB7XG4gICAgdHJhbnNmb3JtOiBzY2FsZSgke3AgPT4gcC5zY2FsZX0pO1xuICAgIHRyYW5zZm9ybS1vcmlnaW46IDUwJSA1MCU7XG4gIH1cbmBcblxuXG5jb25zdCBMb2FkaW5nSW5kaWNhdG9yID0gKCkgPT5cbiAgPExvYWRpbmdXcmFwcGVyPlxuICAgIDxMb2FkaW5nRG90IGRlbGF5PXswfT4uPC9Mb2FkaW5nRG90PlxuICAgIDxMb2FkaW5nRG90IGRlbGF5PXsyMDB9Pi48L0xvYWRpbmdEb3Q+XG4gICAgPExvYWRpbmdEb3QgZGVsYXk9ezQwMH0+LjwvTG9hZGluZ0RvdD5cbiAgPC9Mb2FkaW5nV3JhcHBlcj5cblxuY29uc3QganVtcEFuaW1hdGlvbiA9IGtleWZyYW1lc2BcbiAgZnJvbSB7XG4gICAgb3BhY2l0eTowO1xuICB9XG4gIHRvIHtcbiAgICBvcGFjaXR5OjE7XG4gIH1cbmBcblxuXG5jb25zdCBMb2FkaW5nV3JhcHBlciA9IHN0eWxlZC5kaXZgXG5wb3NpdGlvbjphYnNvbHV0ZTtcbiAgdG9wOiAwcHg7XG4gIHJpZ2h0OiAzMnB4O1xuICBmb250LXNpemU6IDIuNXJlbTtcbmBcbmNvbnN0IExvYWRpbmdEb3QgPSBzdHlsZWQuc3Bhbjx7IGRlbGF5OiBudW1iZXIgfT5gXG4gIGFuaW1hdGlvbjoke2p1bXBBbmltYXRpb259IDFzIGVhc2UgaW5maW5pdGU7XG4gIGFuaW1hdGlvbi1kZWxheToke3AgPT4gcC5kZWxheX1tcztcbmAiXX0= */\"));","map":{"version":3,"sources":["/Users/andreasmoller/code/reports/client/Report/Report.tsx"],"names":["useReportGetQuery","useReportUpdateMutation","ReportGetDocument","ErrorBox","Crumbs","CrumbTitle","CrumbLink","Header","HeaderSection","Icon","FlatButton","Button","useState","useEffect","css","keyframes","useMouseDrag","colors","cuid","removeTypename","report","__typename","slides","reportData","map","charts","slideData","chartData","getModifiers","e","nativeEvent","metaKey","ctrlKey","altKey","shiftKey","filter","Boolean","ReportPage","props","scale","setScale","tool","setTool","selection","setSelection","reportQuery","variables","id","onCompleted","window","innerWidth","width","_updateReport","updateReportQuery","updateReport","client","writeQuery","query","data","handler","addEventListener","removeEventListener","selectedSlide","find","s","slide","getDragBox","pos","origin","x","Math","min","y","abs","height","onDragEnd","box","newChart","round","newReport","dragHandlers","dragPos","dragOrigin","isDragging","parentRef","modifiers","key","preventDefault","length","chart","some","loading","title","position","bottom","right","includes","error","Chart","p","selected","primary","Center","DragBox","Slide","NewElements","Layout","Stage","LoadingIndicator","jumpAnimation","LoadingWrapper","LoadingDot","delay"],"mappings":"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","sourcesContent":["\nimport { useReportGetQuery, useReportUpdateMutation, ChartFragment, ReportUpdateMutationVariables, ReportFragment, ReportGetDocument } from \"../codegen/graphql\";\nimport styled from \"@emotion/styled\";\nimport { ErrorBox } from \"../components/ErrorBox\";\nimport { Crumbs, CrumbTitle, CrumbLink } from \"../components/Crumbs\";\nimport { Header, HeaderSection } from \"../components/Header\";\nimport { Icon } from \"../components/Icon\";\nimport { FlatButton, Button } from \"../components/Button\";\nimport { useState, KeyboardEvent, useEffect } from \"react\";\nimport { css, keyframes } from \"@emotion/core\";\nimport { useMouseDrag, Pos } from \"../hooks/drag\";\nimport { colors } from \"../theme\";\nimport cuid from \"cuid\"\n\ntype Tool =\n  | \"insert_chart\"\n  | \"insert_image\"\n  | \"insert_text\"\n  | \"select\"\n\n\ntype Selection = ChartFragment\n\n\nconst removeTypename = (report: ReportFragment): ReportUpdateMutationVariables[\"report\"] => {\n  const { __typename, slides, ...reportData } = report;\n  return {\n    ...reportData,\n    slides: slides.map(({ __typename, charts, ...slideData }) => {\n      return {\n        ...slideData,\n        charts: charts.map(({ __typename, ...chartData }) => {\n          return chartData\n        })\n      }\n    })\n  }\n}\n\nconst getModifiers = (e: KeyboardEvent) =>\n  [\n    e.nativeEvent.metaKey && \"meta\",\n    e.nativeEvent.ctrlKey && \"ctrl\",\n    e.nativeEvent.altKey && \"alt\",\n    e.nativeEvent.shiftKey && \"shift\",\n  ].filter(Boolean)\n\nexport const ReportPage = (props: { id: string, slide?: string }) => {\n  const [scale, setScale] = useState(1)\n\n\n  const [tool, setTool] = useState<Tool>(\"select\")\n  const [selection, setSelection] = useState<Selection[]>([])\n  const reportQuery = useReportGetQuery({\n    variables: {\n      id: props.id\n    },\n    onCompleted: ({ report }) => {\n      setScale(window.innerWidth * 0.8 / report.width)\n    }\n  })\n\n  const [_updateReport, updateReportQuery] = useReportUpdateMutation()\n\n  const updateReport = (report: ReportUpdateMutationVariables[\"report\"]) => {\n    reportQuery.client.writeQuery({\n      query: ReportGetDocument,\n      variables: { id: report.id },\n      data: {\n        report\n      }\n    })\n    return _updateReport({\n      variables: {\n        report: removeTypename(report as ReportFragment)\n      }\n    })\n\n  }\n\n  const report = reportQuery.data && reportQuery.data.report\n\n  useEffect(() => {\n    const handler = () => {\n      if (report) {\n\n        setScale(window.innerWidth * 0.8 / report.width)\n      }\n    }\n    window.addEventListener(\"resize\", handler);\n    return () => window.removeEventListener(\"resize\", handler)\n  }, [report])\n\n  const selectedSlide = report && (report.slides.find(s => s.id === props.slide) || report.slides[0]);\n\n  const getDragBox = (pos: Pos, origin: Pos) => {\n    return {\n      x: Math.min(pos.x, origin.x) / scale,\n      y: Math.min(pos.y, origin.y) / scale,\n      width: Math.abs(pos.x - origin.x) / scale,\n      height: Math.abs(pos.y - origin.y) / scale,\n    }\n  }\n\n  const { dragHandlers, dragPos, dragOrigin, isDragging, parentRef } = useMouseDrag({\n    onDragEnd: (pos, origin) => {\n      const box = getDragBox(pos, origin);\n      switch (tool) {\n        case \"insert_chart\": {\n\n          const newChart = {\n            id: cuid(),\n            x: Math.round(box.x),\n            y: Math.round(box.y),\n            width: Math.round(box.width),\n            height: Math.round(box.height),\n            __typename: \"Chart\" as \"Chart\"\n          }\n\n          const newReport = {\n            ...report,\n            slides: report.slides.map(slide => {\n              if (slide.id === selectedSlide.id) {\n                return {\n                  ...slide,\n                  charts: [...slide.charts, newChart]\n                }\n              } else {\n                return slide\n              }\n            })\n          }\n          updateReport(newReport)\n          setTool(\"select\");\n          setSelection([newChart])\n        }\n\n      }\n    }\n  })\n\n  return (\n    <Layout tabIndex={-1} onKeyDown={e => {\n      const modifiers = getModifiers(e);\n      switch (e.key) {\n        case \"Escape\":\n          setTool(\"select\")\n          if (tool === \"select\") {\n            setSelection([]);\n          }\n          return e.preventDefault();\n        case \"c\":\n          if (modifiers.length === 0) {\n            setTool(\"insert_chart\")\n            return e.preventDefault();\n          }\n        case \"i\":\n          if (modifiers.length === 0) {\n            setTool(\"insert_image\")\n            return e.preventDefault();\n          }\n        case \"t\":\n          if (modifiers.length === 0) {\n            setTool(\"insert_text\")\n            return e.preventDefault();\n          }\n        case \"Backspace\": {\n          updateReport({\n            ...report,\n            slides: report.slides.map(slide => ({\n              ...slide,\n              charts: slide.charts.filter(chart => selection.some(selection => selection.id === chart.id) === false)\n            }))\n          })\n        }\n\n      }\n    }}>\n      {(reportQuery.loading || updateReportQuery.loading) && <LoadingIndicator />}\n      <Header>\n        <HeaderSection>\n          <Crumbs>\n            <CrumbLink href=\"/\">Home</CrumbLink>\n            <CrumbLink href=\"/\">Reports</CrumbLink>\n            <CrumbTitle>{report ? report.title : \"...\"}</CrumbTitle>\n          </Crumbs >\n          <NewElements>\n            <FlatButton name=\"insert_chart\" onClick={() => setTool(\"insert_chart\")} active={tool === \"insert_chart\"}>\n              <Icon icon=\"insert_chart\" />\n            </FlatButton>\n            <FlatButton name=\"insert_image\" onClick={() => setTool(\"insert_image\")} active={tool === \"insert_image\"}><Icon icon=\"insert_photo\" /></FlatButton>\n            <FlatButton name=\"insert_text\" onClick={() => setTool(\"insert_text\")} active={tool === \"insert_text\"}><Icon icon=\"insert_text\" /></FlatButton>\n          </NewElements>\n        </HeaderSection>\n      </Header >\n      <div style={{ position: \"absolute\", bottom: 16, right: 16 }}>{scale}</div>\n      <Stage tool={tool} scale={scale}>\n\n        {\n          selectedSlide &&\n          <Slide ref={parentRef} {...dragHandlers} width={report.width} height={report.height}>\n            {[\"insert_chart\", \"insert_image\", \"insert_text\"].includes(tool) && isDragging &&\n              <DragBox {...getDragBox(dragPos, dragOrigin)} />\n            }\n            {selectedSlide.charts.map(chart => {\n              return (\n\n                <Chart key={chart.id} selected={selection.some(s => s.id === chart.id)} {...chart} onClick={e => {\n                  if (tool === \"select\") {\n                    setSelection(e.nativeEvent.shiftKey ? [...selection, chart] : [chart]);\n                  }\n                }} />\n              )\n            })}\n          </Slide>\n        }\n        {report && !selectedSlide &&\n          <Center>\n            <Button name=\"create slide\" onClick={() => {\n              updateReport({\n                ...report,\n                slides: [\n                  ...report.slides,\n                  { id: cuid(), charts: [] }\n                ]\n              })\n            }}>\n              Create You first Slide\n            </Button>\n          </Center>\n        }\n        {reportQuery.error && <ErrorBox error={reportQuery.error} />}\n      </Stage>\n\n    </Layout >\n  )\n}\n\nconst Chart = styled.div<ChartFragment & { selected: boolean }>`\n  position:absolute;\n  left: ${p => p.x}px;\n  top: ${p => p.y}px;\n  width: ${p => p.width}px;\n  height: ${p => p.height}px;\n  background: #f0f0f0;\n  border: 1px solid #dedede;\n  ${p => p.selected && css`border: 1px dashed ${colors.primary};`};\n`\n\n\nconst Center = styled.div`\n  height:100%;\n  display:grid;\n  place-content:center center;\n  `\n\n\ntype DragBoxProps = {\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n}\n\nconst DragBox = styled.div<DragBoxProps>`\n  position:absolute;\n  width:${p => p.width}px;\n  height:${p => p.height}px;\n  left:${p => p.x}px;\n  top:${p => p.y}px;\n  border: 2px dashed ${colors.primary};\n`\n\nconst Slide = styled.section<{ width: number, height: number }>`\n  position:relative;\n  background:white;\n  box-shadow: 0 1px 4px rgba(0, 0, 0, 0.4);\n  width: ${p => p.width}px;\n  height:${p => p.height}px;\n`\n\nconst NewElements = styled.div`\n  display:grid;\n  grid-auto-flow: column;\n  grid-gap: 4px;\n  place-content: center start;\n`\n\n\nconst Layout = styled.div`\n  display:grid;\n  height:100%;\n  grid-gap: 32px;\n  background:#f5f5f5;\n  grid-template-rows: auto 1fr;\n  place-content: start stretch;\n  overflow:hidden;\n`\n\nconst Stage = styled.main<{ tool: Tool, scale: number }>`\n  display:grid;\n  width:100%;\n  place-content:center center;\n  overflow:hidden;\n  ${p => {\n    switch (p.tool) {\n      case \"insert_chart\":\n      case \"insert_image\":\n      case \"insert_text\":\n        return css`\n        cursor: crosshair;\n        `\n    }\n  }}\n  & > * {\n    transform: scale(${p => p.scale});\n    transform-origin: 50% 50%;\n  }\n`\n\n\nconst LoadingIndicator = () =>\n  <LoadingWrapper>\n    <LoadingDot delay={0}>.</LoadingDot>\n    <LoadingDot delay={200}>.</LoadingDot>\n    <LoadingDot delay={400}>.</LoadingDot>\n  </LoadingWrapper>\n\nconst jumpAnimation = keyframes`\n  from {\n    opacity:0;\n  }\n  to {\n    opacity:1;\n  }\n`\n\n\nconst LoadingWrapper = styled.div`\nposition:absolute;\n  top: 0px;\n  right: 32px;\n  font-size: 2.5rem;\n`\nconst LoadingDot = styled.span<{ delay: number }>`\n  animation:${jumpAnimation} 1s ease infinite;\n  animation-delay:${p => p.delay}ms;\n`"]},"metadata":{},"sourceType":"module"}