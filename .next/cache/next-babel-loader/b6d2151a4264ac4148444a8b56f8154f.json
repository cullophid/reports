{"ast":null,"code":"import { Query } from \"./Query\";\nimport { Mutation } from \"./Mutation\";\nimport { User } from \"./User\";\nimport { Report } from \"./Report\";\nimport { GraphQLScalarType, Kind } from \"graphql\";\nexport const resolvers = {\n  Query,\n  Mutation,\n  User,\n  Report,\n  Date: new GraphQLScalarType({\n    name: 'Date',\n    description: 'Date custom scalar type',\n\n    parseValue(value) {\n      return new Date(value); // value from the client\n    },\n\n    serialize(value) {\n      return value.getTime(); // value sent to the client\n    },\n\n    parseLiteral(ast) {\n      if (ast.kind === Kind.INT) {\n        return new Date(ast.value); // ast value is always in string format\n      }\n\n      return null;\n    }\n\n  })\n};","map":{"version":3,"sources":["/Users/andreasmoller/code/reports/server/resolvers/index.ts"],"names":["Query","Mutation","User","Report","GraphQLScalarType","Kind","resolvers","Date","name","description","parseValue","value","serialize","getTime","parseLiteral","ast","kind","INT"],"mappings":"AACA,SAASA,KAAT,QAAsB,SAAtB;AACA,SAASC,QAAT,QAAyB,YAAzB;AACA,SAASC,IAAT,QAAqB,QAArB;AACA,SAASC,MAAT,QAAuB,UAAvB;AACA,SAASC,iBAAT,EAA4BC,IAA5B,QAAwC,SAAxC;AAEA,OAAO,MAAMC,SAAoB,GAAG;AAClCN,EAAAA,KADkC;AAElCC,EAAAA,QAFkC;AAGlCC,EAAAA,IAHkC;AAIlCC,EAAAA,MAJkC;AAKlCI,EAAAA,IAAI,EAAE,IAAIH,iBAAJ,CAAsB;AAC1BI,IAAAA,IAAI,EAAE,MADoB;AAE1BC,IAAAA,WAAW,EAAE,yBAFa;;AAG1BC,IAAAA,UAAU,CAACC,KAAD,EAAQ;AAChB,aAAO,IAAIJ,IAAJ,CAASI,KAAT,CAAP,CADgB,CACQ;AACzB,KALyB;;AAM1BC,IAAAA,SAAS,CAACD,KAAD,EAAQ;AACf,aAAOA,KAAK,CAACE,OAAN,EAAP,CADe,CACS;AACzB,KARyB;;AAS1BC,IAAAA,YAAY,CAACC,GAAD,EAAM;AAChB,UAAIA,GAAG,CAACC,IAAJ,KAAaX,IAAI,CAACY,GAAtB,EAA2B;AACzB,eAAO,IAAIV,IAAJ,CAASQ,GAAG,CAACJ,KAAb,CAAP,CADyB,CACE;AAC5B;;AACD,aAAO,IAAP;AACD;;AAdyB,GAAtB;AAL4B,CAA7B","sourcesContent":["import { Resolvers } from \"../codegen/graphql\";\nimport { Query } from \"./Query\"\nimport { Mutation } from \"./Mutation\"\nimport { User } from \"./User\"\nimport { Report } from \"./Report\"\nimport { GraphQLScalarType, Kind } from \"graphql\";\n\nexport const resolvers: Resolvers = {\n  Query,\n  Mutation,\n  User,\n  Report,\n  Date: new GraphQLScalarType({\n    name: 'Date',\n    description: 'Date custom scalar type',\n    parseValue(value) {\n      return new Date(value); // value from the client\n    },\n    serialize(value) {\n      return value.getTime(); // value sent to the client\n    },\n    parseLiteral(ast) {\n      if (ast.kind === Kind.INT) {\n        return new Date(ast.value) // ast value is always in string format\n      }\n      return null;\n    },\n  }),\n}"]},"metadata":{},"sourceType":"module"}