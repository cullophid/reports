{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nexport const updateReport = async (_, {\n  report\n}, ctx) => {\n  if (!ctx.session.user) {\n    throw new Error(\"You must be authenticated\");\n  }\n\n  const current = await ctx.photon.reports.findOne({\n    where: {\n      id: report.id\n    },\n    include: {\n      owner: true\n    }\n  });\n\n  if (current.owner.id !== ctx.session.user.sub) {\n    throw new Error(\"Report does not exist\");\n  }\n\n  return ctx.photon.reports.update({\n    where: {\n      id: report.id\n    },\n    data: {\n      title: report.title,\n      slides: {\n        upsert: report.slides.map(slide => ({\n          where: {\n            id: slide.id\n          },\n          update: _objectSpread({}, slide, {\n            charts: {\n              upsert: slide.charts.map(chart => ({\n                where: {\n                  id: chart.id\n                },\n                update: chart,\n                create: chart\n              })),\n              deleteMany: {\n                id: {\n                  notIn: slide.charts.map(c => c.id)\n                }\n              }\n            }\n          }),\n          create: _objectSpread({}, slide, {\n            charts: {\n              create: slide.charts\n            }\n          })\n        })),\n        deleteMany: {\n          id: {\n            notIn: report.slides.map(s => s.id)\n          }\n        }\n      }\n    }\n  });\n};","map":{"version":3,"sources":["/Users/andreasmoller/code/reports/server/resolvers/Mutation/updateReport.ts"],"names":["updateReport","_","report","ctx","session","user","Error","current","photon","reports","findOne","where","id","include","owner","sub","update","data","title","slides","upsert","map","slide","charts","chart","create","deleteMany","notIn","c","s"],"mappings":";AAGA,OAAO,MAAMA,YAA+C,GAAG,OAAOC,CAAP,EAAU;AAAEC,EAAAA;AAAF,CAAV,EAAsBC,GAAtB,KAA8B;AAC3F,MAAI,CAACA,GAAG,CAACC,OAAJ,CAAYC,IAAjB,EAAuB;AACrB,UAAM,IAAIC,KAAJ,CAAU,2BAAV,CAAN;AACD;;AACD,QAAMC,OAAO,GAAG,MAAMJ,GAAG,CAACK,MAAJ,CAAWC,OAAX,CAAmBC,OAAnB,CAA2B;AAC/CC,IAAAA,KAAK,EAAE;AAAEC,MAAAA,EAAE,EAAEV,MAAM,CAACU;AAAb,KADwC;AAE/CC,IAAAA,OAAO,EAAE;AACPC,MAAAA,KAAK,EAAE;AADA;AAFsC,GAA3B,CAAtB;;AAMA,MAAIP,OAAO,CAACO,KAAR,CAAcF,EAAd,KAAqBT,GAAG,CAACC,OAAJ,CAAYC,IAAZ,CAAiBU,GAA1C,EAA+C;AAC7C,UAAM,IAAIT,KAAJ,CAAU,uBAAV,CAAN;AACD;;AAED,SAAOH,GAAG,CAACK,MAAJ,CAAWC,OAAX,CAAmBO,MAAnB,CAA0B;AAC/BL,IAAAA,KAAK,EAAE;AAAEC,MAAAA,EAAE,EAAEV,MAAM,CAACU;AAAb,KADwB;AAE/BK,IAAAA,IAAI,EAAE;AACJC,MAAAA,KAAK,EAAEhB,MAAM,CAACgB,KADV;AAEJC,MAAAA,MAAM,EAAE;AACNC,QAAAA,MAAM,EAAElB,MAAM,CAACiB,MAAP,CAAcE,GAAd,CAAmBC,KAAD,KAAY;AACpCX,UAAAA,KAAK,EAAE;AACLC,YAAAA,EAAE,EAAEU,KAAK,CAACV;AADL,WAD6B;AAIpCI,UAAAA,MAAM,oBACDM,KADC;AAEJC,YAAAA,MAAM,EAAE;AACNH,cAAAA,MAAM,EAAEE,KAAK,CAACC,MAAN,CAAaF,GAAb,CAAiBG,KAAK,KAAK;AACjCb,gBAAAA,KAAK,EAAE;AACLC,kBAAAA,EAAE,EAAEY,KAAK,CAACZ;AADL,iBAD0B;AAIjCI,gBAAAA,MAAM,EAAEQ,KAJyB;AAKjCC,gBAAAA,MAAM,EAAED;AALyB,eAAL,CAAtB,CADF;AAQNE,cAAAA,UAAU,EAAE;AACVd,gBAAAA,EAAE,EAAE;AACFe,kBAAAA,KAAK,EAAEL,KAAK,CAACC,MAAN,CAAaF,GAAb,CAAiBO,CAAC,IAAIA,CAAC,CAAChB,EAAxB;AADL;AADM;AARN;AAFJ,YAJ8B;AAqBpCa,UAAAA,MAAM,oBACDH,KADC;AAEJC,YAAAA,MAAM,EAAE;AACNE,cAAAA,MAAM,EAAEH,KAAK,CAACC;AADR;AAFJ;AArB8B,SAAZ,CAAlB,CADF;AA6BNG,QAAAA,UAAU,EAAE;AACVd,UAAAA,EAAE,EAAE;AACFe,YAAAA,KAAK,EAAEzB,MAAM,CAACiB,MAAP,CAAcE,GAAd,CAAkBQ,CAAC,IAAIA,CAAC,CAACjB,EAAzB;AADL;AADM;AA7BN;AAFJ;AAFyB,GAA1B,CAAP;AAyCD,CAvDM","sourcesContent":["import { MutationResolvers } from \"../../codegen/graphql\";\nimport cuid from \"cuid\"\n\nexport const updateReport: MutationResolvers[\"updateReport\"] = async (_, { report }, ctx) => {\n  if (!ctx.session.user) {\n    throw new Error(\"You must be authenticated\")\n  }\n  const current = await ctx.photon.reports.findOne({\n    where: { id: report.id },\n    include: {\n      owner: true\n    }\n  })\n  if (current.owner.id !== ctx.session.user.sub) {\n    throw new Error(\"Report does not exist\")\n  }\n\n  return ctx.photon.reports.update({\n    where: { id: report.id },\n    data: {\n      title: report.title,\n      slides: {\n        upsert: report.slides.map((slide) => ({\n          where: {\n            id: slide.id\n          },\n          update: {\n            ...slide,\n            charts: {\n              upsert: slide.charts.map(chart => ({\n                where: {\n                  id: chart.id,\n                },\n                update: chart,\n                create: chart\n              })),\n              deleteMany: {\n                id: {\n                  notIn: slide.charts.map(c => c.id)\n                }\n              }\n            }\n          },\n          create: {\n            ...slide,\n            charts: {\n              create: slide.charts\n            }\n          }\n        })),\n        deleteMany: {\n          id: {\n            notIn: report.slides.map(s => s.id)\n          }\n        }\n      }\n    }\n  })\n}"]},"metadata":{},"sourceType":"module"}