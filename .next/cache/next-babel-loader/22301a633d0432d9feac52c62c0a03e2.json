{"ast":null,"code":"import _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport { ApolloServer } from 'apollo-server-micro';\nimport typeDefs from \"../../schema.graphql\";\nimport { photon } from \"../../server/helpers/photon\";\nimport { resolvers } from \"../../server/resolvers\";\nimport { verifyAuthToken } from '../../server/helpers/jwt';\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\nconst apolloServer = new ApolloServer({\n  typeDefs,\n  resolvers,\n  context: async ({\n    req\n  }) => {\n    let session = {};\n    console.log(_Object$keys(req));\n\n    if (req.headers.authorization) {\n      const auth_token = req.headers.authorization.split(/\\s/)[1];\n\n      if (auth_token) {\n        session.user = await verifyAuthToken(auth_token);\n      }\n    }\n\n    return {\n      photon,\n      session\n    };\n  }\n});\nexport default apolloServer.createHandler({\n  path: \"/api/graphql\"\n});","map":{"version":3,"sources":["/Users/andreasmoller/code/reports/pages/api/graphql.ts"],"names":["ApolloServer","typeDefs","photon","resolvers","verifyAuthToken","config","api","bodyParser","apolloServer","context","req","session","console","log","headers","authorization","auth_token","split","user","createHandler","path"],"mappings":";AAAA,SAASA,YAAT,QAA6B,qBAA7B;AACA,OAAOC,QAAP,MAAqB,sBAArB;AAEA,SAASC,MAAT,QAAuB,6BAAvB;AACA,SAASC,SAAT,QAA0B,wBAA1B;AAGA,SAASC,eAAT,QAA2C,0BAA3C;AAWA,OAAO,MAAMC,MAAM,GAAG;AACpBC,EAAAA,GAAG,EAAE;AACHC,IAAAA,UAAU,EAAE;AADT;AADe,CAAf;AAMP,MAAMC,YAAY,GAAG,IAAIR,YAAJ,CAAiB;AACpCC,EAAAA,QADoC;AAEpCE,EAAAA,SAFoC;AAGpCM,EAAAA,OAAO,EAAE,OAAO;AAAEC,IAAAA;AAAF,GAAP,KAA0C;AACjD,QAAIC,OAAgB,GAAG,EAAvB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAYH,GAAZ,CAAZ;;AACA,QAAIA,GAAG,CAACI,OAAJ,CAAYC,aAAhB,EAA+B;AAC7B,YAAMC,UAAU,GAAGN,GAAG,CAACI,OAAJ,CAAYC,aAAZ,CAA0BE,KAA1B,CAAgC,IAAhC,EAAsC,CAAtC,CAAnB;;AACA,UAAID,UAAJ,EAAgB;AACdL,QAAAA,OAAO,CAACO,IAAR,GAAe,MAAMd,eAAe,CAACY,UAAD,CAApC;AACD;AACF;;AACD,WAAO;AACLd,MAAAA,MADK;AAELS,MAAAA;AAFK,KAAP;AAID;AAhBmC,CAAjB,CAArB;AAmBA,eAAeH,YAAY,CAACW,aAAb,CAA2B;AAAEC,EAAAA,IAAI,EAAE;AAAR,CAA3B,CAAf","sourcesContent":["import { ApolloServer } from 'apollo-server-micro'\nimport typeDefs from \"../../schema.graphql\"\n\nimport { photon } from \"../../server/helpers/photon\"\nimport { resolvers } from \"../../server/resolvers\"\nimport Photon from '@generated/photon'\nimport { MicroRequest } from 'apollo-server-micro/dist/types'\nimport { verifyAuthToken, AuthToken } from '../../server/helpers/jwt'\n\nexport type Context = {\n  photon: Photon,\n  session: Session\n}\n\ntype Session = {\n  user?: AuthToken\n}\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nconst apolloServer = new ApolloServer({\n  typeDefs,\n  resolvers,\n  context: async ({ req }: { req: MicroRequest }) => {\n    let session: Session = {}\n    console.log(Object.keys(req))\n    if (req.headers.authorization) {\n      const auth_token = req.headers.authorization.split(/\\s/)[1]\n      if (auth_token) {\n        session.user = await verifyAuthToken(auth_token)\n      }\n    }\n    return {\n      photon,\n      session\n    }\n  }\n});\n\nexport default apolloServer.createHandler({ path: \"/api/graphql\" });"]},"metadata":{},"sourceType":"module"}