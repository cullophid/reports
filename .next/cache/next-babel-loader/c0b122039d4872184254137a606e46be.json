{"ast":null,"code":"import { photon } from \"../../server/helpers/photon\";\nimport { createAuthToken, createRefreshToken, verifyRefreshToken } from \"../../server/helpers/jwt\";\nexport default ((req, res) => {\n  const refresh_token = req.cookies.refresh_token;\n  console.log({\n    refresh_token\n  });\n\n  if (!refresh_token) {\n    return res.status(401).send(\"Missing refresh token\");\n  }\n\n  getNewTokens(refresh_token).then(({\n    auth_token,\n    refreshToken\n  }) => {\n    res.setHeader(\"Set-Cookie\", `refresh_token=${refreshToken}; Path=/; HttpOnly`);\n    res.status(200).send({\n      auth_token\n    });\n  }).catch(err => {\n    console.error(err);\n    res.status(401).send(err.message);\n  });\n});\n\nconst getNewTokens = async refresh_token => {\n  const {\n    userId\n  } = await verifyRefreshToken(refresh_token);\n\n  if (!userId) {\n    throw new Error(\"Token does not contain a userId\");\n  }\n\n  let user = await photon.users.findOne({\n    where: {\n      id: userId\n    }\n  });\n\n  if (user.refreshToken !== refresh_token) {\n    throw new Error(\"Invalid token\");\n  }\n\n  const auth_token = await createAuthToken(user);\n  const refreshToken = await createRefreshToken(user);\n  await photon.users.update({\n    where: {\n      id: user.id\n    },\n    data: {\n      refreshToken\n    }\n  });\n  return {\n    auth_token,\n    refreshToken\n  };\n};","map":{"version":3,"sources":["/Users/andreasmoller/code/reports/pages/api/refresh_token.ts"],"names":["photon","createAuthToken","createRefreshToken","verifyRefreshToken","req","res","refresh_token","cookies","console","log","status","send","getNewTokens","then","auth_token","refreshToken","setHeader","catch","err","error","message","userId","Error","user","users","findOne","where","id","update","data"],"mappings":"AACA,SAASA,MAAT,QAAuB,6BAAvB;AACA,SAASC,eAAT,EAA0BC,kBAA1B,EAA8CC,kBAA9C,QAAwE,0BAAxE;AAGA,gBAAe,CAACC,GAAD,EAAsBC,GAAtB,KAA+C;AAC5D,QAAMC,aAAa,GAAGF,GAAG,CAACG,OAAJ,CAAYD,aAAlC;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAY;AAAEH,IAAAA;AAAF,GAAZ;;AACA,MAAI,CAACA,aAAL,EAAoB;AAClB,WAAOD,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,uBAArB,CAAP;AACD;;AACDC,EAAAA,YAAY,CAACN,aAAD,CAAZ,CACGO,IADH,CACQ,CAAC;AAAEC,IAAAA,UAAF;AAAcC,IAAAA;AAAd,GAAD,KAAkC;AACtCV,IAAAA,GAAG,CAACW,SAAJ,CAAc,YAAd,EAA6B,iBAAgBD,YAAa,oBAA1D;AACAV,IAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEG,MAAAA;AAAF,KAArB;AACD,GAJH,EAKGG,KALH,CAKSC,GAAG,IAAI;AACZV,IAAAA,OAAO,CAACW,KAAR,CAAcD,GAAd;AACAb,IAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBO,GAAG,CAACE,OAAzB;AACD,GARH;AASD,CAfD;;AAiBA,MAAMR,YAAY,GAAG,MAAON,aAAP,IAAiC;AACpD,QAAM;AAAEe,IAAAA;AAAF,MAAa,MAAMlB,kBAAkB,CAACG,aAAD,CAA3C;;AACA,MAAI,CAACe,MAAL,EAAa;AACX,UAAM,IAAIC,KAAJ,CAAU,iCAAV,CAAN;AACD;;AAED,MAAIC,IAAI,GAAG,MAAMvB,MAAM,CAACwB,KAAP,CAAaC,OAAb,CAAqB;AACpCC,IAAAA,KAAK,EAAE;AACLC,MAAAA,EAAE,EAAEN;AADC;AAD6B,GAArB,CAAjB;;AAKA,MAAIE,IAAI,CAACR,YAAL,KAAsBT,aAA1B,EAAyC;AACvC,UAAM,IAAIgB,KAAJ,CAAU,eAAV,CAAN;AACD;;AACD,QAAMR,UAAU,GAAG,MAAMb,eAAe,CAACsB,IAAD,CAAxC;AACA,QAAMR,YAAY,GAAG,MAAMb,kBAAkB,CAACqB,IAAD,CAA7C;AAEA,QAAMvB,MAAM,CAACwB,KAAP,CAAaI,MAAb,CAAoB;AACxBF,IAAAA,KAAK,EAAE;AACLC,MAAAA,EAAE,EAAEJ,IAAI,CAACI;AADJ,KADiB;AAIxBE,IAAAA,IAAI,EAAE;AACJd,MAAAA;AADI;AAJkB,GAApB,CAAN;AASA,SAAO;AACLD,IAAAA,UADK;AAELC,IAAAA;AAFK,GAAP;AAKD,CA/BD","sourcesContent":["import { NextApiRequest, NextApiResponse } from \"next\";\nimport { photon } from \"../../server/helpers/photon\"\nimport { createAuthToken, createRefreshToken, verifyRefreshToken } from \"../../server/helpers/jwt\"\nimport Cookies from \"cookies\";\n\nexport default (req: NextApiRequest, res: NextApiResponse) => {\n  const refresh_token = req.cookies.refresh_token;\n  console.log({ refresh_token })\n  if (!refresh_token) {\n    return res.status(401).send(\"Missing refresh token\")\n  }\n  getNewTokens(refresh_token)\n    .then(({ auth_token, refreshToken }) => {\n      res.setHeader(\"Set-Cookie\", `refresh_token=${refreshToken}; Path=/; HttpOnly`)\n      res.status(200).send({ auth_token });\n    })\n    .catch(err => {\n      console.error(err)\n      res.status(401).send(err.message)\n    })\n}\n\nconst getNewTokens = async (refresh_token: string) => {\n  const { userId } = await verifyRefreshToken(refresh_token)\n  if (!userId) {\n    throw new Error(\"Token does not contain a userId\")\n  }\n\n  let user = await photon.users.findOne({\n    where: {\n      id: userId\n    }\n  })\n  if (user.refreshToken !== refresh_token) {\n    throw new Error(\"Invalid token\");\n  }\n  const auth_token = await createAuthToken(user)\n  const refreshToken = await createRefreshToken(user)\n\n  await photon.users.update({\n    where: {\n      id: user.id\n    },\n    data: {\n      refreshToken\n    }\n  })\n\n  return {\n    auth_token,\n    refreshToken\n  }\n\n}"]},"metadata":{},"sourceType":"module"}