{"ast":null,"code":"import _slicedToArray from \"/Users/andreas/code/reports/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useState, useEffect } from \"react\";\nexport var useMouse = function useMouse(_ref) {\n  var onDragStart = _ref.onDragStart,\n      onDrag = _ref.onDrag,\n      onDragEnd = _ref.onDragEnd;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isDragging = _useState2[0],\n      setIsDragging = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isMousePressed = _useState4[0],\n      setMousePressed = _useState4[1];\n\n  var _useState5 = useState(null),\n      _useState6 = _slicedToArray(_useState5, 2),\n      lastMouseEvent = _useState6[0],\n      setLastMouseEvent = _useState6[1];\n\n  var onMouseDown = function onMouseDown(e) {\n    setMousePressed(true);\n  };\n\n  var onMouseMove = function onMouseMove(e) {\n    if (!isMousePressed) return;\n\n    if (isMousePressed && !isDragging) {\n      onDragStart(e);\n    }\n\n    setLastMouseEvent(e);\n    onDrag(e);\n  };\n\n  var mouseup = function mouseup() {\n    setMousePressed(false);\n    setIsDragging(false);\n    if (!isDragging) return;\n    onDragEnd(lastMouseEvent);\n  };\n\n  useEffect(function () {\n    document.addEventListener(\"mouseup\", mouseup);\n    return function () {\n      return document.removeEventListener(\"mouseup\", mouseup);\n    };\n  });\n  return {\n    onMouseDown: onMouseDown,\n    onMouseMove: onMouseMove\n  };\n};","map":{"version":3,"sources":["/Users/andreas/code/reports/app/src/hooks/mouse.ts"],"names":["useState","useEffect","useMouse","onDragStart","onDrag","onDragEnd","isDragging","setIsDragging","isMousePressed","setMousePressed","lastMouseEvent","setLastMouseEvent","onMouseDown","e","onMouseMove","mouseup","document","addEventListener","removeEventListener"],"mappings":";AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAA4C,OAA5C;AAaA,OAAO,IAAMC,QAAQ,GAAG,SAAXA,QAAW,OAAsD;AAAA,MAAnDC,WAAmD,QAAnDA,WAAmD;AAAA,MAAtCC,MAAsC,QAAtCA,MAAsC;AAAA,MAA9BC,SAA8B,QAA9BA,SAA8B;;AAAA,kBAC1CL,QAAQ,CAAC,KAAD,CADkC;AAAA;AAAA,MACvEM,UADuE;AAAA,MAC3DC,aAD2D;;AAAA,mBAEpCP,QAAQ,CAAC,KAAD,CAF4B;AAAA;AAAA,MAEvEQ,cAFuE;AAAA,MAEvDC,eAFuD;;AAAA,mBAGlCT,QAAQ,CAChD,IADgD,CAH0B;AAAA;AAAA,MAGvEU,cAHuE;AAAA,MAGvDC,iBAHuD;;AAO5E,MAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,CAAD,EAA8B;AAChDJ,IAAAA,eAAe,CAAC,IAAD,CAAf;AACD,GAFD;;AAIA,MAAMK,WAAW,GAAG,SAAdA,WAAc,CAACD,CAAD,EAA8B;AAChD,QAAI,CAACL,cAAL,EAAqB;;AACrB,QAAIA,cAAc,IAAI,CAACF,UAAvB,EAAmC;AACjCH,MAAAA,WAAW,CAACU,CAAD,CAAX;AACD;;AACDF,IAAAA,iBAAiB,CAACE,CAAD,CAAjB;AACAT,IAAAA,MAAM,CAACS,CAAD,CAAN;AACD,GAPD;;AASA,MAAME,OAAO,GAAG,SAAVA,OAAU,GAAM;AACpBN,IAAAA,eAAe,CAAC,KAAD,CAAf;AACAF,IAAAA,aAAa,CAAC,KAAD,CAAb;AACA,QAAI,CAACD,UAAL,EAAiB;AACjBD,IAAAA,SAAS,CAACK,cAAD,CAAT;AACD,GALD;;AAOAT,EAAAA,SAAS,CAAC,YAAM;AACde,IAAAA,QAAQ,CAACC,gBAAT,CAA0B,SAA1B,EAAqCF,OAArC;AACA,WAAO;AAAA,aAAMC,QAAQ,CAACE,mBAAT,CAA6B,SAA7B,EAAwCH,OAAxC,CAAN;AAAA,KAAP;AACD,GAHQ,CAAT;AAKA,SAAO;AACLH,IAAAA,WAAW,EAAXA,WADK;AAELE,IAAAA,WAAW,EAAXA;AAFK,GAAP;AAID,CApCM","sourcesContent":["import { useState, useEffect, useRef } from \"react\";\n\ntype point = {\n  x: number;\n  y: number;\n};\n\ntype useDragProps = {\n  onDragStart: (e: React.MouseEvent) => void;\n  onDrag: (e: React.MouseEvent) => void;\n  onDragEnd: (e: React.MouseEvent) => void;\n};\n\nexport const useMouse = ({ onDragStart, onDrag, onDragEnd }: useDragProps) => {\n  let [isDragging, setIsDragging] = useState(false);\n  let [isMousePressed, setMousePressed] = useState(false);\n  let [lastMouseEvent, setLastMouseEvent] = useState<React.MouseEvent | null>(\n    null\n  );\n\n  const onMouseDown = (e: React.MouseEvent<any>) => {\n    setMousePressed(true);\n  };\n\n  const onMouseMove = (e: React.MouseEvent<any>) => {\n    if (!isMousePressed) return;\n    if (isMousePressed && !isDragging) {\n      onDragStart(e);\n    }\n    setLastMouseEvent(e);\n    onDrag(e);\n  };\n\n  const mouseup = () => {\n    setMousePressed(false);\n    setIsDragging(false);\n    if (!isDragging) return;\n    onDragEnd(lastMouseEvent as React.MouseEvent);\n  };\n\n  useEffect(() => {\n    document.addEventListener(\"mouseup\", mouseup);\n    return () => document.removeEventListener(\"mouseup\", mouseup);\n  });\n\n  return {\n    onMouseDown,\n    onMouseMove\n  };\n};\n"]},"metadata":{},"sourceType":"module"}