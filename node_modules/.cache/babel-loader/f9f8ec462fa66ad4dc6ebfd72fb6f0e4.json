{"ast":null,"code":"import _slicedToArray from \"/Users/andreas/code/reports/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useState, useEffect } from \"react\";\nexport var useDrag = function useDrag(_ref) {\n  var onDragStart = _ref.onDragStart,\n      onDrag = _ref.onDrag,\n      onDragEnd = _ref.onDragEnd;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isDragging = _useState2[0],\n      setIsDragging = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isMousePressed = _useState4[0],\n      setMousePressed = _useState4[1];\n\n  var _useState5 = useState(null),\n      _useState6 = _slicedToArray(_useState5, 2),\n      mousePos = _useState6[0],\n      setMousePos = _useState6[1];\n\n  var _useState7 = useState(null),\n      _useState8 = _slicedToArray(_useState7, 2),\n      lastMouseEvent = _useState8[0],\n      setLastMouseEvent = _useState8[1];\n\n  var onMouseDown = function onMouseDown(e) {\n    setMousePressed(true);\n  };\n\n  var onMouseMove = function onMouseMove(e) {\n    if (!isMousePressed) return;\n\n    if (isMousePressed && !isDragging) {\n      onDragStart(e);\n    }\n\n    setLastMouseEvent(e);\n    onDrag(e);\n  };\n\n  var mouseup = function mouseup(e) {\n    if (!isDragging) return;\n    setMousePos(null);\n    setIsDragging(false);\n    onDragEnd(event);\n  };\n\n  useEffect(function () {\n    document.addEventListener(\"mouseup\", mouseup);\n    return function () {\n      return document.removeEventListener(\"mouseup\", mouseup);\n    };\n  });\n  return {\n    ref: containerRef,\n    onMouseDown: onMouseDown,\n    onMouseMove: onMouseMove\n  };\n};","map":{"version":3,"sources":["/Users/andreas/code/reports/app/src/hooks/mouse.ts"],"names":["useState","useEffect","useDrag","onDragStart","onDrag","onDragEnd","isDragging","setIsDragging","isMousePressed","setMousePressed","mousePos","setMousePos","lastMouseEvent","setLastMouseEvent","onMouseDown","e","onMouseMove","mouseup","event","document","addEventListener","removeEventListener","ref","containerRef"],"mappings":";AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAA4C,OAA5C;AAaA,OAAO,IAAMC,OAAO,GAAG,SAAVA,OAAU,OAAsD;AAAA,MAAnDC,WAAmD,QAAnDA,WAAmD;AAAA,MAAtCC,MAAsC,QAAtCA,MAAsC;AAAA,MAA9BC,SAA8B,QAA9BA,SAA8B;;AAAA,kBACzCL,QAAQ,CAAC,KAAD,CADiC;AAAA;AAAA,MACtEM,UADsE;AAAA,MAC1DC,aAD0D;;AAAA,mBAEnCP,QAAQ,CAAC,KAAD,CAF2B;AAAA;AAAA,MAEtEQ,cAFsE;AAAA,MAEtDC,eAFsD;;AAAA,mBAG7CT,QAAQ,CAAe,IAAf,CAHqC;AAAA;AAAA,MAGtEU,QAHsE;AAAA,MAG5DC,WAH4D;;AAAA,mBAIjCX,QAAQ,CAChD,IADgD,CAJyB;AAAA;AAAA,MAItEY,cAJsE;AAAA,MAItDC,iBAJsD;;AAQ3E,MAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,CAAD,EAA8B;AAChDN,IAAAA,eAAe,CAAC,IAAD,CAAf;AACD,GAFD;;AAIA,MAAMO,WAAW,GAAG,SAAdA,WAAc,CAACD,CAAD,EAA8B;AAChD,QAAI,CAACP,cAAL,EAAqB;;AACrB,QAAIA,cAAc,IAAI,CAACF,UAAvB,EAAmC;AACjCH,MAAAA,WAAW,CAACY,CAAD,CAAX;AACD;;AACDF,IAAAA,iBAAiB,CAACE,CAAD,CAAjB;AACAX,IAAAA,MAAM,CAACW,CAAD,CAAN;AACD,GAPD;;AASA,MAAME,OAAO,GAAG,SAAVA,OAAU,CAACF,CAAD,EAAmB;AACjC,QAAI,CAACT,UAAL,EAAiB;AACjBK,IAAAA,WAAW,CAAC,IAAD,CAAX;AACAJ,IAAAA,aAAa,CAAC,KAAD,CAAb;AACAF,IAAAA,SAAS,CAACa,KAAD,CAAT;AACD,GALD;;AAOAjB,EAAAA,SAAS,CAAC,YAAM;AACdkB,IAAAA,QAAQ,CAACC,gBAAT,CAA0B,SAA1B,EAAqCH,OAArC;AACA,WAAO;AAAA,aAAME,QAAQ,CAACE,mBAAT,CAA6B,SAA7B,EAAwCJ,OAAxC,CAAN;AAAA,KAAP;AACD,GAHQ,CAAT;AAKA,SAAO;AACLK,IAAAA,GAAG,EAAEC,YADA;AAELT,IAAAA,WAAW,EAAXA,WAFK;AAGLE,IAAAA,WAAW,EAAXA;AAHK,GAAP;AAKD,CAtCM","sourcesContent":["import { useState, useEffect, useRef } from \"react\";\n\ntype point = {\n  x: number;\n  y: number;\n};\n\ntype useDragProps = {\n  onDragStart: (e: React.MouseEvent) => void;\n  onDrag: (e: React.MouseEvent) => void;\n  onDragEnd: (e: React.MouseEvent) => void;\n};\n\nexport const useDrag = ({ onDragStart, onDrag, onDragEnd }: useDragProps) => {\n  let [isDragging, setIsDragging] = useState(false);\n  let [isMousePressed, setMousePressed] = useState(false);\n  let [mousePos, setMousePos] = useState<point | null>(null);\n  let [lastMouseEvent, setLastMouseEvent] = useState<React.MouseEvent | null>(\n    null\n  );\n\n  const onMouseDown = (e: React.MouseEvent<any>) => {\n    setMousePressed(true);\n  };\n\n  const onMouseMove = (e: React.MouseEvent<any>) => {\n    if (!isMousePressed) return;\n    if (isMousePressed && !isDragging) {\n      onDragStart(e);\n    }\n    setLastMouseEvent(e);\n    onDrag(e);\n  };\n\n  const mouseup = (e: MouseEvent) => {\n    if (!isDragging) return;\n    setMousePos(null);\n    setIsDragging(false);\n    onDragEnd(event);\n  };\n\n  useEffect(() => {\n    document.addEventListener(\"mouseup\", mouseup);\n    return () => document.removeEventListener(\"mouseup\", mouseup);\n  });\n\n  return {\n    ref: containerRef,\n    onMouseDown,\n    onMouseMove\n  };\n};\n"]},"metadata":{},"sourceType":"module"}