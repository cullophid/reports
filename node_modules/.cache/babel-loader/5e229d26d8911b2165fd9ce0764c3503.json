{"ast":null,"code":"import _objectSpread from \"/Users/andreas/code/reports/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _taggedTemplateLiteral from \"/Users/andreas/code/reports/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  {\\n    id\\n    title\\n    slides {\\n      id\\n      elements {\\n        id\\n        type\\n        x\\n        y\\n        width\\n        height\\n        text {\\n          value\\n          fontSize\\n          align\\n        }\\n        chart {\\n          dataStore {\\n            id\\n          }\\n          query\\n          xAxis\\n          yAxis\\n        }\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport gql from \"graphql-tag\";\nimport { omit } from \"ramda\";\nimport uuid from \"uuid/v4\";\nexport var newTextElement = function newTextElement() {\n  return {\n    id: uuid(),\n    type: \"text\",\n    x: 50,\n    y: 130,\n    width: 700,\n    height: 0,\n    text: {\n      value: \"Text...\",\n      fontSize: 24,\n      align: \"Center\"\n    }\n  };\n};\nexport var newSlide = function newSlide() {\n  return {\n    id: uuid(),\n    elements: []\n  };\n};\nexport var reportQuery = gql(_templateObject());\nvar removeTypename = omit([\"__typename\"]);\n\nvar cleanSlideElement = function cleanSlideElement(elem) {\n  switch (elem.type) {\n    case \"text\":\n      return removeTypename(_objectSpread({}, elem, {\n        text: removeTypename(elem.text)\n      }));\n\n    case \"chart\":\n      return removeTypename(_objectSpread({}, elem, {\n        chart: removeTypename(elem.chart)\n      }));\n  }\n};\n\nvar cleanSlide = function cleanSlide(slide) {\n  return _objectSpread({}, removeTypename(slide), {\n    elements: slide.elements.map(cleanSlideElement)\n  });\n};\n\nexport var cleanReport = function cleanReport(report) {\n  return _objectSpread({}, removeTypename(report), {\n    slides: report.slides.map(cleanSlide)\n  });\n};","map":{"version":3,"sources":["/Users/andreas/code/reports/app/src/models/reports.ts"],"names":["gql","omit","uuid","newTextElement","id","type","x","y","width","height","text","value","fontSize","align","newSlide","elements","reportQuery","removeTypename","cleanSlideElement","elem","chart","cleanSlide","slide","map","cleanReport","report","slides"],"mappings":";;;;;;;;;;;;;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,SAASC,IAAT,QAAqB,OAArB;AACA,OAAOC,IAAP,MAAiB,SAAjB;AAgBA,OAAO,IAAMC,cAAc,GAAG,SAAjBA,cAAiB;AAAA,SAAoB;AAChDC,IAAAA,EAAE,EAAEF,IAAI,EADwC;AAEhDG,IAAAA,IAAI,EAAE,MAF0C;AAGhDC,IAAAA,CAAC,EAAE,EAH6C;AAIhDC,IAAAA,CAAC,EAAE,GAJ6C;AAKhDC,IAAAA,KAAK,EAAE,GALyC;AAMhDC,IAAAA,MAAM,EAAE,CANwC;AAOhDC,IAAAA,IAAI,EAAE;AACJC,MAAAA,KAAK,EAAE,SADH;AAEJC,MAAAA,QAAQ,EAAE,EAFN;AAGJC,MAAAA,KAAK,EAAE;AAHH;AAP0C,GAApB;AAAA,CAAvB;AAoCP,OAAO,IAAMC,QAAQ,GAAG,SAAXA,QAAW;AAAA,SAAO;AAC7BV,IAAAA,EAAE,EAAEF,IAAI,EADqB;AAE7Ba,IAAAA,QAAQ,EAAE;AAFmB,GAAP;AAAA,CAAjB;AAKP,OAAO,IAAMC,WAAW,GAAGhB,GAAH,mBAAjB;AAqCP,IAAMiB,cAAc,GAAGhB,IAAI,CAAC,CAAC,YAAD,CAAD,CAA3B;;AAEA,IAAMiB,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,IAAD,EAAwB;AAChD,UAAQA,IAAI,CAACd,IAAb;AACE,SAAK,MAAL;AACE,aAAOY,cAAc,mBAChBE,IADgB;AAEnBT,QAAAA,IAAI,EAAEO,cAAc,CAACE,IAAI,CAACT,IAAN;AAFD,SAArB;;AAIF,SAAK,OAAL;AACE,aAAOO,cAAc,mBAChBE,IADgB;AAEnBC,QAAAA,KAAK,EAAEH,cAAc,CAACE,IAAI,CAACC,KAAN;AAFF,SAArB;AAPJ;AAYD,CAbD;;AAeA,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,KAAD;AAAA,2BACdL,cAAc,CAACK,KAAD,CADA;AAEjBP,IAAAA,QAAQ,EAAEO,KAAK,CAACP,QAAN,CAAeQ,GAAf,CAAmBL,iBAAnB;AAFO;AAAA,CAAnB;;AAIA,OAAO,IAAMM,WAAW,GAAG,SAAdA,WAAc,CAACC,MAAD;AAAA,2BACtBR,cAAc,CAACQ,MAAD,CADQ;AAEzBC,IAAAA,MAAM,EAAED,MAAM,CAACC,MAAP,CAAcH,GAAd,CAAkBF,UAAlB;AAFiB;AAAA,CAApB","sourcesContent":["import gql from \"graphql-tag\";\nimport { omit } from \"ramda\";\nimport uuid from \"uuid/v4\";\n\nexport type textElement = {\n  id: string;\n  type: \"text\";\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n  text: {\n    value: string;\n    fontSize: number;\n    align: \"Left\" | \"Right\" | \"Center\" | \"Justify\";\n  };\n};\n\nexport const newTextElement = (): textElement => ({\n  id: uuid(),\n  type: \"text\",\n  x: 50,\n  y: 130,\n  width: 700,\n  height: 0,\n  text: {\n    value: \"Text...\",\n    fontSize: 24,\n    align: \"Center\"\n  }\n});\nexport type chartElement = {\n  id: string;\n  type: \"chart\";\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n  chart: {\n    dataStore: {\n      id: string;\n    } | null;\n    query: string | null;\n    xAxis: string | null;\n    yAxis: string | null;\n  };\n};\nexport type slideElement = textElement | chartElement;\n\nexport type slide = {\n  id: string;\n  elements: slideElement[];\n};\n\nexport const newSlide = () => ({\n  id: uuid(),\n  elements: []\n});\n\nexport const reportQuery = gql`\n  {\n    id\n    title\n    slides {\n      id\n      elements {\n        id\n        type\n        x\n        y\n        width\n        height\n        text {\n          value\n          fontSize\n          align\n        }\n        chart {\n          dataStore {\n            id\n          }\n          query\n          xAxis\n          yAxis\n        }\n      }\n    }\n  }\n`;\n\nexport type report = {\n  id: string;\n  title: string;\n  slides: slide[];\n};\n\nconst removeTypename = omit([\"__typename\"]);\n\nconst cleanSlideElement = (elem: slideElement) => {\n  switch (elem.type) {\n    case \"text\":\n      return removeTypename({\n        ...elem,\n        text: removeTypename(elem.text)\n      });\n    case \"chart\":\n      return removeTypename({\n        ...elem,\n        chart: removeTypename(elem.chart)\n      });\n  }\n};\n\nconst cleanSlide = (slide: slide): slide => ({\n  ...removeTypename(slide),\n  elements: slide.elements.map(cleanSlideElement)\n});\nexport const cleanReport = (report: report): report => ({\n  ...removeTypename(report),\n  slides: report.slides.map(cleanSlide)\n});\n"]},"metadata":{},"sourceType":"module"}