{"ast":null,"code":"import _objectSpread from \"/Users/andreas/code/reports/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/Users/andreas/code/reports/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useEffect, useState } from \"react\";\nimport { client } from \"../apollo\";\n\nvar queryResult = function queryResult(_ref) {\n  var loading = _ref.loading,\n      error = _ref.error,\n      data = _ref.data;\n  if (loading) return {\n    status: \"Loading\"\n  };\n  if (error) return {\n    status: \"Error\",\n    error: error\n  };\n  return {\n    status: \"Ready\",\n    data: data\n  };\n};\n\nexport var useQuery = function useQuery(options) {\n  var _useState = useState({\n    networkStatus: 1,\n    data: {},\n    loading: true\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      response = _useState2[0],\n      setResponse = _useState2[1];\n\n  useEffect(function () {\n    var observable = client.watchQuery(options);\n    var subscription = observable.subscribe(function (res) {\n      if (res.data !== response.data) {\n        setResponse(res);\n      }\n    });\n    return function () {\n      return subscription.unsubscribe();\n    };\n  }, [options]);\n  return queryResult(response);\n};\nexport var useMutation = function useMutation(options) {\n  var _useState3 = useState({\n    status: \"Idle\"\n  }),\n      _useState4 = _slicedToArray(_useState3, 2),\n      response = _useState4[0],\n      setResponse = _useState4[1];\n\n  var run = function run(vars) {\n    var variables = Object.assign({}, options.variables || {}, vars);\n    setResponse({\n      status: \"Loading\"\n    });\n    client.mutate(_objectSpread({}, options, {\n      variables: variables\n    })).then(function (_ref2) {\n      var data = _ref2.data;\n      setResponse({\n        status: \"Ready\",\n        data: data\n      });\n    }, function (error) {\n      setResponse({\n        status: \"Error\",\n        error: error\n      });\n    });\n  };\n\n  return [run, response];\n};","map":{"version":3,"sources":["/Users/andreas/code/reports/app/src/hooks/apollo.ts"],"names":["useEffect","useState","client","queryResult","loading","error","data","status","useQuery","options","networkStatus","response","setResponse","observable","watchQuery","subscription","subscribe","res","unsubscribe","useMutation","run","vars","variables","Object","assign","mutate","then"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,MAAT,QAAuB,WAAvB;;AAcA,IAAMC,WAAW,GAAI,SAAfA,WAAe,OAIyB;AAAA,MAH5CC,OAG4C,QAH5CA,OAG4C;AAAA,MAF5CC,KAE4C,QAF5CA,KAE4C;AAAA,MAD5CC,IAC4C,QAD5CA,IAC4C;AAC5C,MAAIF,OAAJ,EAAa,OAAO;AAAEG,IAAAA,MAAM,EAAE;AAAV,GAAP;AACb,MAAIF,KAAJ,EAAW,OAAO;AAAEE,IAAAA,MAAM,EAAE,OAAV;AAAmBF,IAAAA,KAAK,EAALA;AAAnB,GAAP;AACX,SAAO;AAAEE,IAAAA,MAAM,EAAE,OAAV;AAAmBD,IAAAA,IAAI,EAAEA;AAAzB,GAAP;AACD,CARD;;AAUA,OAAO,IAAME,QAAQ,GAAI,SAAZA,QAAY,CAAGC,OAAH,EAA6C;AAAA,kBACpCR,QAAQ,CAAyB;AAC/DS,IAAAA,aAAa,EAAE,CADgD;AAE/DJ,IAAAA,IAAI,EAAE,EAFyD;AAG/DF,IAAAA,OAAO,EAAE;AAHsD,GAAzB,CAD4B;AAAA;AAAA,MAC7DO,QAD6D;AAAA,MACnDC,WADmD;;AAOpEZ,EAAAA,SAAS,CACP,YAAM;AACJ,QAAMa,UAAU,GAAGX,MAAM,CAACY,UAAP,CAAqBL,OAArB,CAAnB;AACA,QAAMM,YAAY,GAAGF,UAAU,CAACG,SAAX,CAAqB,UAACC,GAAD,EAA+B;AACvE,UAAIA,GAAG,CAACX,IAAJ,KAAaK,QAAQ,CAACL,IAA1B,EAAgC;AAC9BM,QAAAA,WAAW,CAACK,GAAD,CAAX;AACD;AACF,KAJoB,CAArB;AAKA,WAAO;AAAA,aAAMF,YAAY,CAACG,WAAb,EAAN;AAAA,KAAP;AACD,GATM,EAUP,CAACT,OAAD,CAVO,CAAT;AAaA,SAAON,WAAW,CAACQ,QAAD,CAAlB;AACD,CArBM;AA6BP,OAAO,IAAMQ,WAAW,GAAI,SAAfA,WAAe,CAC1BV,OAD0B,EAEoB;AAAA,mBACdR,QAAQ,CAAoB;AAC1DM,IAAAA,MAAM,EAAE;AADkD,GAApB,CADM;AAAA;AAAA,MACvCI,QADuC;AAAA,MAC7BC,WAD6B;;AAI9C,MAAMQ,GAAG,GAAG,SAANA,GAAM,CAACC,IAAD,EAAgB;AAC1B,QAAMC,SAAS,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBf,OAAO,CAACa,SAAR,IAAqB,EAAvC,EAA2CD,IAA3C,CAAlB;AACAT,IAAAA,WAAW,CAAC;AAAEL,MAAAA,MAAM,EAAE;AAAV,KAAD,CAAX;AACAL,IAAAA,MAAM,CAACuB,MAAP,mBAA4BhB,OAA5B;AAAqCa,MAAAA,SAAS,EAATA;AAArC,QAAkDI,IAAlD,CACE,iBAA2B;AAAA,UAAxBpB,IAAwB,SAAxBA,IAAwB;AACzBM,MAAAA,WAAW,CAAC;AACVL,QAAAA,MAAM,EAAE,OADE;AAEVD,QAAAA,IAAI,EAAJA;AAFU,OAAD,CAAX;AAID,KANH,EAOE,UAACD,KAAD,EAAwB;AACtBO,MAAAA,WAAW,CAAC;AACVL,QAAAA,MAAM,EAAE,OADE;AAEVF,QAAAA,KAAK,EAALA;AAFU,OAAD,CAAX;AAID,KAZH;AAcD,GAjBD;;AAkBA,SAAO,CAACe,GAAD,EAAMT,QAAN,CAAP;AACD,CAzBM","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { client } from \"../apollo\";\nimport {\n  QueryOptions,\n  ApolloQueryResult,\n  MutationOptions,\n  ApolloCurrentResult,\n  ApolloError\n} from \"apollo-boost\";\n\nexport type QueryResult<T> =\n  | { status: \"Loading\" }\n  | { status: \"Ready\"; data: T }\n  | { status: \"Error\"; error: ApolloError };\n\nconst queryResult = <T>({\n  loading,\n  error,\n  data\n}: ApolloCurrentResult<T>): QueryResult<T> => {\n  if (loading) return { status: \"Loading\" };\n  if (error) return { status: \"Error\", error };\n  return { status: \"Ready\", data: data as T };\n};\n\nexport const useQuery = <T>(options: QueryOptions): QueryResult<T> => {\n  const [response, setResponse] = useState<ApolloCurrentResult<T>>({\n    networkStatus: 1,\n    data: {},\n    loading: true\n  });\n\n  useEffect(\n    () => {\n      const observable = client.watchQuery<T>(options);\n      const subscription = observable.subscribe((res: ApolloQueryResult<T>) => {\n        if (res.data !== response.data) {\n          setResponse(res);\n        }\n      });\n      return () => subscription.unsubscribe();\n    },\n    [options]\n  );\n\n  return queryResult(response);\n};\n\nexport type MutationResult<T> =\n  | { status: \"Idle\" }\n  | { status: \"Loading\" }\n  | { status: \"Ready\"; data: T }\n  | { status: \"Error\"; error: ApolloError };\n\nexport const useMutation = <T, Vars = { [key: string]: any }>(\n  options: MutationOptions<T, Vars>\n): [(vars: Vars) => void, MutationResult<T>] => {\n  const [response, setResponse] = useState<MutationResult<T>>({\n    status: \"Idle\"\n  });\n  const run = (vars: Vars) => {\n    const variables = Object.assign({}, options.variables || {}, vars);\n    setResponse({ status: \"Loading\" });\n    client.mutate<T, Vars>({ ...options, variables }).then(\n      ({ data }: { data: T }) => {\n        setResponse({\n          status: \"Ready\",\n          data\n        });\n      },\n      (error: ApolloError) => {\n        setResponse({\n          status: \"Error\",\n          error\n        });\n      }\n    );\n  };\n  return [run, response];\n};\n"]},"metadata":{},"sourceType":"module"}