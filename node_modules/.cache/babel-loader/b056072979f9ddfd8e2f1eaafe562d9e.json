{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/andreas/code/reports/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  type Query {\\n    message: String\\n  }\\n  type Mutation {\\n    setMessage(message: String!): String\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport ApolloClient, { gql } from \"apollo-boost\";\nvar typeDefs = gql(_templateObject());\nvar defaults = {\n  message: \"hello\"\n};\nvar resolvers = {\n  Mutation: {\n    setMessage: function setMessage(_, _ref, _ref2) {\n      var message = _ref.message;\n      var cache = _ref2.cache;\n      cache.writeData({\n        data: {\n          message: message\n        }\n      });\n      return message;\n    }\n  }\n};\nexport var client = new ApolloClient({\n  uri: \"http://localhost:4000/graphql\",\n  clientState: {\n    defaults: defaults,\n    typeDefs: typeDefs,\n    resolvers: resolvers\n  }\n});","map":{"version":3,"sources":["/Users/andreas/code/reports/app/src/apollo.ts"],"names":["ApolloClient","gql","typeDefs","defaults","message","resolvers","Mutation","setMessage","_","cache","writeData","data","client","uri","clientState"],"mappings":";;;;;;;;;;;;AAAA,OAAOA,YAAP,IAAuBC,GAAvB,QAAkC,cAAlC;AAEA,IAAMC,QAAQ,GAAGD,GAAH,mBAAd;AAQA,IAAME,QAAQ,GAAG;AACfC,EAAAA,OAAO,EAAE;AADM,CAAjB;AAIA,IAAMC,SAAS,GAAG;AAChBC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,UAAU,EAAE,oBAACC,CAAD,eAA8C;AAAA,UAAnCJ,OAAmC,QAAnCA,OAAmC;AAAA,UAAjBK,KAAiB,SAAjBA,KAAiB;AACxDA,MAAAA,KAAK,CAACC,SAAN,CAAgB;AAAEC,QAAAA,IAAI,EAAE;AAAEP,UAAAA,OAAO,EAAPA;AAAF;AAAR,OAAhB;AACA,aAAOA,OAAP;AACD;AAJO;AADM,CAAlB;AAQA,OAAO,IAAMQ,MAAM,GAAG,IAAIZ,YAAJ,CAAiB;AACrCa,EAAAA,GAAG,EAAE,+BADgC;AAErCC,EAAAA,WAAW,EAAE;AACXX,IAAAA,QAAQ,EAARA,QADW;AAEXD,IAAAA,QAAQ,EAARA,QAFW;AAGXG,IAAAA,SAAS,EAATA;AAHW;AAFwB,CAAjB,CAAf","sourcesContent":["import ApolloClient, { gql } from \"apollo-boost\";\n\nconst typeDefs = gql`\n  type Query {\n    message: String\n  }\n  type Mutation {\n    setMessage(message: String!): String\n  }\n`;\nconst defaults = {\n  message: \"hello\"\n};\n\nconst resolvers = {\n  Mutation: {\n    setMessage: (_: any, { message }: any, { cache }: any) => {\n      cache.writeData({ data: { message } });\n      return message;\n    }\n  }\n};\nexport const client = new ApolloClient({\n  uri: \"http://localhost:4000/graphql\",\n  clientState: {\n    defaults,\n    typeDefs,\n    resolvers\n  }\n});\n"]},"metadata":{},"sourceType":"module"}