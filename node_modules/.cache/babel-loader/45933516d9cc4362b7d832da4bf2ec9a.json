{"ast":null,"code":"import _slicedToArray from \"/Users/andreas/code/reports/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"/Users/andreas/code/reports/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/andreas/code/reports/app/src/pages/DatastoresPage.tsx\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  {\\n    datastores {\\n      id\\n      type\\n      name\\n      host\\n      port\\n      user\\n      database\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState } from \"react\";\nimport styled from \"react-emotion\";\nimport { column, columnSpacing } from \"../styles\";\nimport Menu from \"../components/Menu\";\nimport gql from \"graphql-tag\";\nimport { Spinner } from \"../components/Spinner\";\nimport { useQuery } from \"../hooks\";\nvar FETCH_DATASTORES = gql(_templateObject());\n\nvar DatastoresPage = function DatastoresPage() {\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      selectedDatastore = _useState2[0],\n      setSelectedDatastore = _useState2[1];\n\n  return React.createElement(ViewContainer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, React.createElement(Menu, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }), React.createElement(DatastoreList, {\n    onClick: setSelectedDatastore,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }));\n};\n\nexport default DatastoresPage;\n\nvar DatastoreItem = function DatastoreItem(_ref) {\n  var datastore = _ref.datastore;\n  return React.createElement(DatastoreListItem, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, datastore.type), React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, datastore.name));\n};\n\nvar DatastoreList = function DatastoreList(_ref2) {\n  var onClick = _ref2.onClick;\n  var result = useQuery({\n    query: FETCH_DATASTORES\n  });\n\n  switch (result.status) {\n    case \"Loading\":\n      return React.createElement(Spinner, {\n        color: \"primary\",\n        size: 24,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      });\n\n    case \"Error\":\n      return React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, \" Error fetching data stores \");\n\n    case \"Ready\":\n      return React.createElement(\"ul\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, result.data.datastores.map(function (datastore) {\n        return React.createElement(DatastoreItem, {\n          key: datastore.id,\n          datastore: datastore,\n          onClick: onClick,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 71\n          },\n          __self: this\n        });\n      }));\n  }\n};\n\nvar ViewContainer =\n/*#__PURE__*/\nstyled(\"div\", {\n  label: \"ViewContainer\",\n  target: \"e6712z80\"\n})(column, \";\");\nvar DatastoreListItem =\n/*#__PURE__*/\nstyled(\"li\", {\n  label: \"DatastoreListItem\",\n  target: \"e6712z81\"\n})(column, \";\", columnSpacing(5), \";\");","map":{"version":3,"sources":["/Users/andreas/code/reports/app/src/pages/DatastoresPage.tsx"],"names":["React","useState","styled","column","columnSpacing","Menu","gql","Spinner","useQuery","FETCH_DATASTORES","DatastoresPage","selectedDatastore","setSelectedDatastore","DatastoreItem","datastore","type","name","DatastoreList","onClick","result","query","status","data","datastores","map","id","ViewContainer","DatastoreListItem"],"mappings":";;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,MAAP,MAAmB,eAAnB;AACA,SAASC,MAAT,EAAiBC,aAAjB,QAA4C,WAA5C;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,SAASC,OAAT,QAAwB,uBAAxB;AACA,SAASC,QAAT,QAAyB,UAAzB;AAEA,IAAMC,gBAAgB,GAAGH,GAAH,mBAAtB;;AAwBA,IAAMI,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AAAA,kBACuBT,QAAQ,CACxD,IADwD,CAD/B;AAAA;AAAA,MACpBU,iBADoB;AAAA,MACDC,oBADC;;AAK3B,SACE,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE,oBAAC,aAAD;AAAe,IAAA,OAAO,EAAEA,oBAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF;AAMD,CAXD;;AAYA,eAAeF,cAAf;;AAEA,IAAMG,aAAa,GAAG,SAAhBA,aAAgB;AAAA,MAAGC,SAAH,QAAGA,SAAH;AAAA,SACpB,oBAAC,iBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAOA,SAAS,CAACC,IAAjB,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAOD,SAAS,CAACE,IAAjB,CAFF,CADoB;AAAA,CAAtB;;AAWA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,QAAqC;AAAA,MAAlCC,OAAkC,SAAlCA,OAAkC;AACzD,MAAMC,MAAM,GAAGX,QAAQ,CAA8B;AACnDY,IAAAA,KAAK,EAAEX;AAD4C,GAA9B,CAAvB;;AAGA,UAAQU,MAAM,CAACE,MAAf;AACE,SAAK,SAAL;AACE,aAAO,oBAAC,OAAD;AAAS,QAAA,KAAK,EAAC,SAAf;AAAyB,QAAA,IAAI,EAAE,EAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;;AACF,SAAK,OAAL;AACE,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wCAAP;;AACF,SAAK,OAAL;AACE,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGF,MAAM,CAACG,IAAP,CAAYC,UAAZ,CAAuBC,GAAvB,CAA2B,UAACV,SAAD;AAAA,eAC1B,oBAAC,aAAD;AACE,UAAA,GAAG,EAAEA,SAAS,CAACW,EADjB;AAEE,UAAA,SAAS,EAAEX,SAFb;AAGE,UAAA,OAAO,EAAEI,OAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAD0B;AAAA,OAA3B,CADH,CADF;AANJ;AAkBD,CAtBD;;AAwBA,IAAMQ,aAAa;AAAA;AAAGxB,MAAH;AAAA;AAAA;AAAA,GACfC,MADe,MAAnB;AAIA,IAAMwB,iBAAiB;AAAA;AAAGzB,MAAH;AAAA;AAAA;AAAA,GACnBC,MADmB,OAEnBC,aAAa,CAAC,CAAD,CAFM,MAAvB","sourcesContent":["import React, { useState } from \"react\";\nimport styled from \"react-emotion\";\nimport { column, columnSpacing, fill } from \"../styles\";\nimport Menu from \"../components/Menu\";\nimport gql from \"graphql-tag\";\nimport { Spinner } from \"../components/Spinner\";\nimport { useQuery } from \"../hooks\";\n\nconst FETCH_DATASTORES = gql`\n  {\n    datastores {\n      id\n      type\n      name\n      host\n      port\n      user\n      database\n    }\n  }\n`;\n\ntype Datastore = {\n  id: string;\n  type: \"MySQL\";\n  name: string;\n  host: string;\n  port: number;\n  user: string;\n  database: string;\n};\n\nconst DatastoresPage = () => {\n  const [selectedDatastore, setSelectedDatastore] = useState<Datastore | null>(\n    null\n  );\n\n  return (\n    <ViewContainer>\n      <Menu />\n      <DatastoreList onClick={setSelectedDatastore} />\n    </ViewContainer>\n  );\n};\nexport default DatastoresPage;\n\nconst DatastoreItem = ({ datastore }: any) => (\n  <DatastoreListItem>\n    <span>{datastore.type}</span>\n    <span>{datastore.name}</span>\n  </DatastoreListItem>\n);\n\ntype DatastoreListProps = {\n  onClick: (datastore: Datastore) => void;\n};\n\nconst DatastoreList = ({ onClick }: DatastoreListProps) => {\n  const result = useQuery<{ datastores: Datastore[] }>({\n    query: FETCH_DATASTORES\n  });\n  switch (result.status) {\n    case \"Loading\":\n      return <Spinner color=\"primary\" size={24} />;\n    case \"Error\":\n      return <p> Error fetching data stores </p>;\n    case \"Ready\":\n      return (\n        <ul>\n          {result.data.datastores.map((datastore: Datastore) => (\n            <DatastoreItem\n              key={datastore.id}\n              datastore={datastore}\n              onClick={onClick}\n            />\n          ))}\n        </ul>\n      );\n  }\n};\n\nconst ViewContainer = styled.div`\n  ${column};\n`;\n\nconst DatastoreListItem = styled.li`\n  ${column};\n  ${columnSpacing(5)};\n`;\n"]},"metadata":{},"sourceType":"module"}